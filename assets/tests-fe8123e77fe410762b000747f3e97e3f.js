'use strict';

define('@ember/test-helpers/-utils', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.nextTickPromise = nextTickPromise;
  exports.runDestroyablesFor = runDestroyablesFor;
  var nextTick = exports.nextTick = setTimeout;
  var futureTick = exports.futureTick = setTimeout;

  /**
   @private
   @returns {Promise<void>} promise which resolves on the next turn of the event loop
  */
  function nextTickPromise() {
    return new Ember.RSVP.Promise(function (resolve) {
      nextTick(resolve);
    });
  }

  /**
   Retrieves an array of destroyables from the specified property on the object
   provided, iterates that array invoking each function, then deleting the
   property (clearing the array).
  
   @private
   @param {Object} object an object to search for the destroyable array within
   @param {string} property the property on the object that contains the destroyable array
  */
  function runDestroyablesFor(object, property) {
    var destroyables = object[property];

    if (!destroyables) {
      return;
    }

    for (var i = 0; i < destroyables.length; i++) {
      destroyables[i]();
    }

    delete object[property];
  }
});
define('@ember/test-helpers/application', ['exports', '@ember/test-helpers/resolver'], function (exports, _resolver) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.setApplication = setApplication;
  exports.getApplication = getApplication;


  var __application__;

  /**
    Stores the provided application instance so that tests being ran will be aware of the application under test.
  
    - Required by `setupApplicationContext` method.
    - Used by `setupContext` and `setupRenderingContext` when present.
  
    @public
    @param {Ember.Application} application the application that will be tested
  */
  function setApplication(application) {
    __application__ = application;

    if (!(0, _resolver.getResolver)()) {
      var Resolver = application.Resolver;
      var resolver = Resolver.create({ namespace: application });

      (0, _resolver.setResolver)(resolver);
    }
  }

  /**
    Retrieve the application instance stored by `setApplication`.
  
    @public
    @returns {Ember.Application} the previously stored application instance under test
  */
  function getApplication() {
    return __application__;
  }
});
define('@ember/test-helpers/build-owner', ['exports', 'ember-test-helpers/legacy-0-6-x/build-registry'], function (exports, _buildRegistry) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = buildOwner;


  /**
    Creates an "owner" (an object that either _is_ or duck-types like an
    `Ember.ApplicationInstance`) from the provided options.
  
    If `options.application` is present (e.g. setup by an earlier call to
    `setApplication`) an `Ember.ApplicationInstance` is built via
    `application.buildInstance()`.
  
    If `options.application` is not present, we fall back to using
    `options.resolver` instead (setup via `setResolver`). This creates a mock
    "owner" by using a custom created combination of `Ember.Registry`,
    `Ember.Container`, `Ember._ContainerProxyMixin`, and
    `Ember._RegistryProxyMixin`.
  
    @private
    @param {Ember.Application} [application] the Ember.Application to build an instance from
    @param {Ember.Resolver} [resolver] the resolver to use to back a "mock owner"
    @returns {Promise<Ember.ApplicationInstance>} a promise resolving to the generated "owner"
  */
  function buildOwner(application, resolver) {
    if (application) {
      return application.boot().then(function (app) {
        return app.buildInstance().boot();
      });
    }

    if (!resolver) {
      throw new Error('You must set up the ember-test-helpers environment with either `setResolver` or `setApplication` before running any tests.');
    }

    var _legacyBuildRegistry = (0, _buildRegistry.default)(resolver),
        owner = _legacyBuildRegistry.owner;

    return Ember.RSVP.Promise.resolve(owner);
  }
});
define('@ember/test-helpers/dom/-get-element', ['exports', '@ember/test-helpers/dom/get-root-element'], function (exports, _getRootElement) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = getElement;


  /**
    Used internally by the DOM interaction helpers to find one element.
  
    @private
    @param {string|Element} target the element or selector to retrieve
    @returns {Element} the target or selector
  */
  function getElement(target) {
    if (target.nodeType === Node.ELEMENT_NODE || target.nodeType === Node.DOCUMENT_NODE || target instanceof Window) {
      return target;
    } else if (typeof target === 'string') {
      var rootElement = (0, _getRootElement.default)();

      return rootElement.querySelector(target);
    } else {
      throw new Error('Must use an element or a selector string');
    }
  }
});
define('@ember/test-helpers/dom/-get-elements', ['exports', '@ember/test-helpers/dom/get-root-element'], function (exports, _getRootElement) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = getElements;


  /**
    Used internally by the DOM interaction helpers to find multiple elements.
  
    @private
    @param {string} target the selector to retrieve
    @returns {NodeList} the matched elements
  */
  function getElements(target) {
    if (typeof target === 'string') {
      var rootElement = (0, _getRootElement.default)();

      return rootElement.querySelectorAll(target);
    } else {
      throw new Error('Must use a selector string');
    }
  }
});
define('@ember/test-helpers/dom/-is-focusable', ['exports', '@ember/test-helpers/dom/-is-form-control'], function (exports, _isFormControl) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isFocusable;


  var FOCUSABLE_TAGS = ['A'];

  /**
    @private
    @param {Element} element the element to check
    @returns {boolean} `true` when the element is focusable, `false` otherwise
  */
  function isFocusable(element) {
    if ((0, _isFormControl.default)(element) || element.isContentEditable || FOCUSABLE_TAGS.indexOf(element.tagName) > -1) {
      return true;
    }

    return element.hasAttribute('tabindex');
  }
});
define('@ember/test-helpers/dom/-is-form-control', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isFormControl;
  var FORM_CONTROL_TAGS = ['INPUT', 'BUTTON', 'SELECT', 'TEXTAREA'];

  /**
    @private
    @param {Element} element the element to check
    @returns {boolean} `true` when the element is a form control, `false` otherwise
  */
  function isFormControl(element) {
    var tagName = element.tagName,
        type = element.type;


    if (type === 'hidden') {
      return false;
    }

    return FORM_CONTROL_TAGS.indexOf(tagName) > -1;
  }
});
define("@ember/test-helpers/dom/-to-array", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = toArray;
  /**
    @private
    @param {NodeList} nodelist the nodelist to convert to an array
    @returns {Array} an array
  */
  function toArray(nodelist) {
    var array = new Array(nodelist.length);
    for (var i = 0; i < nodelist.length; i++) {
      array[i] = nodelist[i];
    }

    return array;
  }
});
define('@ember/test-helpers/dom/blur', ['exports', '@ember/test-helpers/dom/-get-element', '@ember/test-helpers/dom/fire-event', '@ember/test-helpers/settled', '@ember/test-helpers/dom/-is-focusable', '@ember/test-helpers/-utils'], function (exports, _getElement, _fireEvent, _settled, _isFocusable, _utils) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.__blur__ = __blur__;
  exports.default = blur;


  /**
    @private
    @param {Element} element the element to trigger events on
  */
  function __blur__(element) {
    var browserIsNotFocused = document.hasFocus && !document.hasFocus();

    // makes `document.activeElement` be `body`.
    // If the browser is focused, it also fires a blur event
    element.blur();

    // Chrome/Firefox does not trigger the `blur` event if the window
    // does not have focus. If the document does not have focus then
    // fire `blur` event via native event.
    if (browserIsNotFocused) {
      (0, _fireEvent.default)(element, 'blur', { bubbles: false });
      (0, _fireEvent.default)(element, 'focusout');
    }
  }

  /**
    Unfocus the specified target.
  
    Sends a number of events intending to simulate a "real" user unfocusing an
    element.
  
    The following events are triggered (in order):
  
    - `blur`
    - `focusout`
  
    The exact listing of events that are triggered may change over time as needed
    to continue to emulate how actual browsers handle unfocusing a given element.
  
    @public
    @param {string|Element} [target=document.activeElement] the element or selector to unfocus
    @return {Promise<void>} resolves when settled
  */
  function blur() {
    var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.activeElement;

    return (0, _utils.nextTickPromise)().then(function () {
      var element = (0, _getElement.default)(target);
      if (!element) {
        throw new Error('Element not found when calling `blur(\'' + target + '\')`.');
      }

      if (!(0, _isFocusable.default)(element)) {
        throw new Error(target + ' is not focusable');
      }

      __blur__(element);

      return (0, _settled.default)();
    });
  }
});
define('@ember/test-helpers/dom/click', ['exports', '@ember/test-helpers/dom/-get-element', '@ember/test-helpers/dom/fire-event', '@ember/test-helpers/dom/focus', '@ember/test-helpers/settled', '@ember/test-helpers/dom/-is-focusable', '@ember/test-helpers/-utils'], function (exports, _getElement, _fireEvent, _focus, _settled, _isFocusable, _utils) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.__click__ = __click__;
  exports.default = click;


  /**
    @private
    @param {Element} element the element to click on
  */
  function __click__(element) {
    (0, _fireEvent.default)(element, 'mousedown');

    if ((0, _isFocusable.default)(element)) {
      (0, _focus.__focus__)(element);
    }

    (0, _fireEvent.default)(element, 'mouseup');
    (0, _fireEvent.default)(element, 'click');
  }

  /**
    Clicks on the specified target.
  
    Sends a number of events intending to simulate a "real" user clicking on an
    element.
  
    For non-focusable elements the following events are triggered (in order):
  
    - `mousedown`
    - `mouseup`
    - `click`
  
    For focusable (e.g. form control) elements the following events are triggered
    (in order):
  
    - `mousedown`
    - `focus`
    - `focusin`
    - `mouseup`
    - `click`
  
    The exact listing of events that are triggered may change over time as needed
    to continue to emulate how actual browsers handle clicking a given element.
  
    @public
    @param {string|Element} target the element or selector to click on
    @return {Promise<void>} resolves when settled
  */
  function click(target) {
    return (0, _utils.nextTickPromise)().then(function () {
      if (!target) {
        throw new Error('Must pass an element or selector to `click`.');
      }

      var element = (0, _getElement.default)(target);
      if (!element) {
        throw new Error('Element not found when calling `click(\'' + target + '\')`.');
      }

      __click__(element);
      return (0, _settled.default)();
    });
  }
});
define('@ember/test-helpers/dom/fill-in', ['exports', '@ember/test-helpers/dom/-get-element', '@ember/test-helpers/dom/-is-form-control', '@ember/test-helpers/dom/focus', '@ember/test-helpers/settled', '@ember/test-helpers/dom/fire-event', '@ember/test-helpers/-utils'], function (exports, _getElement, _isFormControl, _focus, _settled, _fireEvent, _utils) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = fillIn;


  /**
    Fill the provided text into the `value` property (or set `.innerHTML` when
    the target is a content editable element) then trigger `change` and `input`
    events on the specified target.
  
    @public
    @param {string|Element} target the element or selector to enter text into
    @param {string} text the text to fill into the target element
    @return {Promise<void>} resolves when the application is settled
  */
  function fillIn(target, text) {
    return (0, _utils.nextTickPromise)().then(function () {
      if (!target) {
        throw new Error('Must pass an element or selector to `fillIn`.');
      }

      var element = (0, _getElement.default)(target);
      if (!element) {
        throw new Error('Element not found when calling `fillIn(\'' + target + '\')`.');
      }
      var isControl = (0, _isFormControl.default)(element);
      if (!isControl && !element.isContentEditable) {
        throw new Error('`fillIn` is only usable on form controls or contenteditable elements.');
      }

      if (typeof text === 'undefined' || text === null) {
        throw new Error('Must provide `text` when calling `fillIn`.');
      }

      (0, _focus.__focus__)(element);

      if (isControl) {
        element.value = text;
      } else {
        element.innerHTML = text;
      }

      (0, _fireEvent.default)(element, 'input');
      (0, _fireEvent.default)(element, 'change');

      return (0, _settled.default)();
    });
  }
});
define('@ember/test-helpers/dom/find-all', ['exports', '@ember/test-helpers/dom/-get-elements', '@ember/test-helpers/dom/-to-array'], function (exports, _getElements, _toArray) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = find;


  /**
    Find all elements matched by the given selector. Equivalent to calling
    `querySelectorAll()` on the test root element.
  
    @public
    @param {string} selector the selector to search for
    @return {Array} array of matched elements
  */
  function find(selector) {
    if (!selector) {
      throw new Error('Must pass a selector to `findAll`.');
    }

    return (0, _toArray.default)((0, _getElements.default)(selector));
  }
});
define('@ember/test-helpers/dom/find', ['exports', '@ember/test-helpers/dom/-get-element'], function (exports, _getElement) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = find;


  /**
    Find the first element matched by the given selector. Equivalent to calling
    `querySelector()` on the test root element.
  
    @public
    @param {string} selector the selector to search for
    @return {Element} matched element or null
  */
  function find(selector) {
    if (!selector) {
      throw new Error('Must pass a selector to `find`.');
    }

    return (0, _getElement.default)(selector);
  }
});
define('@ember/test-helpers/dom/fire-event', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = fireEvent;


  var DEFAULT_EVENT_OPTIONS = { bubbles: true, cancelable: true };
  var KEYBOARD_EVENT_TYPES = exports.KEYBOARD_EVENT_TYPES = Object.freeze(['keydown', 'keypress', 'keyup']);
  var MOUSE_EVENT_TYPES = ['click', 'mousedown', 'mouseup', 'dblclick', 'mouseenter', 'mouseleave', 'mousemove', 'mouseout', 'mouseover'];
  var FILE_SELECTION_EVENT_TYPES = ['change'];

  /**
    Internal helper used to build and dispatch events throughout the other DOM helpers.
  
    @private
    @param {Element} element the element to dispatch the event to
    @param {string} eventType the type of event
    @param {Object} [options] additional properties to be set on the event
    @returns {Event} the event that was dispatched
  */
  function fireEvent(element, eventType) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    if (!element) {
      throw new Error('Must pass an element to `fireEvent`');
    }

    var event = void 0;
    if (KEYBOARD_EVENT_TYPES.indexOf(eventType) > -1) {
      event = buildKeyboardEvent(eventType, options);
    } else if (MOUSE_EVENT_TYPES.indexOf(eventType) > -1) {
      var rect = void 0;
      if (element instanceof Window) {
        rect = element.document.documentElement.getBoundingClientRect();
      } else if (element instanceof Document) {
        rect = element.documentElement.getBoundingClientRect();
      } else if (element instanceof Element) {
        rect = element.getBoundingClientRect();
      } else {
        return;
      }

      var x = rect.left + 1;
      var y = rect.top + 1;
      var simulatedCoordinates = {
        screenX: x + 5, // Those numbers don't really mean anything.
        screenY: y + 95, // They're just to make the screenX/Y be different of clientX/Y..
        clientX: x,
        clientY: y
      };

      event = buildMouseEvent(eventType, Ember.merge(simulatedCoordinates, options));
    } else if (FILE_SELECTION_EVENT_TYPES.indexOf(eventType) > -1 && element.files) {
      event = buildFileEvent(eventType, element, options);
    } else {
      event = buildBasicEvent(eventType, options);
    }

    element.dispatchEvent(event);
    return event;
  }

  // eslint-disable-next-line require-jsdoc
  function buildBasicEvent(type) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var event = document.createEvent('Events');

    var bubbles = options.bubbles !== undefined ? options.bubbles : true;
    var cancelable = options.cancelable !== undefined ? options.cancelable : true;

    delete options.bubbles;
    delete options.cancelable;

    // bubbles and cancelable are readonly, so they can be
    // set when initializing event
    event.initEvent(type, bubbles, cancelable);
    Ember.merge(event, options);
    return event;
  }

  // eslint-disable-next-line require-jsdoc
  function buildMouseEvent(type) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var event = void 0;
    try {
      event = document.createEvent('MouseEvents');
      var eventOpts = Ember.merge(Ember.merge({}, DEFAULT_EVENT_OPTIONS), options);
      event.initMouseEvent(type, eventOpts.bubbles, eventOpts.cancelable, window, eventOpts.detail, eventOpts.screenX, eventOpts.screenY, eventOpts.clientX, eventOpts.clientY, eventOpts.ctrlKey, eventOpts.altKey, eventOpts.shiftKey, eventOpts.metaKey, eventOpts.button, eventOpts.relatedTarget);
    } catch (e) {
      event = buildBasicEvent(type, options);
    }
    return event;
  }

  // eslint-disable-next-line require-jsdoc
  function buildKeyboardEvent(type) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var eventOpts = Ember.merge(Ember.merge({}, DEFAULT_EVENT_OPTIONS), options);
    var event = void 0,
        eventMethodName = void 0;

    try {
      event = new KeyboardEvent(type, eventOpts);

      // Property definitions are required for B/C for keyboard event usage
      // If this properties are not defined, when listening for key events
      // keyCode/which will be 0. Also, keyCode and which now are string
      // and if app compare it with === with integer key definitions,
      // there will be a fail.
      //
      // https://w3c.github.io/uievents/#interface-keyboardevent
      // https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent
      Object.defineProperty(event, 'keyCode', {
        get: function get() {
          return parseInt(this.key);
        }
      });

      Object.defineProperty(event, 'which', {
        get: function get() {
          return parseInt(this.key);
        }
      });

      return event;
    } catch (e) {
      // left intentionally blank
    }

    try {
      event = document.createEvent('KeyboardEvents');
      eventMethodName = 'initKeyboardEvent';
    } catch (e) {
      // left intentionally blank
    }

    if (!event) {
      try {
        event = document.createEvent('KeyEvents');
        eventMethodName = 'initKeyEvent';
      } catch (e) {
        // left intentionally blank
      }
    }

    if (event) {
      event[eventMethodName](type, eventOpts.bubbles, eventOpts.cancelable, window, eventOpts.ctrlKey, eventOpts.altKey, eventOpts.shiftKey, eventOpts.metaKey, eventOpts.keyCode, eventOpts.charCode);
    } else {
      event = buildBasicEvent(type, options);
    }

    return event;
  }

  // eslint-disable-next-line require-jsdoc
  function buildFileEvent(type, element) {
    var files = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

    var event = buildBasicEvent(type);

    if (files.length > 0) {
      Object.defineProperty(files, 'item', {
        value: function value(index) {
          return typeof index === 'number' ? this[index] : null;
        }
      });
      Object.defineProperty(element, 'files', {
        value: files
      });
    }

    Object.defineProperty(event, 'target', {
      value: element
    });

    return event;
  }
});
define('@ember/test-helpers/dom/focus', ['exports', '@ember/test-helpers/dom/-get-element', '@ember/test-helpers/dom/fire-event', '@ember/test-helpers/settled', '@ember/test-helpers/dom/-is-focusable', '@ember/test-helpers/-utils'], function (exports, _getElement, _fireEvent, _settled, _isFocusable, _utils) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.__focus__ = __focus__;
  exports.default = focus;


  /**
    @private
    @param {Element} element the element to trigger events on
  */
  function __focus__(element) {
    var browserIsNotFocused = document.hasFocus && !document.hasFocus();

    // makes `document.activeElement` be `element`. If the browser is focused, it also fires a focus event
    element.focus();

    // Firefox does not trigger the `focusin` event if the window
    // does not have focus. If the document does not have focus then
    // fire `focusin` event as well.
    if (browserIsNotFocused) {
      // if the browser is not focused the previous `el.focus()` didn't fire an event, so we simulate it
      (0, _fireEvent.default)(element, 'focus', {
        bubbles: false
      });

      (0, _fireEvent.default)(element, 'focusin');
    }
  }

  /**
    Focus the specified target.
  
    Sends a number of events intending to simulate a "real" user focusing an
    element.
  
    The following events are triggered (in order):
  
    - `focus`
    - `focusin`
  
    The exact listing of events that are triggered may change over time as needed
    to continue to emulate how actual browsers handle focusing a given element.
  
    @public
    @param {string|Element} target the element or selector to focus
    @return {Promise<void>} resolves when the application is settled
  */
  function focus(target) {
    return (0, _utils.nextTickPromise)().then(function () {
      if (!target) {
        throw new Error('Must pass an element or selector to `focus`.');
      }

      var element = (0, _getElement.default)(target);
      if (!element) {
        throw new Error('Element not found when calling `focus(\'' + target + '\')`.');
      }

      if (!(0, _isFocusable.default)(element)) {
        throw new Error(target + ' is not focusable');
      }

      __focus__(element);

      return (0, _settled.default)();
    });
  }
});
define('@ember/test-helpers/dom/get-root-element', ['exports', '@ember/test-helpers/setup-context'], function (exports, _setupContext) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = getRootElement;


  /**
    Get the root element of the application under test (usually `#ember-testing`)
  
    @public
    @returns {Element} the root element
  */
  function getRootElement() {
    var context = (0, _setupContext.getContext)();
    var owner = context && context.owner;

    if (!owner) {
      throw new Error('Must setup rendering context before attempting to interact with elements.');
    }

    var rootElementSelector = void 0;
    // When the host app uses `setApplication` (instead of `setResolver`) the owner has
    // a `rootElement` set on it with the element id to be used
    if (owner && owner._emberTestHelpersMockOwner === undefined) {
      rootElementSelector = owner.rootElement;
    } else {
      rootElementSelector = '#ember-testing';
    }

    var rootElement = document.querySelector(rootElementSelector);

    return rootElement;
  }
});
define('@ember/test-helpers/dom/tap', ['exports', '@ember/test-helpers/dom/-get-element', '@ember/test-helpers/dom/fire-event', '@ember/test-helpers/dom/click', '@ember/test-helpers/settled', '@ember/test-helpers/-utils'], function (exports, _getElement, _fireEvent, _click, _settled, _utils) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = tap;


  /**
    Taps on the specified target.
  
    Sends a number of events intending to simulate a "real" user tapping on an
    element.
  
    For non-focusable elements the following events are triggered (in order):
  
    - `touchstart`
    - `touchend`
    - `mousedown`
    - `mouseup`
    - `click`
  
    For focusable (e.g. form control) elements the following events are triggered
    (in order):
  
    - `touchstart`
    - `touchend`
    - `mousedown`
    - `focus`
    - `focusin`
    - `mouseup`
    - `click`
  
    The exact listing of events that are triggered may change over time as needed
    to continue to emulate how actual browsers handle tapping on a given element.
  
    @public
    @param {string|Element} target the element or selector to tap on
    @param {Object} options the options to be provided to the touch events
    @return {Promise<void>} resolves when settled
  */
  function tap(target) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    return (0, _utils.nextTickPromise)().then(function () {
      if (!target) {
        throw new Error('Must pass an element or selector to `tap`.');
      }

      var element = (0, _getElement.default)(target);
      if (!element) {
        throw new Error('Element not found when calling `tap(\'' + target + '\')`.');
      }

      var touchstartEv = (0, _fireEvent.default)(element, 'touchstart', options);
      var touchendEv = (0, _fireEvent.default)(element, 'touchend', options);

      if (!touchstartEv.defaultPrevented && !touchendEv.defaultPrevented) {
        (0, _click.__click__)(element);
      }

      return (0, _settled.default)();
    });
  }
});
define('@ember/test-helpers/dom/trigger-event', ['exports', '@ember/test-helpers/dom/-get-element', '@ember/test-helpers/dom/fire-event', '@ember/test-helpers/settled', '@ember/test-helpers/-utils'], function (exports, _getElement, _fireEvent, _settled, _utils) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = triggerEvent;


  /**
    Triggers an event on the specified target.
  
    @public
    @param {string|Element} target the element or selector to trigger the event on
    @param {string} eventType the type of event to trigger
    @param {Object} options additional properties to be set on the event
    @return {Promise<void>} resolves when the application is settled
  */
  function triggerEvent(target, eventType, options) {
    return (0, _utils.nextTickPromise)().then(function () {
      if (!target) {
        throw new Error('Must pass an element or selector to `triggerEvent`.');
      }

      var element = (0, _getElement.default)(target);
      if (!element) {
        throw new Error('Element not found when calling `triggerEvent(\'' + target + '\', ...)`.');
      }

      if (!eventType) {
        throw new Error('Must provide an `eventType` to `triggerEvent`');
      }

      (0, _fireEvent.default)(element, eventType, options);

      return (0, _settled.default)();
    });
  }
});
define('@ember/test-helpers/dom/trigger-key-event', ['exports', '@ember/test-helpers/dom/-get-element', '@ember/test-helpers/dom/fire-event', '@ember/test-helpers/settled', '@ember/test-helpers/-utils'], function (exports, _getElement, _fireEvent, _settled, _utils) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = triggerKeyEvent;


  var DEFAULT_MODIFIERS = Object.freeze({
    ctrlKey: false,
    altKey: false,
    shiftKey: false,
    metaKey: false
  });

  /**
    Triggers a keyboard event on the specified target.
  
    @public
    @param {string|Element} target the element or selector to trigger the event on
    @param {'keydown' | 'keyup' | 'keypress'} eventType the type of event to trigger
    @param {string} keyCode the keyCode of the event being triggered
    @param {Object} [modifiers] the state of various modifier keys
    @param {boolean} [modifiers.ctrlKey=false] if true the generated event will indicate the control key was pressed during the key event
    @param {boolean} [modifiers.altKey=false] if true the generated event will indicate the alt key was pressed during the key event
    @param {boolean} [modifiers.shiftKey=false] if true the generated event will indicate the shift key was pressed during the key event
    @param {boolean} [modifiers.metaKey=false] if true the generated event will indicate the meta key was pressed during the key event
    @return {Promise<void>} resolves when the application is settled
  */
  function triggerKeyEvent(target, eventType, keyCode) {
    var modifiers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_MODIFIERS;

    return (0, _utils.nextTickPromise)().then(function () {
      if (!target) {
        throw new Error('Must pass an element or selector to `triggerKeyEvent`.');
      }

      var element = (0, _getElement.default)(target);
      if (!element) {
        throw new Error('Element not found when calling `triggerKeyEvent(\'' + target + '\', ...)`.');
      }

      if (!eventType) {
        throw new Error('Must provide an `eventType` to `triggerKeyEvent`');
      }

      if (_fireEvent.KEYBOARD_EVENT_TYPES.indexOf(eventType) === -1) {
        var validEventTypes = _fireEvent.KEYBOARD_EVENT_TYPES.join(', ');
        throw new Error('Must provide an `eventType` of ' + validEventTypes + ' to `triggerKeyEvent` but you passed `' + eventType + '`.');
      }

      if (!keyCode) {
        throw new Error('Must provide a `keyCode` to `triggerKeyEvent`');
      }

      var options = Ember.merge({ keyCode: keyCode, which: keyCode, key: keyCode }, modifiers);

      (0, _fireEvent.default)(element, eventType, options);

      return (0, _settled.default)();
    });
  }
});
define('@ember/test-helpers/dom/wait-for', ['exports', '@ember/test-helpers/wait-until', '@ember/test-helpers/dom/-get-element', '@ember/test-helpers/dom/-get-elements', '@ember/test-helpers/dom/-to-array', '@ember/test-helpers/-utils'], function (exports, _waitUntil, _getElement, _getElements, _toArray, _utils) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = waitFor;


  /**
    Used to wait for a particular selector to appear in the DOM. Due to the fact
    that it does not wait for general settledness, this is quite useful for testing
    interim DOM states (e.g. loading states, pending promises, etc).
  
    @param {string} selector the selector to wait for
    @param {Object} [options] the options to be used
    @param {number} [options.timeout=1000] the time to wait (in ms) for a match
    @param {number} [options.count=1] the number of elements that should match the provided selector
    @returns {Element|Array<Element>} the element (or array of elements) that were being waited upon
  */
  function waitFor(selector) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$timeout = _ref.timeout,
        timeout = _ref$timeout === undefined ? 1000 : _ref$timeout,
        _ref$count = _ref.count,
        count = _ref$count === undefined ? null : _ref$count;

    return (0, _utils.nextTickPromise)().then(function () {
      if (!selector) {
        throw new Error('Must pass a selector to `waitFor`.');
      }

      var callback = void 0;
      if (count !== null) {
        callback = function callback() {
          var elements = (0, _getElements.default)(selector);
          if (elements.length === count) {
            return (0, _toArray.default)(elements);
          }
        };
      } else {
        callback = function callback() {
          return (0, _getElement.default)(selector);
        };
      }
      return (0, _waitUntil.default)(callback, { timeout: timeout });
    });
  }
});
define('@ember/test-helpers/global', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.default = function () {
    if (typeof self !== 'undefined') {
      return self;
    } else if (typeof window !== 'undefined') {
      return window;
    } else if (typeof global !== 'undefined') {
      return global;
    } else {
      return Function('return this')();
    }
  }();
});
define('@ember/test-helpers/has-ember-version', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = hasEmberVersion;


  /**
    Checks if the currently running Ember version is greater than or equal to the
    specified major and minor version numbers.
  
    @private
    @param {number} major the major version number to compare
    @param {number} minor the minor version number to compare
    @returns {boolean} true if the Ember version is >= MAJOR.MINOR specified, false otherwise
  */
  function hasEmberVersion(major, minor) {
    var numbers = Ember.VERSION.split('-')[0].split('.');
    var actualMajor = parseInt(numbers[0], 10);
    var actualMinor = parseInt(numbers[1], 10);
    return actualMajor > major || actualMajor === major && actualMinor >= minor;
  }
});
define('@ember/test-helpers/index', ['exports', '@ember/test-helpers/resolver', '@ember/test-helpers/application', '@ember/test-helpers/setup-context', '@ember/test-helpers/teardown-context', '@ember/test-helpers/setup-rendering-context', '@ember/test-helpers/teardown-rendering-context', '@ember/test-helpers/setup-application-context', '@ember/test-helpers/teardown-application-context', '@ember/test-helpers/settled', '@ember/test-helpers/wait-until', '@ember/test-helpers/validate-error-handler', '@ember/test-helpers/dom/click', '@ember/test-helpers/dom/tap', '@ember/test-helpers/dom/focus', '@ember/test-helpers/dom/blur', '@ember/test-helpers/dom/trigger-event', '@ember/test-helpers/dom/trigger-key-event', '@ember/test-helpers/dom/fill-in', '@ember/test-helpers/dom/wait-for', '@ember/test-helpers/dom/get-root-element', '@ember/test-helpers/dom/find', '@ember/test-helpers/dom/find-all'], function (exports, _resolver, _application, _setupContext, _teardownContext, _setupRenderingContext, _teardownRenderingContext, _setupApplicationContext, _teardownApplicationContext, _settled, _waitUntil, _validateErrorHandler, _click, _tap, _focus, _blur, _triggerEvent, _triggerKeyEvent, _fillIn, _waitFor, _getRootElement, _find, _findAll) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'setResolver', {
    enumerable: true,
    get: function () {
      return _resolver.setResolver;
    }
  });
  Object.defineProperty(exports, 'getResolver', {
    enumerable: true,
    get: function () {
      return _resolver.getResolver;
    }
  });
  Object.defineProperty(exports, 'setApplication', {
    enumerable: true,
    get: function () {
      return _application.setApplication;
    }
  });
  Object.defineProperty(exports, 'setupContext', {
    enumerable: true,
    get: function () {
      return _setupContext.default;
    }
  });
  Object.defineProperty(exports, 'getContext', {
    enumerable: true,
    get: function () {
      return _setupContext.getContext;
    }
  });
  Object.defineProperty(exports, 'setContext', {
    enumerable: true,
    get: function () {
      return _setupContext.setContext;
    }
  });
  Object.defineProperty(exports, 'unsetContext', {
    enumerable: true,
    get: function () {
      return _setupContext.unsetContext;
    }
  });
  Object.defineProperty(exports, 'pauseTest', {
    enumerable: true,
    get: function () {
      return _setupContext.pauseTest;
    }
  });
  Object.defineProperty(exports, 'resumeTest', {
    enumerable: true,
    get: function () {
      return _setupContext.resumeTest;
    }
  });
  Object.defineProperty(exports, 'teardownContext', {
    enumerable: true,
    get: function () {
      return _teardownContext.default;
    }
  });
  Object.defineProperty(exports, 'setupRenderingContext', {
    enumerable: true,
    get: function () {
      return _setupRenderingContext.default;
    }
  });
  Object.defineProperty(exports, 'render', {
    enumerable: true,
    get: function () {
      return _setupRenderingContext.render;
    }
  });
  Object.defineProperty(exports, 'clearRender', {
    enumerable: true,
    get: function () {
      return _setupRenderingContext.clearRender;
    }
  });
  Object.defineProperty(exports, 'teardownRenderingContext', {
    enumerable: true,
    get: function () {
      return _teardownRenderingContext.default;
    }
  });
  Object.defineProperty(exports, 'setupApplicationContext', {
    enumerable: true,
    get: function () {
      return _setupApplicationContext.default;
    }
  });
  Object.defineProperty(exports, 'visit', {
    enumerable: true,
    get: function () {
      return _setupApplicationContext.visit;
    }
  });
  Object.defineProperty(exports, 'currentRouteName', {
    enumerable: true,
    get: function () {
      return _setupApplicationContext.currentRouteName;
    }
  });
  Object.defineProperty(exports, 'currentURL', {
    enumerable: true,
    get: function () {
      return _setupApplicationContext.currentURL;
    }
  });
  Object.defineProperty(exports, 'teardownApplicationContext', {
    enumerable: true,
    get: function () {
      return _teardownApplicationContext.default;
    }
  });
  Object.defineProperty(exports, 'settled', {
    enumerable: true,
    get: function () {
      return _settled.default;
    }
  });
  Object.defineProperty(exports, 'isSettled', {
    enumerable: true,
    get: function () {
      return _settled.isSettled;
    }
  });
  Object.defineProperty(exports, 'getSettledState', {
    enumerable: true,
    get: function () {
      return _settled.getSettledState;
    }
  });
  Object.defineProperty(exports, 'waitUntil', {
    enumerable: true,
    get: function () {
      return _waitUntil.default;
    }
  });
  Object.defineProperty(exports, 'validateErrorHandler', {
    enumerable: true,
    get: function () {
      return _validateErrorHandler.default;
    }
  });
  Object.defineProperty(exports, 'click', {
    enumerable: true,
    get: function () {
      return _click.default;
    }
  });
  Object.defineProperty(exports, 'tap', {
    enumerable: true,
    get: function () {
      return _tap.default;
    }
  });
  Object.defineProperty(exports, 'focus', {
    enumerable: true,
    get: function () {
      return _focus.default;
    }
  });
  Object.defineProperty(exports, 'blur', {
    enumerable: true,
    get: function () {
      return _blur.default;
    }
  });
  Object.defineProperty(exports, 'triggerEvent', {
    enumerable: true,
    get: function () {
      return _triggerEvent.default;
    }
  });
  Object.defineProperty(exports, 'triggerKeyEvent', {
    enumerable: true,
    get: function () {
      return _triggerKeyEvent.default;
    }
  });
  Object.defineProperty(exports, 'fillIn', {
    enumerable: true,
    get: function () {
      return _fillIn.default;
    }
  });
  Object.defineProperty(exports, 'waitFor', {
    enumerable: true,
    get: function () {
      return _waitFor.default;
    }
  });
  Object.defineProperty(exports, 'getRootElement', {
    enumerable: true,
    get: function () {
      return _getRootElement.default;
    }
  });
  Object.defineProperty(exports, 'find', {
    enumerable: true,
    get: function () {
      return _find.default;
    }
  });
  Object.defineProperty(exports, 'findAll', {
    enumerable: true,
    get: function () {
      return _findAll.default;
    }
  });
});
define("@ember/test-helpers/resolver", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.setResolver = setResolver;
  exports.getResolver = getResolver;
  var __resolver__;

  /**
    Stores the provided resolver instance so that tests being ran can resolve
    objects in the same way as a normal application.
  
    Used by `setupContext` and `setupRenderingContext` as a fallback when `setApplication` was _not_ used.
  
    @public
    @param {Ember.Resolver} resolver the resolver to be used for testing
  */
  function setResolver(resolver) {
    __resolver__ = resolver;
  }

  /**
    Retrieve the resolver instance stored by `setResolver`.
  
    @public
    @returns {Ember.Resolver} the previously stored resolver
  */
  function getResolver() {
    return __resolver__;
  }
});
define('@ember/test-helpers/settled', ['exports', '@ember/test-helpers/-utils', '@ember/test-helpers/wait-until'], function (exports, _utils, _waitUntil) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports._teardownAJAXHooks = _teardownAJAXHooks;
  exports._setupAJAXHooks = _setupAJAXHooks;
  exports.getSettledState = getSettledState;
  exports.isSettled = isSettled;
  exports.default = settled;

  var _slicedToArray = function () {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"]) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }
    };
  }();

  // Ember internally tracks AJAX requests in the same way that we do here for
  // legacy style "acceptance" tests using the `ember-testing.js` asset provided
  // by emberjs/ember.js itself. When `@ember/test-helpers`'s `settled` utility
  // is used in a legacy acceptance test context any pending AJAX requests are
  // not properly considered during the `isSettled` check below.
  //
  // This utilizes a local utility method present in Ember since around 2.8.0 to
  // properly consider pending AJAX requests done within legacy acceptance tests.
  var _internalPendingRequests = function () {
    if (Ember.__loader.registry['ember-testing/test/pending_requests']) {
      return Ember.__loader.require('ember-testing/test/pending_requests').pendingRequests;
    }

    return function () {
      return 0;
    };
  }();

  var requests = void 0;

  /**
    @private
    @returns {number} the count of pending requests
  */
  function pendingRequests() {
    var localRequestsPending = requests !== undefined ? requests.length : 0;
    var internalRequestsPending = _internalPendingRequests();

    return localRequestsPending + internalRequestsPending;
  }

  /**
    @private
    @param {Event} event (unused)
    @param {XMLHTTPRequest} xhr the XHR that has initiated a request
  */
  function incrementAjaxPendingRequests(event, xhr) {
    requests.push(xhr);
  }

  /**
    @private
    @param {Event} event (unused)
    @param {XMLHTTPRequest} xhr the XHR that has initiated a request
  */
  function decrementAjaxPendingRequests(event, xhr) {
    // In most Ember versions to date (current version is 2.16) RSVP promises are
    // configured to flush in the actions queue of the Ember run loop, however it
    // is possible that in the future this changes to use "true" micro-task
    // queues.
    //
    // The entire point here, is that _whenever_ promises are resolved will be
    // before the next run of the JS event loop. Then in the next event loop this
    // counter will decrement. In the specific case of AJAX, this means that any
    // promises chained off of `$.ajax` will properly have their `.then` called
    // _before_ this is decremented (and testing continues)
    (0, _utils.nextTick)(function () {
      for (var i = 0; i < requests.length; i++) {
        if (xhr === requests[i]) {
          requests.splice(i, 1);
        }
      }
    }, 0);
  }

  /**
    Clears listeners that were previously setup for `ajaxSend` and `ajaxComplete`.
  
    @private
  */
  function _teardownAJAXHooks() {
    if (!Ember.$) {
      return;
    }

    Ember.$(document).off('ajaxSend', incrementAjaxPendingRequests);
    Ember.$(document).off('ajaxComplete', decrementAjaxPendingRequests);
  }

  /**
    Sets up listeners for `ajaxSend` and `ajaxComplete`.
  
    @private
  */
  function _setupAJAXHooks() {
    requests = [];

    if (!Ember.$) {
      return;
    }

    Ember.$(document).on('ajaxSend', incrementAjaxPendingRequests);
    Ember.$(document).on('ajaxComplete', decrementAjaxPendingRequests);
  }

  var _internalCheckWaiters = void 0;
  if (Ember.__loader.registry['ember-testing/test/waiters']) {
    _internalCheckWaiters = Ember.__loader.require('ember-testing/test/waiters').checkWaiters;
  }

  /**
    @private
    @returns {boolean} true if waiters are still pending
  */
  function checkWaiters() {
    if (_internalCheckWaiters) {
      return _internalCheckWaiters();
    } else if (Ember.Test.waiters) {
      if (Ember.Test.waiters.any(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            context = _ref2[0],
            callback = _ref2[1];

        return !callback.call(context);
      })) {
        return true;
      }
    }

    return false;
  }

  /**
    Check various settledness metrics, and return an object with the following properties:
  
    * `hasRunLoop` - Checks if a run-loop has been started. If it has, this will
      be `true` otherwise it will be `false`.
    * `hasPendingTimers` - Checks if there are scheduled timers in the run-loop.
      These pending timers are primarily registered by `Ember.run.schedule`. If
      there are pending timers, this will be `true`, otherwise `false`.
    * `hasPendingWaiters` - Checks if any registered test waiters are still
      pending (e.g. the waiter returns `true`). If there are pending waiters,
      this will be `true`, otherwise `false`.
    * `hasPendingRequests` - Checks if there are pending AJAX requests (based on
      `ajaxSend` / `ajaxComplete` events triggered by `jQuery.ajax`). If there
      are pending requests, this will be `true`, otherwise `false`.
    * `pendingRequestCount` - The count of pending AJAX requests.
  
    @public
    @returns {Object} object with properties for each of the metrics used to determine settledness
  */
  function getSettledState() {
    var pendingRequestCount = pendingRequests();

    return {
      hasPendingTimers: Boolean(Ember.run.hasScheduledTimers()),
      hasRunLoop: Boolean(Ember.run.currentRunLoop),
      hasPendingWaiters: checkWaiters(),
      hasPendingRequests: pendingRequestCount > 0,
      pendingRequestCount: pendingRequestCount
    };
  }

  /**
    Checks various settledness metrics (via `getSettledState()`) to determine if things are settled or not.
  
    Settled generally means that there are no pending timers, no pending waiters,
    no pending AJAX requests, and no current run loop. However, new settledness
    metrics may be added and used as they become available.
  
    @public
    @returns {boolean} `true` if settled, `false` otherwise
  */
  function isSettled() {
    var _getSettledState = getSettledState(),
        hasPendingTimers = _getSettledState.hasPendingTimers,
        hasRunLoop = _getSettledState.hasRunLoop,
        hasPendingRequests = _getSettledState.hasPendingRequests,
        hasPendingWaiters = _getSettledState.hasPendingWaiters;

    if (hasPendingTimers || hasRunLoop || hasPendingRequests || hasPendingWaiters) {
      return false;
    }

    return true;
  }

  /**
    Returns a promise that resolves when in a settled state (see `isSettled` for
    a definition of "settled state").
  
    @public
    @returns {Promise<void>} resolves when settled
  */
  function settled() {
    return (0, _waitUntil.default)(isSettled, { timeout: Infinity });
  }
});
define('@ember/test-helpers/setup-application-context', ['exports', '@ember/test-helpers/-utils', '@ember/test-helpers/setup-context', '@ember/test-helpers/has-ember-version', '@ember/test-helpers/settled'], function (exports, _utils, _setupContext, _hasEmberVersion, _settled) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.visit = visit;
  exports.currentRouteName = currentRouteName;
  exports.currentURL = currentURL;
  exports.default = setupApplicationContext;


  /**
    Navigate the application to the provided URL.
  
    @public
    @returns {Promise<void>} resolves when settled
  */
  function visit() {
    var _arguments = arguments;

    var context = (0, _setupContext.getContext)();
    var owner = context.owner;


    return (0, _utils.nextTickPromise)().then(function () {
      return owner.visit.apply(owner, _arguments);
    }).then(function () {
      if (EmberENV._APPLICATION_TEMPLATE_WRAPPER !== false) {
        context.element = document.querySelector('#ember-testing > .ember-view');
      } else {
        context.element = document.querySelector('#ember-testing');
      }
    }).then(_settled.default);
  }

  /**
    @public
    @returns {string} the currently active route name
  */
  /* globals EmberENV */
  function currentRouteName() {
    var _getContext = (0, _setupContext.getContext)(),
        owner = _getContext.owner;

    var router = owner.lookup('router:main');
    return Ember.get(router, 'currentRouteName');
  }

  var HAS_CURRENT_URL_ON_ROUTER = (0, _hasEmberVersion.default)(2, 13);

  /**
    @public
    @returns {string} the applications current url
  */
  function currentURL() {
    var _getContext2 = (0, _setupContext.getContext)(),
        owner = _getContext2.owner;

    var router = owner.lookup('router:main');

    if (HAS_CURRENT_URL_ON_ROUTER) {
      return Ember.get(router, 'currentURL');
    } else {
      return Ember.get(router, 'location').getURL();
    }
  }

  /**
    Used by test framework addons to setup the provided context for working with
    an application (e.g. routing).
  
    `setupContext` must have been ran on the provided context prior to calling
    `setupApplicatinContext`.
  
    Sets up the basic framework used by application tests.
  
    @public
    @param {Object} context the context to setup
    @returns {Promise<Object>} resolves with the context that was setup
  */
  function setupApplicationContext() {
    return (0, _utils.nextTickPromise)();
  }
});
define('@ember/test-helpers/setup-context', ['exports', '@ember/test-helpers/build-owner', '@ember/test-helpers/settled', '@ember/test-helpers/global', '@ember/test-helpers/resolver', '@ember/test-helpers/application', '@ember/test-helpers/-utils'], function (exports, _buildOwner, _settled, _global, _resolver, _application, _utils) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CLEANUP = undefined;
  exports.setContext = setContext;
  exports.getContext = getContext;
  exports.unsetContext = unsetContext;
  exports.pauseTest = pauseTest;
  exports.resumeTest = resumeTest;

  exports.default = function (context) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    Ember.testing = true;
    setContext(context);

    var contextGuid = Ember.guidFor(context);
    CLEANUP[contextGuid] = [];

    return (0, _utils.nextTickPromise)().then(function () {
      var application = (0, _application.getApplication)();
      if (application) {
        return application.boot();
      }
    }).then(function () {
      var testElementContainer = document.getElementById('ember-testing-container');
      var fixtureResetValue = testElementContainer.innerHTML;

      // push this into the final cleanup bucket, to be ran _after_ the owner
      // is destroyed and settled (e.g. flushed run loops, etc)
      CLEANUP[contextGuid].push(function () {
        testElementContainer.innerHTML = fixtureResetValue;
      });

      var resolver = options.resolver;

      // This handles precendence, specifying a specific option of
      // resolver always trumps whatever is auto-detected, then we fallback to
      // the suite-wide registrations
      //
      // At some later time this can be extended to support specifying a custom
      // engine or application...

      if (resolver) {
        return (0, _buildOwner.default)(null, resolver);
      }

      return (0, _buildOwner.default)((0, _application.getApplication)(), (0, _resolver.getResolver)());
    }).then(function (owner) {
      context.owner = owner;

      context.set = function (key, value) {
        var ret = Ember.run(function () {
          return Ember.set(context, key, value);
        });

        return ret;
      };

      context.setProperties = function (hash) {
        var ret = Ember.run(function () {
          return Ember.setProperties(context, hash);
        });

        return ret;
      };

      context.get = function (key) {
        return Ember.get(context, key);
      };

      context.getProperties = function () {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return Ember.getProperties(context, args);
      };

      var resume = void 0;
      context.resumeTest = function resumeTest() {
        (true && !(resume) && Ember.assert('Testing has not been paused. There is nothing to resume.', resume));

        resume();
        _global.default.resumeTest = resume = undefined;
      };

      context.pauseTest = function pauseTest() {
        console.info('Testing paused. Use `resumeTest()` to continue.'); // eslint-disable-line no-console

        return new Ember.RSVP.Promise(function (resolve) {
          resume = resolve;
          _global.default.resumeTest = resumeTest;
        }, 'TestAdapter paused promise');
      };

      (0, _settled._setupAJAXHooks)();

      return context;
    });
  };

  var __test_context__ = void 0;

  /**
    Stores the provided context as the "global testing context".
  
    Generally setup automatically by `setupContext`.
  
    @public
    @param {Object} context the context to use
  */
  function setContext(context) {
    __test_context__ = context;
  }

  /**
    Retrive the "global testing context" as stored by `setContext`.
  
    @public
    @returns {Object} the previously stored testing context
  */
  function getContext() {
    return __test_context__;
  }

  /**
    Clear the "global testing context".
  
    Generally invoked from `teardownContext`.
  
    @public
  */
  function unsetContext() {
    __test_context__ = undefined;
  }

  /**
   * Returns a promise to be used to pauses the current test (due to being
   * returned from the test itself).  This is useful for debugging while testing
   * or for test-driving.  It allows you to inspect the state of your application
   * at any point.
   *
   * The test framework wrapper (e.g. `ember-qunit` or `ember-mocha`) should
   * ensure that when `pauseTest()` is used, any framework specific test timeouts
   * are disabled.
   *
   * @public
   * @returns {Promise<void>} resolves _only_ when `resumeTest()` is invoked
   * @example <caption>Usage via ember-qunit</caption>
   *
   * import { setupRenderingTest } from 'ember-qunit';
   * import { render, click, pauseTest } from '@ember/test-helpers';
   *
   *
   * module('awesome-sauce', function(hooks) {
   *   setupRenderingTest(hooks);
   *
   *   test('does something awesome', async function(assert) {
   *     await render(hbs`{{awesome-sauce}}`);
   *
   *     // added here to visualize / interact with the DOM prior
   *     // to the interaction below
   *     await pauseTest();
   *
   *     click('.some-selector');
   *
   *     assert.equal(this.element.textContent, 'this sauce is awesome!');
   *   });
   * });
   */
  function pauseTest() {
    var context = getContext();

    if (!context || typeof context.pauseTest !== 'function') {
      throw new Error('Cannot call `pauseTest` without having first called `setupTest` or `setupRenderingTest`.');
    }

    return context.pauseTest();
  }

  /**
    Resumes a test previously paused by `await pauseTest()`.
  
    @public
  */
  function resumeTest() {
    var context = getContext();

    if (!context || typeof context.resumeTest !== 'function') {
      throw new Error('Cannot call `resumeTest` without having first called `setupTest` or `setupRenderingTest`.');
    }

    context.resumeTest();
  }

  var CLEANUP = exports.CLEANUP = Object.create(null);

  /**
    Used by test framework addons to setup the provided context for testing.
  
    Responsible for:
  
    - sets the "global testing context" to the provided context (`setContext`)
    - create an owner object and set it on the provided context (e.g. `this.owner`)
    - setup `this.set`, `this.setProperties`, `this.get`, and `this.getProperties` to the provided context
    - setting up AJAX listeners
    - setting up `pauseTest` (also available as `this.pauseTest()`) and `resumeTest` helpers
  
    @public
    @param {Object} context the context to setup
    @param {Object} [options] options used to override defaults
    @param {Resolver} [options.resolver] a resolver to use for customizing normal resolution
    @returns {Promise<Object>} resolves with the context that was setup
  */
});
define('@ember/test-helpers/setup-rendering-context', ['exports', '@ember/test-helpers/global', '@ember/test-helpers/setup-context', '@ember/test-helpers/-utils', '@ember/test-helpers/settled', '@ember/test-helpers/dom/get-root-element'], function (exports, _global, _setupContext, _utils, _settled, _getRootElement) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.RENDERING_CLEANUP = undefined;
  exports.render = render;
  exports.clearRender = clearRender;
  exports.default = setupRenderingContext;
  /* globals EmberENV */
  var RENDERING_CLEANUP = exports.RENDERING_CLEANUP = Object.create(null);
  var OUTLET_TEMPLATE = Ember.HTMLBars.template({
    "id": "em3WhaQV",
    "block": "{\"symbols\":[],\"statements\":[[1,[21,\"outlet\"],false]],\"hasEval\":false}",
    "meta": {}
  });
  var EMPTY_TEMPLATE = Ember.HTMLBars.template({
    "id": "xOcW61lH",
    "block": "{\"symbols\":[],\"statements\":[],\"hasEval\":false}",
    "meta": {}
  });

  /**
    @private
    @param {Ember.ApplicationInstance} owner the current owner instance
    @returns {Template} a template representing {{outlet}}
  */
  function lookupOutletTemplate(owner) {
    var OutletTemplate = owner.lookup('template:-outlet');
    if (!OutletTemplate) {
      owner.register('template:-outlet', OUTLET_TEMPLATE);
      OutletTemplate = owner.lookup('template:-outlet');
    }

    return OutletTemplate;
  }

  /**
    @private
    @param {string} [selector] the selector to search for relative to element
    @returns {jQuery} a jQuery object representing the selector (or element itself if no selector)
  */
  function jQuerySelector(selector) {
    var _getContext = (0, _setupContext.getContext)(),
        element = _getContext.element;

    // emulates Ember internal behavor of `this.$` in a component
    // https://github.com/emberjs/ember.js/blob/v2.5.1/packages/ember-views/lib/views/states/has_element.js#L18
    return selector ? _global.default.jQuery(selector, element) : _global.default.jQuery(element);
  }

  var templateId = 0;
  /**
    Renders the provided template and appends it to the DOM.
  
    @public
    @param {CompiledTemplate} template the template to render
    @returns {Promise<void>} resolves when settled
  */
  function render(template) {
    var context = (0, _setupContext.getContext)();

    if (!template) {
      throw new Error('you must pass a template to `render()`');
    }

    return (0, _utils.nextTickPromise)().then(function () {
      var owner = context.owner;


      var toplevelView = owner.lookup('-top-level-view:main');
      var OutletTemplate = lookupOutletTemplate(owner);
      templateId += 1;
      var templateFullName = 'template:-undertest-' + templateId;
      owner.register(templateFullName, template);

      var outletState = {
        render: {
          owner: owner,
          into: undefined,
          outlet: 'main',
          name: 'application',
          controller: undefined,
          ViewClass: undefined,
          template: OutletTemplate
        },

        outlets: {
          main: {
            render: {
              owner: owner,
              into: undefined,
              outlet: 'main',
              name: 'index',
              controller: context,
              ViewClass: undefined,
              template: owner.lookup(templateFullName),
              outlets: {}
            },
            outlets: {}
          }
        }
      };
      toplevelView.setOutletState(outletState);

      // returning settled here because the actual rendering does not happen until
      // the renderer detects it is dirty (which happens on backburner's end
      // hook), see the following implementation details:
      //
      // * [view:outlet](https://github.com/emberjs/ember.js/blob/f94a4b6aef5b41b96ef2e481f35e07608df01440/packages/ember-glimmer/lib/views/outlet.js#L129-L145) manually dirties its own tag upon `setOutletState`
      // * [backburner's custom end hook](https://github.com/emberjs/ember.js/blob/f94a4b6aef5b41b96ef2e481f35e07608df01440/packages/ember-glimmer/lib/renderer.js#L145-L159) detects that the current revision of the root is no longer the latest, and triggers a new rendering transaction
      return (0, _settled.default)();
    });
  }

  /**
    Clears any templates previously rendered. This is commonly used for
    confirming behavior that is triggered by teardown (e.g.
    `willDestroyElement`).
  
    @public
    @returns {Promise<void>} resolves when settled
  */
  function clearRender() {
    var context = (0, _setupContext.getContext)();

    if (!context || typeof context.clearRender !== 'function') {
      throw new Error('Cannot call `clearRender` without having first called `setupRenderingContext`.');
    }

    return render(EMPTY_TEMPLATE);
  }

  /**
    Used by test framework addons to setup the provided context for rendering.
  
    `setupContext` must have been ran on the provided context
    prior to calling `setupRenderingContext`.
  
    Responsible for:
  
    - Setup the basic framework used for rendering by the
      `render` helper.
    - Ensuring the event dispatcher is properly setup.
    - Setting `this.element` to the root element of the testing
      container (things rendered via `render` will go _into_ this
      element).
  
    @public
    @param {Object} context the context to setup for rendering
    @returns {Promise<Object>} resolves with the context that was setup
  */
  function setupRenderingContext(context) {
    var contextGuid = Ember.guidFor(context);
    RENDERING_CLEANUP[contextGuid] = [];

    return (0, _utils.nextTickPromise)().then(function () {
      var owner = context.owner;


      // these methods being placed on the context itself will be deprecated in
      // a future version (no giant rush) to remove some confusion about which
      // is the "right" way to things...
      context.render = render;
      context.clearRender = clearRender;

      if (_global.default.jQuery) {
        context.$ = jQuerySelector;
      }

      // When the host app uses `setApplication` (instead of `setResolver`) the event dispatcher has
      // already been setup via `applicationInstance.boot()` in `./build-owner`. If using
      // `setResolver` (instead of `setApplication`) a "mock owner" is created by extending
      // `Ember._ContainerProxyMixin` and `Ember._RegistryProxyMixin` in this scenario we need to
      // manually start the event dispatcher.
      if (owner._emberTestHelpersMockOwner) {
        var dispatcher = owner.lookup('event_dispatcher:main') || Ember.EventDispatcher.create();
        dispatcher.setup({}, '#ember-testing');
      }

      var OutletView = owner.factoryFor ? owner.factoryFor('view:-outlet') : owner._lookupFactory('view:-outlet');
      var toplevelView = OutletView.create();

      owner.register('-top-level-view:main', {
        create: function create() {
          return toplevelView;
        }
      });

      // initially render a simple empty template
      return render(EMPTY_TEMPLATE).then(function () {
        Ember.run(toplevelView, 'appendTo', (0, _getRootElement.default)());

        return (0, _settled.default)();
      });
    }).then(function () {
      // ensure the element is based on the wrapping toplevel view
      // Ember still wraps the main application template with a
      // normal tagged view
      //
      // In older Ember versions (2.4) the element itself is not stable,
      // and therefore we cannot update the `this.element` until after the
      // rendering is completed
      if (EmberENV._APPLICATION_TEMPLATE_WRAPPER !== false) {
        context.element = (0, _getRootElement.default)().querySelector('.ember-view');
      } else {
        context.element = (0, _getRootElement.default)();
      }

      return context;
    });
  }
});
define('@ember/test-helpers/teardown-application-context', ['exports', '@ember/test-helpers/settled'], function (exports, _settled) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.default = function () {
    return (0, _settled.default)();
  };
});
define('@ember/test-helpers/teardown-context', ['exports', '@ember/test-helpers/settled', '@ember/test-helpers/setup-context', '@ember/test-helpers/-utils'], function (exports, _settled, _setupContext, _utils) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = teardownContext;


  /**
    Used by test framework addons to tear down the provided context after testing is completed.
  
    Responsible for:
  
    - un-setting the "global testing context" (`unsetContext`)
    - destroy the contexts owner object
    - remove AJAX listeners
  
    @public
    @param {Object} context the context to setup
    @returns {Promise<void>} resolves when settled
  */
  function teardownContext(context) {
    return (0, _utils.nextTickPromise)().then(function () {
      var owner = context.owner;


      (0, _settled._teardownAJAXHooks)();

      Ember.run(owner, 'destroy');
      Ember.testing = false;

      (0, _setupContext.unsetContext)();

      return (0, _settled.default)();
    }).finally(function () {
      var contextGuid = Ember.guidFor(context);

      (0, _utils.runDestroyablesFor)(_setupContext.CLEANUP, contextGuid);

      return (0, _settled.default)();
    });
  }
});
define('@ember/test-helpers/teardown-rendering-context', ['exports', '@ember/test-helpers/setup-rendering-context', '@ember/test-helpers/-utils', '@ember/test-helpers/settled'], function (exports, _setupRenderingContext, _utils, _settled) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = teardownRenderingContext;


  /**
    Used by test framework addons to tear down the provided context after testing is completed.
  
    Responsible for:
  
    - resetting the `ember-testing-container` to its original state (the value
      when `setupRenderingContext` was called).
  
    @public
    @param {Object} context the context to setup
    @returns {Promise<void>} resolves when settled
  */
  function teardownRenderingContext(context) {
    return (0, _utils.nextTickPromise)().then(function () {
      var contextGuid = Ember.guidFor(context);

      (0, _utils.runDestroyablesFor)(_setupRenderingContext.RENDERING_CLEANUP, contextGuid);

      return (0, _settled.default)();
    });
  }
});
define('@ember/test-helpers/validate-error-handler', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = validateErrorHandler;

  var VALID = Object.freeze({ isValid: true, message: null });
  var INVALID = Object.freeze({
    isValid: false,
    message: 'error handler should have re-thrown the provided error'
  });

  /**
   * Validate the provided error handler to confirm that it properly re-throws
   * errors when `Ember.testing` is true.
   *
   * This is intended to be used by test framework hosts (or other libraries) to
   * ensure that `Ember.onerror` is properly configured. Without a check like
   * this, `Ember.onerror` could _easily_ swallow all errors and make it _seem_
   * like everything is just fine (and have green tests) when in reality
   * everything is on fire...
   *
   * @public
   * @param {Function} [callback=Ember.onerror] the callback to validate
   * @returns {Object} object with `isValid` and `message`
   *
   * @example <caption>Example implementation for `ember-qunit`</caption>
   *
   * import { validateErrorHandler } from '@ember/test-helpers';
   *
   * test('Ember.onerror is functioning properly', function(assert) {
   *   let result = validateErrorHandler();
   *   assert.ok(result.isValid, result.message);
   * });
   */
  function validateErrorHandler() {
    var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Ember.onerror;

    if (callback === undefined || callback === null) {
      return VALID;
    }

    var error = new Error('Error handler validation error!');

    var originalEmberTesting = Ember.testing;
    Ember.testing = true;
    try {
      callback(error);
    } catch (e) {
      if (e === error) {
        return VALID;
      }
    } finally {
      Ember.testing = originalEmberTesting;
    }

    return INVALID;
  }
});
define('@ember/test-helpers/wait-until', ['exports', '@ember/test-helpers/-utils'], function (exports, _utils) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = waitUntil;


  var TIMEOUTS = [0, 1, 2, 5, 7];
  var MAX_TIMEOUT = 10;

  /**
    Wait for the provided callback to return a truthy value.
  
    This does not leverage `settled()`, and as such can be used to manage async
    while _not_ settled (e.g. "loading" or "pending" states).
  
    @public
    @param {Function} callback the callback to use for testing when waiting should stop
    @param {Object} [options] options used to override defaults
    @param {number} [options.timeout=1000] the maximum amount of time to wait
    @returns {Promise} resolves with the callback value when it returns a truthy value
  */
  function waitUntil(callback) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var timeout = 'timeout' in options ? options.timeout : 1000;

    // creating this error eagerly so it has the proper invocation stack
    var waitUntilTimedOut = new Error('waitUntil timed out');

    return new Ember.RSVP.Promise(function (resolve, reject) {
      var time = 0;

      // eslint-disable-next-line require-jsdoc
      function scheduleCheck(timeoutsIndex) {
        var interval = TIMEOUTS[timeoutsIndex];
        if (interval === undefined) {
          interval = MAX_TIMEOUT;
        }

        (0, _utils.futureTick)(function () {
          time += interval;

          var value = void 0;
          try {
            value = callback();
          } catch (error) {
            reject(error);
          }

          if (value) {
            resolve(value);
          } else if (time < timeout) {
            scheduleCheck(timeoutsIndex + 1);
          } else {
            reject(waitUntilTimedOut);
          }
        }, interval);
      }

      scheduleCheck(0);
    });
  }
});
define('ember-osf-web/tests/acceptance/dashboard-test', ['@ember/test-helpers', 'ember-cli-mirage/test-support/setup-mirage', 'ember-percy', 'ember-power-select/test-support', 'ember-qunit', 'qunit', 'ember-get-config'], function (_testHelpers, _setupMirage, _emberPercy, _testSupport, _emberQunit, _qunit, _emberGetConfig) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    var _config$dashboard = _emberGetConfig.default.dashboard,
        noteworthyNode = _config$dashboard.noteworthyNode,
        popularNode = _config$dashboard.popularNode;

    (0, _qunit.module)('Acceptance | dashboard', function (hooks) {
        (0, _emberQunit.setupApplicationTest)(hooks);
        (0, _setupMirage.default)(hooks);
        (0, _qunit.test)('visiting /dashboard', function () {
            var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                var currentUser, nodes, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, node;

                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                // A fully loaded dashboard should have no major troubles
                                currentUser = server.create('user', 'loggedIn');
                                nodes = server.createList('node', 10, {}, 'withContributors');

                                server.create('node', {
                                    id: noteworthyNode,
                                    linkedNodes: nodes.slice(0, 5),
                                    title: 'NNW'
                                });
                                server.create('node', {
                                    id: popularNode,
                                    linkedNodes: nodes.slice(5, 10),
                                    title: 'Popular'
                                });
                                _iteratorNormalCompletion = true;
                                _didIteratorError = false;
                                _iteratorError = undefined;
                                _context.prev = 7;
                                for (_iterator = nodes.slice(4, 10)[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                    node = _step.value;

                                    server.create('contributor', { node: node, users: currentUser, index: 11 });
                                }
                                _context.next = 15;
                                break;

                            case 11:
                                _context.prev = 11;
                                _context.t0 = _context['catch'](7);
                                _didIteratorError = true;
                                _iteratorError = _context.t0;

                            case 15:
                                _context.prev = 15;
                                _context.prev = 16;

                                if (!_iteratorNormalCompletion && _iterator.return) {
                                    _iterator.return();
                                }

                            case 18:
                                _context.prev = 18;

                                if (!_didIteratorError) {
                                    _context.next = 21;
                                    break;
                                }

                                throw _iteratorError;

                            case 21:
                                return _context.finish(18);

                            case 22:
                                return _context.finish(15);

                            case 23:
                                server.createList('institution', 20);
                                _context.next = 26;
                                return (0, _testHelpers.visit)('/dashboard');

                            case 26:
                                assert.equal((0, _testHelpers.currentURL)(), '/dashboard', 'We stayed on the proper page');
                                assert.dom('nav.navbar').exists();
                                assert.dom('nav.navbar .service-name').hasText('OSF HOME');
                                assert.dom('nav.navbar .secondary-nav-dropdown .nav-profile-name').hasText(currentUser.fullName, 'User\'s name is in navbar');
                                assert.dom('img[alt*="Missing translation"]').doesNotExist();
                                _context.next = 33;
                                return (0, _emberPercy.percySnapshot)(assert);

                            case 33:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, undefined, [[7, 11, 15, 23], [16,, 18, 22]]);
            }));

            return function (_x) {
                return _ref.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('institutions carousel', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
                var institutions;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                server.create('user', 'loggedIn');
                                institutions = server.createList('institution', 20);
                                _context2.next = 4;
                                return (0, _testHelpers.visit)('/dashboard');

                            case 4:
                                assert.dom('img[alt*="Missing translation"]').doesNotExist();
                                assert.dom('[data-test-institution-carousel] img[name*="' + institutions[0].name + '"]').exists();
                                assert.dom('[data-test-institution-carousel-item="1"]').exists();
                                assert.dom('[data-test-institution-carousel-item="6"]').isNotVisible();
                                // Click next to make item six visible
                                _context2.next = 10;
                                return (0, _testHelpers.click)('.carousel-control.right');

                            case 10:
                                assert.dom('[data-test-institution-carousel-item] a[href="/institutions/' + institutions[6].id + '"]').exists('Institutions are linked properly');
                                assert.dom('[data-test-institution-carousel-item="6"]').isVisible();

                            case 12:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, undefined);
            }));

            return function (_x2) {
                return _ref2.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('popular projects and new/noteworthy titles', function () {
            var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
                var nodes, i, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, node, _node$attrs, id, title, description, projectType;

                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                server.create('user', 'loggedIn');
                                nodes = server.createList('node', 10, {}, 'withContributors');

                                server.create('node', {
                                    id: noteworthyNode,
                                    linkedNodes: nodes.slice(0, 5),
                                    title: 'NNW'
                                });
                                server.create('node', {
                                    id: popularNode,
                                    linkedNodes: nodes.slice(5, 10),
                                    title: 'Popular'
                                });
                                _context3.next = 6;
                                return (0, _testHelpers.visit)('/dashboard');

                            case 6:
                                assert.dom('img[alt*="Missing translation"]').doesNotExist();
                                i = 0;
                                _iteratorNormalCompletion2 = true;
                                _didIteratorError2 = false;
                                _iteratorError2 = undefined;
                                _context3.prev = 11;

                                for (_iterator2 = nodes[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                                    node = _step2.value;
                                    _node$attrs = node.attrs, id = _node$attrs.id, title = _node$attrs.title, description = _node$attrs.description;
                                    projectType = 'noteworthy';

                                    if (i > 4) {
                                        projectType = 'popular';
                                    }
                                    i++;
                                    assert.dom('[data-test-' + projectType + '-project="' + id + '"]').exists('The ' + projectType + ' project ' + id + ' exists');
                                    assert.dom('[data-test-' + projectType + '-project="' + id + '"] [data-test-nnwp-project-title]').includesText(title, 'The ' + projectType + ' project ' + id + ' has correct title');
                                    assert.dom('[data-test-' + projectType + '-project="' + id + '"] [data-test-nnwp-project-description]').includesText(description, 'The ' + projectType + ' project ' + id + ' has correct description');
                                }
                                _context3.next = 19;
                                break;

                            case 15:
                                _context3.prev = 15;
                                _context3.t0 = _context3['catch'](11);
                                _didIteratorError2 = true;
                                _iteratorError2 = _context3.t0;

                            case 19:
                                _context3.prev = 19;
                                _context3.prev = 20;

                                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                    _iterator2.return();
                                }

                            case 22:
                                _context3.prev = 22;

                                if (!_didIteratorError2) {
                                    _context3.next = 25;
                                    break;
                                }

                                throw _iteratorError2;

                            case 25:
                                return _context3.finish(22);

                            case 26:
                                return _context3.finish(19);

                            case 27:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, undefined, [[11, 15, 19, 27], [20,, 22, 26]]);
            }));

            return function (_x3) {
                return _ref3.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('user has no projects', function () {
            var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                server.create('user', 'loggedIn');
                                _context4.next = 3;
                                return (0, _testHelpers.visit)('/dashboard');

                            case 3:
                                assert.dom('img[alt*="Missing translation"]').doesNotExist();
                                assert.dom('div[class*="quick-project"]').includesText('You have no projects yet. Create a project with the button on the top right.');

                            case 5:
                            case 'end':
                                return _context4.stop();
                        }
                    }
                }, _callee4, undefined);
            }));

            return function (_x4) {
                return _ref4.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('user has a project', function () {
            var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
                var currentUser, node;
                return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                        switch (_context5.prev = _context5.next) {
                            case 0:
                                currentUser = server.create('user', 'loggedIn');
                                node = server.create('node', {}, 'withContributors');

                                server.create('contributor', { node: node, users: currentUser, index: 11 });
                                _context5.next = 5;
                                return (0, _testHelpers.visit)('/dashboard');

                            case 5:
                                assert.dom('img[alt*="Missing translation"]').doesNotExist();
                                assert.dom('div[class*="quick-project"]').doesNotIncludeText('You have no projects yet. Create a project with the button on the top right.');
                                assert.dom('div[class*="quick-project"]').includesText(node.attrs.title);

                            case 8:
                            case 'end':
                                return _context5.stop();
                        }
                    }
                }, _callee5, undefined);
            }));

            return function (_x5) {
                return _ref5.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('user has many projects', function () {
            var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
                var currentUser, nodes, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, node, projects;

                return regeneratorRuntime.wrap(function _callee6$(_context6) {
                    while (1) {
                        switch (_context6.prev = _context6.next) {
                            case 0:
                                currentUser = server.create('user', 'loggedIn');
                                nodes = server.createList('node', 30, {}, 'withContributors');

                                server.create('node', {
                                    id: noteworthyNode,
                                    linkedNodes: nodes.slice(0, 5),
                                    title: 'NNW'
                                });
                                server.create('node', {
                                    id: popularNode,
                                    linkedNodes: nodes.slice(5, 10),
                                    title: 'Popular'
                                });
                                _iteratorNormalCompletion3 = true;
                                _didIteratorError3 = false;
                                _iteratorError3 = undefined;
                                _context6.prev = 7;
                                for (_iterator3 = nodes[Symbol.iterator](); !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                                    node = _step3.value;

                                    server.create('contributor', { node: node, users: currentUser, index: 11 });
                                }
                                _context6.next = 15;
                                break;

                            case 11:
                                _context6.prev = 11;
                                _context6.t0 = _context6['catch'](7);
                                _didIteratorError3 = true;
                                _iteratorError3 = _context6.t0;

                            case 15:
                                _context6.prev = 15;
                                _context6.prev = 16;

                                if (!_iteratorNormalCompletion3 && _iterator3.return) {
                                    _iterator3.return();
                                }

                            case 18:
                                _context6.prev = 18;

                                if (!_didIteratorError3) {
                                    _context6.next = 21;
                                    break;
                                }

                                throw _iteratorError3;

                            case 21:
                                return _context6.finish(18);

                            case 22:
                                return _context6.finish(15);

                            case 23:
                                assert.ok(this.element === undefined, 'Should not have element before visit');
                                _context6.next = 26;
                                return (0, _testHelpers.visit)('/dashboard');

                            case 26:
                                assert.ok(this.element !== undefined, 'Should have element after visit');
                                assert.dom('img[alt*="Missing translation"]').doesNotExist();
                                assert.dom('[data-test-load-more]').exists('The control to load more projects exists');
                                projects = this.element.querySelectorAll('div[class*="DashboardItem"] div[class="row"]');

                                assert.equal(projects.length, 10, 'Only the first page of projects loaded');
                                _context6.next = 33;
                                return (0, _testHelpers.click)('[data-test-load-more]');

                            case 33:
                                projects = this.element.querySelectorAll('div[class*="DashboardItem"] div[class="row"]');
                                assert.equal(projects.length, 20, 'Only the first two pages of projects are loaded after clicking `more` once');
                                assert.dom('[data-test-load-more]').exists('The control to load more projects still exists');
                                _context6.next = 38;
                                return (0, _testHelpers.click)('[data-test-load-more]');

                            case 38:
                                projects = this.element.querySelectorAll('div[class*="DashboardItem"] div[class="row"]');
                                assert.equal(projects.length, 30, 'All 30 projects are loaded after clicking `more` twice');
                                assert.dom('[data-test-load-more]').doesNotExist('The control to load more projects is gone after all projects are loaded');

                            case 41:
                            case 'end':
                                return _context6.stop();
                        }
                    }
                }, _callee6, this, [[7, 11, 15, 23], [16,, 18, 22]]);
            }));

            return function (_x6) {
                return _ref6.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('sorting projects', function () {
            var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
                var currentUser, nodeOne, nodeTwo, nodeThree, projectTitles;
                return regeneratorRuntime.wrap(function _callee7$(_context7) {
                    while (1) {
                        switch (_context7.prev = _context7.next) {
                            case 0:
                                currentUser = server.create('user', 'loggedIn');
                                nodeOne = server.create('node', { title: 'z', lastLogged: '2017-10-19T12:05:10.571Z', dateModified: '2017-10-19T12:05:10.571Z' });
                                nodeTwo = server.create('node', { title: 'az', lastLogged: '2017-10-17T12:05:10.571Z', dateModified: '2017-10-17T12:05:10.571Z' });
                                nodeThree = server.create('node', { title: 'a', lastLogged: '2017-10-18T12:05:10.571Z', dateModified: '2017-10-18T12:05:10.571Z' });

                                server.create('contributor', { node: nodeOne, users: currentUser, index: 0, permission: 'admin', bibliographic: true });
                                server.create('contributor', { node: nodeTwo, users: currentUser, index: 0, permission: 'admin', bibliographic: true });
                                server.create('contributor', { node: nodeThree, users: currentUser, index: 0, permission: 'admin', bibliographic: true });
                                _context7.next = 9;
                                return (0, _testHelpers.visit)('/dashboard');

                            case 9:
                                assert.dom('img[alt*="Missing translation"]').doesNotExist();
                                // Default sort
                                projectTitles = this.element.querySelectorAll('[data-test-dashboard-item-title]');

                                assert.equal(projectTitles.length, 3, 'Proper number of items are in list in default sort');
                                assert.dom(projectTitles[0]).hasText('z', 'Default sort item 0 is in proper position');
                                assert.dom(projectTitles[1]).hasText('a', 'Default sort item 1 is in proper position');
                                assert.dom(projectTitles[2]).hasText('az', 'Default sort item 2 is in proper position');
                                // Sort date ascending
                                _context7.next = 17;
                                return (0, _testHelpers.click)('#last_loggedAscendingSort');

                            case 17:
                                projectTitles = this.element.querySelectorAll('[data-test-dashboard-item-title]');
                                assert.equal(projectTitles.length, 3, 'Proper number of items are in list in date asc sort');
                                assert.dom(projectTitles[0]).hasText('az', 'Date asc sort item 0 is in proper position');
                                assert.dom(projectTitles[1]).hasText('a', 'Date asc sort item 1 is in proper position');
                                assert.dom(projectTitles[2]).hasText('z', 'Date asc sort item 2 is in proper position');
                                // Sort date descending (should be same as default)
                                _context7.next = 24;
                                return (0, _testHelpers.click)('#last_loggedDescendingSort');

                            case 24:
                                projectTitles = this.element.querySelectorAll('[data-test-dashboard-item-title]');
                                assert.equal(projectTitles.length, 3, 'Proper number of items are in list in date desc sort');
                                assert.dom(projectTitles[0]).hasText('z', 'Date desc sort item 0 is in proper position');
                                assert.dom(projectTitles[1]).hasText('a', 'Date desc sort item 1 is in proper position');
                                assert.dom(projectTitles[2]).hasText('az', 'Date desc sort item 2 is in proper position');
                                // Sort title ascending
                                _context7.next = 31;
                                return (0, _testHelpers.click)('#titleAscendingSort');

                            case 31:
                                projectTitles = this.element.querySelectorAll('[data-test-dashboard-item-title]');
                                assert.equal(projectTitles.length, 3, 'Proper number of items are in list in title asc sort');
                                assert.dom(projectTitles[0]).hasText('a', 'Title asc sort item 0 is in proper position');
                                assert.dom(projectTitles[1]).hasText('az', 'Title asc sort item 1 is in proper position');
                                assert.dom(projectTitles[2]).hasText('z', 'Title asc sort item 2 is in proper position');
                                // Sort title descending
                                _context7.next = 38;
                                return (0, _testHelpers.click)('#titleDescendingSort');

                            case 38:
                                projectTitles = this.element.querySelectorAll('[data-test-dashboard-item-title]');
                                assert.equal(projectTitles.length, 3, 'Proper number of items are in list in title desc sort');
                                assert.dom(projectTitles[0]).hasText('z', 'Title desc sort item 0 is in proper position');
                                assert.dom(projectTitles[1]).hasText('az', 'Title desc sort item 1 is in proper position');
                                assert.dom(projectTitles[2]).hasText('a', 'Title desc sort item 2 is in proper position');

                            case 43:
                            case 'end':
                                return _context7.stop();
                        }
                    }
                }, _callee7, this);
            }));

            return function (_x7) {
                return _ref7.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('filtering projects', function () {
            var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
                var currentUser, nodeOne, nodeTwo, nodeThree, projectTitles;
                return regeneratorRuntime.wrap(function _callee8$(_context8) {
                    while (1) {
                        switch (_context8.prev = _context8.next) {
                            case 0:
                                currentUser = server.create('user', 'loggedIn');
                                nodeOne = server.create('node', { title: 'z', lastLogged: '2017-10-19T12:05:10.571Z', dateModified: '2017-10-19T12:05:10.571Z' });
                                nodeTwo = server.create('node', { title: 'az', lastLogged: '2017-10-17T12:05:10.571Z', dateModified: '2017-10-17T12:05:10.571Z' });
                                nodeThree = server.create('node', { title: 'a', lastLogged: '2017-10-18T12:05:10.571Z', dateModified: '2017-10-18T12:05:10.571Z' });

                                server.create('contributor', { node: nodeOne, users: currentUser, index: 0, permission: 'admin', bibliographic: true });
                                server.create('contributor', { node: nodeTwo, users: currentUser, index: 0, permission: 'admin', bibliographic: true });
                                server.create('contributor', { node: nodeThree, users: currentUser, index: 0, permission: 'admin', bibliographic: true });
                                _context8.next = 9;
                                return (0, _testHelpers.visit)('/dashboard');

                            case 9:
                                assert.dom('img[alt*="Missing translation"]').doesNotExist();
                                // No filtering
                                projectTitles = this.element.querySelectorAll('[data-test-dashboard-item-title]');

                                assert.equal(projectTitles.length, 3, 'Not filtering has correct number of projects');
                                assert.dom(projectTitles[0]).hasText('z', 'Not filtering item 0 is correct');
                                assert.dom(projectTitles[1]).hasText('a', 'Not filtering item 1 is correct');
                                assert.dom(projectTitles[2]).hasText('az', 'Not filtering item 2 is correct');
                                _context8.next = 17;
                                return (0, _testHelpers.fillIn)('[data-test-quick-search-input]', 'z');

                            case 17:
                                projectTitles = this.element.querySelectorAll('[data-test-dashboard-item-title]');
                                assert.equal(projectTitles.length, 2, 'One character filtering has correct number of projects');
                                assert.dom(projectTitles[0]).hasText('z', 'One character filtering item 0 is correct');
                                assert.dom(projectTitles[1]).hasText('az', 'One character filtering item 1 is correct');
                                _context8.next = 23;
                                return (0, _testHelpers.fillIn)('[data-test-quick-search-input]', 'az');

                            case 23:
                                projectTitles = this.element.querySelectorAll('[data-test-dashboard-item-title]');
                                assert.equal(projectTitles.length, 1, 'Two character filtering has correct number of projects');
                                assert.dom(projectTitles[0]).hasText('az', 'Two character filtering item is correct');

                            case 26:
                            case 'end':
                                return _context8.stop();
                        }
                    }
                }, _callee8, this);
            }));

            return function (_x8) {
                return _ref8.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('create project modal creates project - basic', function () {
            var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
                var title, newNode;
                return regeneratorRuntime.wrap(function _callee9$(_context9) {
                    while (1) {
                        switch (_context9.prev = _context9.next) {
                            case 0:
                                server.loadFixtures('regions');
                                server.create('user', 'loggedIn');
                                title = 'Giraffical Interchange Format';
                                _context9.next = 5;
                                return (0, _testHelpers.visit)('/dashboard');

                            case 5:
                                assert.dom('div[class*="quick-project"]').includesText('You have no projects yet. Create a project with the button on the top right.');
                                assert.dom('div[class*="quick-project"]').doesNotIncludeText(title);
                                _context9.next = 9;
                                return (0, _testHelpers.click)('[data-test-create-project-modal-button]');

                            case 9:
                                assert.dom('img[alt*="Missing translation"]').doesNotExist();
                                assert.dom('[data-test-create-project-header]').includesText('Create new project');
                                _context9.next = 13;
                                return (0, _testHelpers.fillIn)('[data-test-new-project-title]', title);

                            case 13:
                                _context9.next = 15;
                                return (0, _testHelpers.click)('[data-test-create-project-submit]');

                            case 15:
                                _context9.next = 17;
                                return (0, _testHelpers.click)('[data-test-stay-here]');

                            case 17:
                                assert.dom('div[class*="quick-project"]').doesNotIncludeText('You have no projects yet. Create a project with the button on the top right.');
                                assert.dom('div[class*="quick-project"]').includesText(title);
                                newNode = server.schema.nodes.findBy({ title: title });

                                assert.equal(newNode.attrs.regionId, 'us');

                            case 21:
                            case 'end':
                                return _context9.stop();
                        }
                    }
                }, _callee9, undefined);
            }));

            return function (_x9) {
                return _ref9.apply(this, arguments);
            };
        }());
        // TODO: When we have fake institutions connected to users, add tests for selecting and deselecting institutions
        // in the create project modal.
        (0, _qunit.test)('create project modal cancel does not create project', function () {
            var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
                var title;
                return regeneratorRuntime.wrap(function _callee10$(_context10) {
                    while (1) {
                        switch (_context10.prev = _context10.next) {
                            case 0:
                                server.loadFixtures('regions');
                                server.create('user', 'loggedIn');
                                title = 'Giraffical Interchange Format';
                                _context10.next = 5;
                                return (0, _testHelpers.visit)('/dashboard');

                            case 5:
                                assert.dom('div[class*="quick-project"]').includesText('You have no projects yet. Create a project with the button on the top right.');
                                _context10.next = 8;
                                return (0, _testHelpers.click)('[data-test-create-project-modal-button]');

                            case 8:
                                _context10.next = 10;
                                return (0, _testHelpers.fillIn)('[data-test-new-project-title]', title);

                            case 10:
                                _context10.next = 12;
                                return (0, _testHelpers.click)('[data-test-create-project-cancel]');

                            case 12:
                                assert.dom('[data-test-create-project-header]').doesNotExist();
                                assert.dom('[data-test-stay-here]').doesNotExist();
                                assert.dom('div[class*="quick-project"]').includesText('You have no projects yet. Create a project with the button on the top right.');

                            case 15:
                            case 'end':
                                return _context10.stop();
                        }
                    }
                }, _callee10, undefined);
            }));

            return function (_x10) {
                return _ref10.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('create project modal close does not create project', function () {
            var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
                var title;
                return regeneratorRuntime.wrap(function _callee11$(_context11) {
                    while (1) {
                        switch (_context11.prev = _context11.next) {
                            case 0:
                                server.loadFixtures('regions');
                                server.create('user', 'loggedIn');
                                title = 'Giraffical Interchange Format';
                                _context11.next = 5;
                                return (0, _testHelpers.visit)('/dashboard');

                            case 5:
                                assert.dom('div[class*="quick-project"]').includesText('You have no projects yet. Create a project with the button on the top right.');
                                _context11.next = 8;
                                return (0, _testHelpers.click)('[data-test-create-project-modal-button]');

                            case 8:
                                _context11.next = 10;
                                return (0, _testHelpers.fillIn)('[data-test-new-project-title]', title);

                            case 10:
                                _context11.next = 12;
                                return (0, _testHelpers.click)('button[class*="close"]');

                            case 12:
                                assert.dom('[data-test-create-project-header]').doesNotExist();
                                assert.dom('[data-test-stay-here]').doesNotExist();
                                assert.dom('div[class*="quick-project"]').includesText('You have no projects yet. Create a project with the button on the top right.');

                            case 15:
                            case 'end':
                                return _context11.stop();
                        }
                    }
                }, _callee11, undefined);
            }));

            return function (_x11) {
                return _ref11.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('create project modal more toggle', function () {
            var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {
                var currentUser, title, description, location, templatedFrom, nodeOne, nodeTwo, nodeThree, newNode;
                return regeneratorRuntime.wrap(function _callee12$(_context12) {
                    while (1) {
                        switch (_context12.prev = _context12.next) {
                            case 0:
                                currentUser = server.create('user', 'loggedIn');
                                title = 'Giraffical Interchange Format';
                                description = 'GIF';
                                location = 'Germany - Frankfurt';
                                templatedFrom = 'az';
                                nodeOne = server.create('node', { title: 'z', lastLogged: '2017-10-19T12:05:10.571Z', dateModified: '2017-10-19T12:05:10.571Z' });
                                nodeTwo = server.create('node', { title: templatedFrom, lastLogged: '2017-10-17T12:05:10.571Z', dateModified: '2017-10-17T12:05:10.571Z' });
                                nodeThree = server.create('node', { title: 'a', lastLogged: '2017-10-18T12:05:10.571Z', dateModified: '2017-10-18T12:05:10.571Z' });

                                server.create('contributor', { node: nodeOne, users: currentUser, index: 0, permission: 'admin', bibliographic: true });
                                server.create('contributor', { node: nodeTwo, users: currentUser, index: 0, permission: 'admin', bibliographic: true });
                                server.create('contributor', { node: nodeThree, users: currentUser, index: 0, permission: 'admin', bibliographic: true });
                                server.loadFixtures('regions');
                                _context12.next = 14;
                                return (0, _testHelpers.visit)('/dashboard');

                            case 14:
                                assert.dom('img[alt*="Missing translation"]').doesNotExist();
                                assert.dom('div[class*="quick-project"]').doesNotIncludeText(title);
                                _context12.next = 18;
                                return (0, _testHelpers.click)('[data-test-create-project-modal-button]');

                            case 18:
                                assert.dom('img[alt*="Missing translation"]').doesNotExist();
                                assert.dom('[data-test-create-project-header]').includesText('Create new project');
                                this.element.querySelector('[data-test-select-storage-location]');
                                assert.dom('[data-test-select-storage-location]').exists();
                                assert.dom('[data-test-select-storage-location] span[class~="ember-power-select-selected-item"]').hasText('United States');
                                _context12.next = 25;
                                return (0, _testHelpers.fillIn)('[data-test-new-project-title]', title);

                            case 25:
                                _context12.next = 27;
                                return (0, _testHelpers.click)('[data-test-select-storage-location] div[class~="ember-power-select-trigger"]');

                            case 27:
                                _context12.next = 29;
                                return (0, _testSupport.selectChoose)('[data-test-select-storage-location]', location);

                            case 29:
                                assert.dom('[data-test-select-storage-location] span[class~="ember-power-select-selected-item"]').hasText(location);
                                assert.dom('[data-test-project-description-input]').doesNotExist();
                                assert.dom('[data-test-select-template]').doesNotExist();
                                _context12.next = 34;
                                return (0, _testHelpers.click)('[data-test-more-toggle]');

                            case 34:
                                assert.dom('[data-test-project-description-input]').exists();
                                assert.dom('[data-test-select-template]').exists();
                                _context12.next = 38;
                                return (0, _testHelpers.fillIn)('[data-test-project-description-input]', description);

                            case 38:
                                _context12.next = 40;
                                return (0, _testHelpers.click)('[data-test-select-template] div[class~="ember-power-select-trigger"]');

                            case 40:
                                _context12.next = 42;
                                return (0, _testSupport.selectSearch)('[data-test-select-template]', templatedFrom);

                            case 42:
                                _context12.next = 44;
                                return (0, _testSupport.selectChoose)('[data-test-select-template]', templatedFrom);

                            case 44:
                                assert.dom('[data-test-select-template] span[class~="ember-power-select-selected-item"]').hasText(templatedFrom);
                                _context12.next = 47;
                                return (0, _testHelpers.click)('[data-test-create-project-submit]');

                            case 47:
                                _context12.next = 49;
                                return (0, _testHelpers.click)('[data-test-stay-here]');

                            case 49:
                                newNode = server.schema.nodes.findBy({ title: title });

                                assert.equal(newNode.attrs.description, description);
                                assert.equal(newNode.attrs.regionId, 'de-1');
                                assert.equal(newNode.attrs.templateFrom, nodeTwo.id);
                                assert.equal(newNode.attrs.public, false, 'Projects created from the dashboard should not be public.');

                            case 54:
                            case 'end':
                                return _context12.stop();
                        }
                    }
                }, _callee12, this);
            }));

            return function (_x12) {
                return _ref12.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/acceptance/guid-node/registrations-test', ['@ember/test-helpers', 'ember-cli-mirage/test-support/setup-mirage', 'ember-qunit', 'qunit', 'ember-osf-web/mirage/helpers', 'ember-osf-web/tests/helpers', 'ember-osf-web/models/osf-model'], function (_testHelpers, _setupMirage, _emberQunit, _qunit, _helpers, _helpers2, _osfModel) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Acceptance | guid-node/registrations', function (hooks) {
        (0, _emberQunit.setupApplicationTest)(hooks);
        (0, _setupMirage.default)(hooks);
        (0, _qunit.test)('logged out, no registrations', function () {
            var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                var node, url;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                server.create('root', { currentUser: null });
                                node = server.create('node', { id: 'decaf', currentUserPermissions: [] });
                                url = '/' + node.id + '/registrations';
                                _context.next = 5;
                                return (0, _helpers2.visit)(url);

                            case 5:
                                assert.equal((0, _helpers2.currentURL)(), url, 'We are on ' + url);
                                assert.equal((0, _testHelpers.currentRouteName)(), 'guid-node.registrations', 'We are at guid-node.registrations');
                                assert.dom('[data-test-new-registration-button]').doesNotExist();
                                assert.dom('[data-test-registrations-pane]').includesText('There have been no completed registrations of this project.');

                            case 9:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, undefined);
            }));

            return function (_x) {
                return _ref.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('logged out, 1 registration', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
                var node, title, registration, contributorUser, url;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                server.create('root', { currentUser: null });
                                node = server.create('node', { id: 'decaf' });
                                title = 'Test Title';
                                registration = server.create('registration', { title: title, registeredFrom: node });
                                contributorUser = server.create('user');

                                server.create('contributor', { node: registration, users: contributorUser });
                                url = '/' + node.id + '/registrations';
                                _context2.next = 9;
                                return (0, _helpers2.visit)(url);

                            case 9:
                                assert.equal((0, _helpers2.currentURL)(), url, 'We are on ' + url);
                                assert.dom('[data-test-new-registration-button]').doesNotExist();
                                assert.dom('[data-test-node-card]').exists({ count: 1 });
                                assert.dom('[data-test-node-card-heading]').includesText(title);

                            case 13:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, undefined);
            }));

            return function (_x2) {
                return _ref2.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('logged in admin, no registrations', function () {
            var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
                var contributorUser, node, url;
                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                contributorUser = server.create('user');

                                server.create('root', { currentUser: contributorUser });
                                node = server.create('node', { id: 'decaf', currentUserPermissions: [_osfModel.Permission.Admin] });
                                url = '/' + node.id + '/registrations';
                                _context3.next = 6;
                                return (0, _helpers2.visit)(url);

                            case 6:
                                assert.equal((0, _helpers2.currentURL)(), url, 'We are on ' + url);
                                assert.dom('[data-test-new-registration-button]').exists({ count: 1 });
                                assert.dom('[data-test-registrations-pane]').includesText('There have been no completed registrations of this project.');
                                assert.dom('[data-test-new-registration-button]').exists();
                                _context3.next = 12;
                                return (0, _testHelpers.click)('[data-test-registrations-container] a[href="#drafts"]');

                            case 12:
                                assert.dom('[data-test-registrations-pane]').isNotVisible();
                                assert.dom('[data-test-draft-registrations-pane]').isVisible();
                                assert.dom('[data-test-draft-registrations-pane]').includesText('There are no draft registrations of this project.');

                            case 15:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, undefined);
            }));

            return function (_x3) {
                return _ref3.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('logged in admin, 1 registration', function () {
            var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
                var contributorUser, node, registrationSchemaName, registrationSchema, registrationTitle, registeredMeta, url;
                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                contributorUser = server.create('user');

                                server.create('root', { currentUser: contributorUser });
                                node = server.create('node', {
                                    id: 'decaf',
                                    title: 'Test Title',
                                    currentUserPermissions: [_osfModel.Permission.Admin]
                                });

                                server.create('contributor', { node: node, users: contributorUser });
                                server.loadFixtures('registration-schemas');
                                registrationSchemaName = 'Prereg Challenge';
                                registrationSchema = server.schema.registrationSchemas.all().models.filter(function (schema) {
                                    return schema.name === registrationSchemaName;
                                })[0];
                                registrationTitle = 'Registration Title';
                                registeredMeta = {
                                    q1: { comments: [], value: registrationTitle, extra: [] }
                                };
                                // @ts-ignore until we kill async relationships

                                (0, _helpers.registerNode)(server, node, { registrationSchema: registrationSchema, registeredMeta: registeredMeta });
                                url = '/' + node.id + '/registrations';
                                _context4.next = 13;
                                return (0, _helpers2.visit)(url);

                            case 13:
                                assert.equal((0, _helpers2.currentURL)(), url, 'We are on ' + url);
                                assert.dom('[data-test-new-registration-button]').exists({ count: 1 });
                                assert.dom('[data-test-node-card]').exists({ count: 1 });
                                assert.dom('[data-test-node-card-heading]').includesText(node.title);
                                assert.dom('[data-test-node-card-body]').includesText(registrationSchemaName);
                                assert.dom('[data-test-node-card-body]').includesText(registrationTitle);
                                _context4.next = 21;
                                return (0, _testHelpers.click)('[data-test-registrations-container] a[href="#drafts"]');

                            case 21:
                                assert.dom('[data-test-registrations-pane]').isNotVisible();
                                assert.dom('[data-test-draft-registrations-pane]').isVisible();
                                assert.dom('[data-test-draft-registrations-pane]').includesText('There are no draft registrations of this project.');

                            case 24:
                            case 'end':
                                return _context4.stop();
                        }
                    }
                }, _callee4, undefined);
            }));

            return function (_x4) {
                return _ref4.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('logged in admin, 12 registrations', function () {
            var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
                var contributorUser, node, registrationSchema, url;
                return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                        switch (_context5.prev = _context5.next) {
                            case 0:
                                contributorUser = server.create('user');

                                server.create('root', { currentUser: contributorUser });
                                node = server.create('node', {
                                    id: 'decaf',
                                    title: 'Test Title',
                                    currentUserPermissions: [_osfModel.Permission.Admin]
                                });

                                server.create('contributor', { node: node, users: contributorUser });
                                server.loadFixtures('registration-schemas');
                                registrationSchema = server.schema.registrationSchemas.all().models[0];
                                // @ts-ignore until we kill async relationships

                                (0, _helpers.registerNodeMultiple)(server, node, 12, { registrationSchema: registrationSchema });
                                url = '/' + node.id + '/registrations';
                                _context5.next = 10;
                                return (0, _helpers2.visit)(url);

                            case 10:
                                assert.equal((0, _helpers2.currentURL)(), url, 'We are on ' + url);
                                assert.dom('[data-test-new-registration-button]').exists({ count: 1 });
                                assert.dom('[data-test-node-card]').exists({ count: 10 });
                                assert.dom('[data-test-node-card]').includesText(node.title);
                                _context5.next = 16;
                                return (0, _testHelpers.click)('[data-test-next-page-button]');

                            case 16:
                                assert.dom('[data-test-node-card]').exists({ count: 2 });
                                assert.dom('[data-test-node-card]').includesText(node.title);
                                _context5.next = 20;
                                return (0, _testHelpers.click)('[data-test-registrations-container] a[href="#drafts"]');

                            case 20:
                                assert.dom('[data-test-registrations-pane]').isNotVisible();
                                assert.dom('[data-test-draft-registrations-pane]').isVisible();
                                assert.dom('[data-test-draft-registrations-pane]').includesText('There are no draft registrations of this project.');

                            case 23:
                            case 'end':
                                return _context5.stop();
                        }
                    }
                }, _callee5, undefined);
            }));

            return function (_x5) {
                return _ref5.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('logged in admin, 1 draft registration', function () {
            var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
                var initiator, node, registrationSchema, registrationMetadata, url, progressBarElement;
                return regeneratorRuntime.wrap(function _callee6$(_context6) {
                    while (1) {
                        switch (_context6.prev = _context6.next) {
                            case 0:
                                initiator = server.create('user');

                                server.create('root', { currentUser: initiator });
                                node = server.create('node', {
                                    id: 'decaf',
                                    currentUserPermissions: [_osfModel.Permission.Admin]
                                });

                                server.loadFixtures('registration-schemas');
                                registrationSchema = server.schema.registrationSchemas.all().models.filter(function (schema) {
                                    return schema.name === 'Prereg Challenge';
                                })[0];
                                registrationMetadata = {
                                    q1: { comments: [], value: 'Registration Title', extra: [] }
                                };
                                // @ts-ignore until we kill async relationships

                                (0, _helpers.draftRegisterNode)(server, node, { initiator: initiator, registrationSchema: registrationSchema, registrationMetadata: registrationMetadata });
                                url = '/' + node.id + '/registrations';
                                _context6.next = 10;
                                return (0, _helpers2.visit)(url);

                            case 10:
                                assert.equal((0, _helpers2.currentURL)(), url, 'We are on ' + url);
                                assert.dom('[data-test-new-registration-button]').exists({ count: 1 });
                                _context6.next = 14;
                                return (0, _testHelpers.click)('[data-test-registrations-container] a[href="#drafts"]');

                            case 14:
                                assert.dom('[data-test-draft-registrations-pane]').isVisible();
                                assert.dom('[data-test-draft-registrations-pane]').doesNotIncludeText('There are no draft registrations of this project.');
                                assert.dom('[data-test-draft-registration-card]').exists({ count: 1 });
                                assert.dom('[data-test-draft-registration-card-title]').includesText('Prereg Challenge');
                                assert.dom('[data-test-draft-registration-card-progress-bar]').exists({ count: 1 });
                                progressBarElement = document.querySelector('[data-test-draft-registration-card-progress-bar] .progress-bar');

                                assert.ok(parseFloat(progressBarElement.style.width ? progressBarElement.style.width : '') > 0, 'Progress bar shows progress');

                            case 21:
                            case 'end':
                                return _context6.stop();
                        }
                    }
                }, _callee6, undefined);
            }));

            return function (_x6) {
                return _ref6.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('logged in admin, 12 draft registrations', function () {
            var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
                var initiator, node, url;
                return regeneratorRuntime.wrap(function _callee7$(_context7) {
                    while (1) {
                        switch (_context7.prev = _context7.next) {
                            case 0:
                                initiator = server.create('user');

                                server.create('root', { currentUser: initiator });
                                node = server.create('node', {
                                    id: 'decaf',
                                    currentUserPermissions: [_osfModel.Permission.Admin]
                                });

                                server.loadFixtures('registration-schemas');
                                // @ts-ignore until we kill async relationships
                                (0, _helpers.draftRegisterNodeMultiple)(server, node, 12, { initiator: initiator });
                                url = '/' + node.id + '/registrations';
                                _context7.next = 8;
                                return (0, _helpers2.visit)(url);

                            case 8:
                                assert.equal((0, _helpers2.currentURL)(), url, 'We are on ' + url);
                                assert.dom('[data-test-new-registration-button]').exists({ count: 1 });
                                _context7.next = 12;
                                return (0, _testHelpers.click)('[data-test-registrations-container] a[href="#drafts"]');

                            case 12:
                                assert.dom('[data-test-draft-registrations-pane]').isVisible();
                                assert.dom('[data-test-draft-registrations-pane]').doesNotIncludeText('There are no draft registrations of this project.');
                                assert.dom('[data-test-draft-registration-card]').exists({ count: 10 });
                                _context7.next = 17;
                                return (0, _testHelpers.click)('[data-test-next-page-button]');

                            case 17:
                                assert.dom('[data-test-draft-registration-card]').exists({ count: 2 });

                            case 18:
                            case 'end':
                                return _context7.stop();
                        }
                    }
                }, _callee7, undefined);
            }));

            return function (_x7) {
                return _ref7.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('logged in admin, new registration', function () {
            var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
                var contributorUser, node, url;
                return regeneratorRuntime.wrap(function _callee8$(_context8) {
                    while (1) {
                        switch (_context8.prev = _context8.next) {
                            case 0:
                                contributorUser = server.create('user');

                                server.create('root', { currentUser: contributorUser });
                                node = server.create('node', { id: 'decaf', currentUserPermissions: [_osfModel.Permission.Admin] });

                                server.loadFixtures('registration-schemas');
                                url = '/' + node.id + '/registrations';
                                _context8.next = 7;
                                return (0, _helpers2.visit)(url);

                            case 7:
                                assert.equal((0, _helpers2.currentURL)(), url, 'We are on ' + url);
                                _context8.next = 10;
                                return (0, _testHelpers.click)('[data-test-new-registration-button]');

                            case 10:
                                assert.dom('[data-test-new-registration-modal-body]').isVisible();
                                assert.dom('[data-test-new-registration-modal-header]').includesText('Register');
                                assert.dom('[data-test-new-registration-modal-body]').includesText('Continue your registration by selecting a registration form:');
                                server.schema.registrationSchemas.all().models.forEach(function (schema) {
                                    return assert.dom('[data-test-new-registration-modal-body]').includesText(schema.name);
                                });
                                _context8.next = 16;
                                return (0, _testHelpers.click)('[data-test-new-registration-modal-cancel-button]');

                            case 16:
                                assert.dom('[data-test-new-registration-modal-body]').isNotVisible();

                            case 17:
                            case 'end':
                                return _context8.stop();
                        }
                    }
                }, _callee8, undefined);
            }));

            return function (_x8) {
                return _ref8.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('logged in admin, prereg challenge modal', function () {
            var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
                var contributorUser, node, url, i;
                return regeneratorRuntime.wrap(function _callee9$(_context9) {
                    while (1) {
                        switch (_context9.prev = _context9.next) {
                            case 0:
                                contributorUser = server.create('user');

                                server.create('root', { currentUser: contributorUser });
                                node = server.create('node', { id: 'decaf', currentUserPermissions: [_osfModel.Permission.Admin] });

                                server.loadFixtures('registration-schemas');
                                url = '/' + node.id + '/registrations';
                                _context9.next = 7;
                                return (0, _helpers2.visit)(url);

                            case 7:
                                assert.equal((0, _helpers2.currentURL)(), url, 'We are on ' + url);
                                // Test prereg challenge modal twice to make sure state is reset
                                i = 0;

                            case 9:
                                if (!(i < 2)) {
                                    _context9.next = 27;
                                    break;
                                }

                                _context9.next = 12;
                                return (0, _testHelpers.click)('[data-test-new-registration-button]');

                            case 12:
                                _context9.next = 14;
                                return (0, _testHelpers.click)('[data-test-new-registration-modal-schema="Prereg Challenge"] input');

                            case 14:
                                _context9.next = 16;
                                return (0, _testHelpers.click)('[data-test-new-registration-modal-create-draft-button]');

                            case 16:
                                assert.dom('[data-test-prereg-challenge-modal-body]').isVisible();
                                assert.dom('[data-test-prereg-challenge-modal-continue-button]').isDisabled();
                                _context9.next = 20;
                                return (0, _testHelpers.click)('[data-test-prereg-challenge-modal-consent-checkbox]');

                            case 20:
                                assert.dom('[data-test-prereg-challenge-modal-continue-button]').isNotDisabled();
                                _context9.next = 23;
                                return (0, _testHelpers.click)('[data-test-prereg-challenge-modal-cancel-button]');

                            case 23:
                                assert.dom('[data-test-prereg-challenge-modal-body]').isNotVisible();

                            case 24:
                                i++;
                                _context9.next = 9;
                                break;

                            case 27:
                            case 'end':
                                return _context9.stop();
                        }
                    }
                }, _callee9, undefined);
            }));

            return function (_x9) {
                return _ref9.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/acceptance/guid-user/quickfiles-test', ['@ember/test-helpers', 'ember-cli-mirage/test-support/setup-mirage', 'ember-power-select/test-support', 'ember-qunit', 'qunit'], function (_testHelpers, _setupMirage, _testSupport, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Acceptance | Guid User Quickfiles', function (hooks) {
        (0, _emberQunit.setupApplicationTest)(hooks);
        (0, _setupMirage.default)(hooks);
        (0, _qunit.test)('visiting another\'s guid-user/quickfiles unauthenticated', function () {
            var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                var user, files;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                server.create('root', { currentUser: null });
                                user = server.create('user', 'withFiles');

                                assert.ok(this.element === undefined, 'Should not have element before visit');
                                _context.next = 5;
                                return (0, _testHelpers.visit)('--user/' + user.id + '/quickfiles');

                            case 5:
                                assert.ok(this.element !== undefined, 'Should have element after visit');
                                assert.dom('nav.navbar').exists();
                                assert.dom('nav.navbar .service-name').hasText('OSF HOME');
                                assert.dom('nav.navbar .secondary-nav-dropdown').doesNotExist('Should not have user menu if not logged in');
                                assert.dom('img[alt*="Missing translation"]').doesNotExist();
                                files = this.element.querySelectorAll('a[class*="filename"]');

                                assert.equal(files.length, 5, 'Check for proper number of files in list. Found ' + files.length);

                            case 12:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x) {
                return _ref.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('visiting another\'s guid-user/quickfiles authenticated', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
                var currentUser, user, files;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                currentUser = server.create('user', 'loggedIn');
                                user = server.create('user', 'withFiles');

                                server.createList('file', 5, { user: user });
                                _context2.next = 5;
                                return (0, _testHelpers.visit)('--user/' + user.id + '/quickfiles');

                            case 5:
                                assert.dom('nav.navbar').exists();
                                assert.dom('nav.navbar .service-name').hasText('OSF HOME');
                                assert.dom('nav.navbar .secondary-nav-dropdown .nav-profile-name').hasText(currentUser.fullName, 'User\'s name is in navbar');
                                assert.dom('img[alt*="Missing translation"]').doesNotExist();
                                files = this.element.querySelectorAll('a[class*="filename"]');

                                assert.equal(files.length, 10, 'Check for proper number of files in list. Found ' + files.length);

                            case 11:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            return function (_x2) {
                return _ref2.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('visiting your guid-user/quickfiles authenticated', function () {
            var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
                var currentUser, user, files;
                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                currentUser = server.create('user', 'loggedIn');
                                user = server.create('user', 'withFiles');

                                server.createList('file', 5, { user: user });
                                _context3.next = 5;
                                return (0, _testHelpers.visit)('--user/' + currentUser.id + '/quickfiles');

                            case 5:
                                assert.dom('img[alt*="Missing translation"]').doesNotExist();
                                files = this.element.querySelectorAll('a[class*="filename"]');

                                assert.equal(files.length, 5, 'Check for proper number of files in list. Found ' + files.length);

                            case 8:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            return function (_x3) {
                return _ref3.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('move file to a new project', function () {
            var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
                var currentUser, title, files, newFiles, newNode;
                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                currentUser = server.create('user', 'loggedIn');
                                title = 'Giraffical Interchange Format';

                                server.loadFixtures('regions');
                                _context4.next = 5;
                                return (0, _testHelpers.visit)('--user/' + currentUser.id + '/quickfiles');

                            case 5:
                                assert.dom('img[alt*="Missing translation"]').doesNotExist();
                                files = this.element.querySelectorAll('div[class*="file-browser-item"]');

                                assert.equal(files.length, 5, 'Check for proper number of files in list. Found ' + files.length);
                                _context4.next = 10;
                                return (0, _testHelpers.click)(files[0]);

                            case 10:
                                _context4.next = 12;
                                return (0, _testHelpers.click)('[data-test-move-button]');

                            case 12:
                                _context4.next = 14;
                                return (0, _testHelpers.click)('[data-test-ps-new-project-button]');

                            case 14:
                                assert.dom('[data-test-create-project-header]').includesText('Create new project');
                                _context4.next = 17;
                                return (0, _testHelpers.fillIn)('[data-test-new-project-title]', title);

                            case 17:
                                _context4.next = 19;
                                return (0, _testHelpers.click)('[data-test-create-project-submit]');

                            case 19:
                                _context4.next = 21;
                                return (0, _testHelpers.click)('[data-test-stay-here]');

                            case 21:
                                newFiles = this.element.querySelectorAll('div[class*="file-browser-item"]');

                                assert.equal(newFiles.length, files.length - 1);
                                newNode = server.schema.nodes.findBy({ title: title });

                                assert.equal(newNode.attrs.public, true, 'Projects created from quickfiles should be public.');

                            case 25:
                            case 'end':
                                return _context4.stop();
                        }
                    }
                }, _callee4, this);
            }));

            return function (_x4) {
                return _ref4.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('create new and cancel', function () {
            var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
                var title, currentUser, files, newFiles;
                return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                        switch (_context5.prev = _context5.next) {
                            case 0:
                                title = 'Giraffical Interchange Format';
                                currentUser = server.create('user', 'loggedIn');

                                server.loadFixtures('regions');
                                _context5.next = 5;
                                return (0, _testHelpers.visit)('--user/' + currentUser.id + '/quickfiles');

                            case 5:
                                files = this.element.querySelectorAll('div[class*="file-browser-item"]');

                                assert.equal(files.length, 5, 'Check for proper number of files in list. Found ' + files.length);
                                _context5.next = 9;
                                return (0, _testHelpers.click)(files[0]);

                            case 9:
                                _context5.next = 11;
                                return (0, _testHelpers.click)('[data-test-move-button]');

                            case 11:
                                _context5.next = 13;
                                return (0, _testHelpers.click)('[data-test-ps-new-project-button]');

                            case 13:
                                _context5.next = 15;
                                return (0, _testHelpers.fillIn)('[data-test-new-project-title]', title);

                            case 15:
                                assert.dom('[data-test-new-project-title]').hasValue(title);
                                _context5.next = 18;
                                return (0, _testHelpers.click)('[data-test-create-project-cancel]');

                            case 18:
                                newFiles = this.element.querySelectorAll('div[class*="file-browser-item"]');

                                assert.equal(newFiles.length, 5, 'Check for proper number of files in list. Found ' + newFiles.length);
                                _context5.next = 22;
                                return (0, _testHelpers.click)('[data-test-move-button]');

                            case 22:
                                _context5.next = 24;
                                return (0, _testHelpers.click)('[data-test-ps-new-project-button]');

                            case 24:
                                assert.dom('[data-test-new-project-title]').hasNoValue('Should not be filled out after leaving and re-entering');

                            case 25:
                            case 'end':
                                return _context5.stop();
                        }
                    }
                }, _callee5, this);
            }));

            return function (_x5) {
                return _ref5.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('create new, cancel, and select new file [EMB-384]', function () {
            var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
                var title, currentUser, files;
                return regeneratorRuntime.wrap(function _callee6$(_context6) {
                    while (1) {
                        switch (_context6.prev = _context6.next) {
                            case 0:
                                title = 'Giraffical Interchange Format';
                                currentUser = server.create('user', 'loggedIn');

                                server.loadFixtures('regions');
                                _context6.next = 5;
                                return (0, _testHelpers.visit)('--user/' + currentUser.id + '/quickfiles');

                            case 5:
                                files = this.element.querySelectorAll('div[class*="file-browser-item"]');

                                assert.equal(files.length, 5, 'Check for proper number of files in list. Found ' + files.length);
                                _context6.next = 9;
                                return (0, _testHelpers.click)(files[0]);

                            case 9:
                                _context6.next = 11;
                                return (0, _testHelpers.click)('[data-test-move-button]');

                            case 11:
                                _context6.next = 13;
                                return (0, _testHelpers.click)('[data-test-ps-new-project-button]');

                            case 13:
                                _context6.next = 15;
                                return (0, _testHelpers.fillIn)('[data-test-new-project-title]', title);

                            case 15:
                                assert.dom('[data-test-new-project-title]').hasValue(title);
                                _context6.next = 18;
                                return (0, _testHelpers.click)('[data-test-create-project-cancel]');

                            case 18:
                                _context6.next = 20;
                                return (0, _testHelpers.click)(files[1]);

                            case 20:
                                _context6.next = 22;
                                return (0, _testHelpers.click)('[data-test-move-button]');

                            case 22:
                                _context6.next = 24;
                                return (0, _testHelpers.click)('[data-test-ps-new-project-button]');

                            case 24:
                                assert.dom('[data-test-new-project-title]').hasNoValue('Should not be filled out after leaving and re-entering');

                            case 25:
                            case 'end':
                                return _context6.stop();
                        }
                    }
                }, _callee6, this);
            }));

            return function (_x6) {
                return _ref6.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('move file to an existing public project', function () {
            var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
                var currentUser, title, node, files, newFiles;
                return regeneratorRuntime.wrap(function _callee7$(_context7) {
                    while (1) {
                        switch (_context7.prev = _context7.next) {
                            case 0:
                                currentUser = server.create('user', 'loggedIn');

                                server.loadFixtures('regions');
                                title = 'Giraffical Interchange Format';
                                node = server.create('node', { title: title, lastLogged: '2017-10-19T12:05:10.571Z', dateModified: '2017-10-19T12:05:10.571Z', public: true });

                                server.create('contributor', { node: node, users: currentUser, index: 0, permission: 'admin', bibliographic: true });
                                _context7.next = 7;
                                return (0, _testHelpers.visit)('--user/' + currentUser.id + '/quickfiles');

                            case 7:
                                assert.dom('img[alt*="Missing translation"]').doesNotExist();
                                files = this.element.querySelectorAll('div[class*="file-browser-item"]');

                                assert.equal(files.length, 5, 'Check for proper number of files in list. Found ' + files.length);
                                _context7.next = 12;
                                return (0, _testHelpers.click)(files[0]);

                            case 12:
                                _context7.next = 14;
                                return (0, _testHelpers.click)('[data-test-move-button]');

                            case 14:
                                _context7.next = 16;
                                return (0, _testHelpers.click)('[data-test-ps-existing-project-button]');

                            case 16:
                                _context7.next = 18;
                                return (0, _testHelpers.click)('[data-test-ps-select-project] div[class*="ember-power-select-trigger"]');

                            case 18:
                                _context7.next = 20;
                                return (0, _testSupport.selectChoose)('[data-test-ps-select-project]', title);

                            case 20:
                                assert.dom('[data-test-ps-select-project] span[class~="ember-power-select-selected-item"]').containsText(title);
                                assert.dom('[data-test-no-longer-public]').doesNotExist('There should not be a warning about moving files to a private project');
                                _context7.next = 24;
                                return (0, _testHelpers.click)('[data-test-move-to-project-modal-perform-button]');

                            case 24:
                                _context7.next = 26;
                                return (0, _testHelpers.click)('[data-test-stay-here]');

                            case 26:
                                newFiles = this.element.querySelectorAll('div[class*="file-browser-item"]');

                                assert.equal(newFiles.length, files.length - 1);

                            case 28:
                            case 'end':
                                return _context7.stop();
                        }
                    }
                }, _callee7, this);
            }));

            return function (_x7) {
                return _ref7.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('move file to an existing private project', function () {
            var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
                var currentUser, title, node, files, newFiles;
                return regeneratorRuntime.wrap(function _callee8$(_context8) {
                    while (1) {
                        switch (_context8.prev = _context8.next) {
                            case 0:
                                currentUser = server.create('user', 'loggedIn');

                                server.loadFixtures('regions');
                                title = 'Giraffical Interchange Format';
                                node = server.create('node', { title: title, lastLogged: '2017-10-19T12:05:10.571Z', dateModified: '2017-10-19T12:05:10.571Z', public: false });

                                server.create('contributor', { node: node, users: currentUser, index: 0, permission: 'admin', bibliographic: true });
                                _context8.next = 7;
                                return (0, _testHelpers.visit)('--user/' + currentUser.id + '/quickfiles');

                            case 7:
                                assert.dom('img[alt*="Missing translation"]').doesNotExist();
                                files = this.element.querySelectorAll('div[class*="file-browser-item"]');

                                assert.equal(files.length, 5, 'Check for proper number of files in list. Found ' + files.length);
                                _context8.next = 12;
                                return (0, _testHelpers.click)(files[0]);

                            case 12:
                                _context8.next = 14;
                                return (0, _testHelpers.click)('[data-test-move-button]');

                            case 14:
                                _context8.next = 16;
                                return (0, _testHelpers.click)('[data-test-ps-existing-project-button]');

                            case 16:
                                _context8.next = 18;
                                return (0, _testHelpers.click)('[data-test-ps-select-project] div[class*="ember-power-select-trigger"]');

                            case 18:
                                _context8.next = 20;
                                return (0, _testSupport.selectChoose)('[data-test-ps-select-project]', title);

                            case 20:
                                assert.dom('[data-test-ps-select-project] span[class~="ember-power-select-selected-item"]').containsText(title);
                                assert.dom('[data-test-no-longer-public]').exists('Should be a warning about moving files to a private project');
                                assert.dom('[data-test-no-longer-public]').containsText('Files moved to private projects will no longer be public or discoverable by others.');
                                _context8.next = 25;
                                return (0, _testHelpers.click)('[data-test-move-to-project-modal-perform-button]');

                            case 25:
                                _context8.next = 27;
                                return (0, _testHelpers.click)('[data-test-stay-here]');

                            case 27:
                                newFiles = this.element.querySelectorAll('div[class*="file-browser-item"]');

                                assert.equal(newFiles.length, files.length - 1);

                            case 29:
                            case 'end':
                                return _context8.stop();
                        }
                    }
                }, _callee8, this);
            }));

            return function (_x8) {
                return _ref8.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('Select existing project and back', function () {
            var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
                var title, currentUser, node, files;
                return regeneratorRuntime.wrap(function _callee9$(_context9) {
                    while (1) {
                        switch (_context9.prev = _context9.next) {
                            case 0:
                                title = 'Giraffical Interchange Format';
                                currentUser = server.create('user', 'loggedIn');
                                node = server.create('node', { title: title, lastLogged: '2017-10-19T12:05:10.571Z', dateModified: '2017-10-19T12:05:10.571Z' });

                                server.create('contributor', { node: node, users: currentUser, index: 0, permission: 'admin', bibliographic: true });
                                server.loadFixtures('regions');
                                _context9.next = 7;
                                return (0, _testHelpers.visit)('--user/' + currentUser.id + '/quickfiles');

                            case 7:
                                files = this.element.querySelectorAll('div[class*="file-browser-item"]');

                                assert.equal(files.length, 5, 'Check for proper number of files in list. Found ' + files.length);
                                _context9.next = 11;
                                return (0, _testHelpers.click)(files[0]);

                            case 11:
                                _context9.next = 13;
                                return (0, _testHelpers.click)('[data-test-move-button]');

                            case 13:
                                _context9.next = 15;
                                return (0, _testHelpers.click)('[data-test-ps-existing-project-button');

                            case 15:
                                assert.dom('[data-test-ps-select-project] span[class~="ember-power-select-selected-item"]').doesNotExist();
                                assert.dom('[data-test-ps-select-project]').exists();
                                _context9.next = 19;
                                return (0, _testHelpers.click)('[data-test-ps-select-project] div[class*="ember-power-select-trigger"]');

                            case 19:
                                _context9.next = 21;
                                return (0, _testSupport.selectChoose)('[data-test-ps-select-project]', title);

                            case 21:
                                assert.dom('[data-test-ps-select-project] span[class~="ember-power-select-selected-item"]').containsText(title);
                                _context9.next = 24;
                                return (0, _testHelpers.click)('[data-test-move-to-project-modal-back-button]');

                            case 24:
                                _context9.next = 26;
                                return (0, _testHelpers.click)('[data-test-ps-existing-project-button');

                            case 26:
                                assert.dom('[data-test-ps-select-project] span[class~="ember-power-select-selected-item"]').doesNotExist();

                            case 27:
                            case 'end':
                                return _context9.stop();
                        }
                    }
                }, _callee9, this);
            }));

            return function (_x9) {
                return _ref9.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('Select existing project and cancel', function () {
            var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
                var title, currentUser, node, files;
                return regeneratorRuntime.wrap(function _callee10$(_context10) {
                    while (1) {
                        switch (_context10.prev = _context10.next) {
                            case 0:
                                title = 'Giraffical Interchange Format';
                                currentUser = server.create('user', 'loggedIn');
                                node = server.create('node', { title: title, lastLogged: '2017-10-19T12:05:10.571Z', dateModified: '2017-10-19T12:05:10.571Z' });

                                server.create('contributor', { node: node, users: currentUser, index: 0, permission: 'admin', bibliographic: true });
                                server.loadFixtures('regions');
                                _context10.next = 7;
                                return (0, _testHelpers.visit)('--user/' + currentUser.id + '/quickfiles');

                            case 7:
                                files = this.element.querySelectorAll('div[class*="file-browser-item"]');

                                assert.equal(files.length, 5, 'Check for proper number of files in list. Found ' + files.length);
                                _context10.next = 11;
                                return (0, _testHelpers.click)(files[0]);

                            case 11:
                                _context10.next = 13;
                                return (0, _testHelpers.click)('[data-test-move-button]');

                            case 13:
                                _context10.next = 15;
                                return (0, _testHelpers.click)('[data-test-ps-existing-project-button');

                            case 15:
                                assert.dom('[data-test-ps-select-project] span[class~="ember-power-select-selected-item"]').doesNotExist();
                                assert.dom('[data-test-move-to-project-modal-perform-button]').isDisabled('Should be disabled before selecting a project');
                                assert.dom('[data-test-ps-select-project]').exists();
                                _context10.next = 20;
                                return (0, _testHelpers.click)('[data-test-ps-select-project] div[class*="ember-power-select-trigger"]');

                            case 20:
                                _context10.next = 22;
                                return (0, _testSupport.selectChoose)('[data-test-ps-select-project]', title);

                            case 22:
                                assert.dom('[data-test-ps-select-project] span[class~="ember-power-select-selected-item"]').containsText(title);
                                assert.dom('[data-test-move-to-project-modal-perform-button]').isNotDisabled('Should be enabled after selecting a project');
                                _context10.next = 26;
                                return (0, _testHelpers.click)('[data-test-move-to-project-modal-close-button]');

                            case 26:
                                _context10.next = 28;
                                return (0, _testHelpers.click)('[data-test-move-button]');

                            case 28:
                                _context10.next = 30;
                                return (0, _testHelpers.click)('[data-test-ps-existing-project-button');

                            case 30:
                                assert.dom('[data-test-ps-select-project] span[class~="ember-power-select-selected-item"]').doesNotExist();
                                assert.dom('[data-test-move-to-project-modal-perform-button]').isDisabled('Should be disabled after leaving and re-entering');

                            case 32:
                            case 'end':
                                return _context10.stop();
                        }
                    }
                }, _callee10, this);
            }));

            return function (_x10) {
                return _ref10.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/acceptance/logged-out-home-page-test', ['@ember/test-helpers', 'ember-cli-mirage/test-support/setup-mirage', 'ember-qunit', 'qunit'], function (_testHelpers, _setupMirage, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Acceptance | logged-out home page', function (hooks) {
        (0, _emberQunit.setupApplicationTest)(hooks);
        (0, _setupMirage.default)(hooks);
        (0, _qunit.test)('visiting /', function () {
            var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                server.create('root', { currentUser: null });
                                _context.next = 3;
                                return (0, _testHelpers.visit)('/');

                            case 3:
                                assert.equal((0, _testHelpers.currentURL)(), '/', "Still at '/'.");
                                // Check navbar.
                                assert.dom('nav.navbar').exists();
                                assert.dom('nav.navbar .service-name').hasText('OSF HOME');
                                assert.dom('nav.navbar .sign-in').exists();
                                // Check page.
                                assert.dom('h1[class*="hero-brand"]').hasText('Open Science Framework');
                                // Check footer.
                                assert.dom('footer').exists();
                                // Check sign-up form.
                                assert.dom('[data-test-sign-up-form] .has-error').doesNotExist('Sign up form: no premature validation');
                                assert.dom('[data-test-sign-up-form] .help-block').doesNotExist('Sign up form: no validation messages shown');
                                _context.next = 13;
                                return (0, _testHelpers.click)('[data-test-sign-up-form] [data-test-sign-up-button]');

                            case 13:
                                assert.dom('[data-test-sign-up-form] .has-error').exists('Sign up form: validation errors present');
                                assert.dom('[data-test-sign-up-form] .help-block').exists('Sign up form: validation messages shown');
                                // Alt text for integration logos
                                assert.dom('[class*="_integrations"] img[alt*="Dropbox logo"]').exists();
                                assert.dom('img[alt*="Missing translation"]').doesNotExist();

                            case 17:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, undefined);
            }));

            return function (_x) {
                return _ref.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/acceptance/register-test', ['@ember/test-helpers', 'ember-cli-mirage/test-support/setup-mirage', 'ember-qunit', 'qunit'], function (_testHelpers, _setupMirage, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Acceptance | register (sign up page)', function (hooks) {
        (0, _emberQunit.setupApplicationTest)(hooks);
        (0, _setupMirage.default)(hooks);
        (0, _qunit.test)('visiting /register', function () {
            var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                server.create('root', { currentUser: null });
                                _context.next = 3;
                                return (0, _testHelpers.visit)('/register');

                            case 3:
                                assert.equal((0, _testHelpers.currentURL)(), '/register', "Still at '/register'.");
                                assert.dom('[data-test-orcid-button]').exists();
                                assert.dom('[data-test-institution-button]').exists();
                                assert.dom('[data-test-sign-up-full-name]').exists();
                                assert.dom('img[alt*="Missing translation"]').doesNotExist();

                            case 8:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, undefined);
            }));

            return function (_x) {
                return _ref.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('visiting /register?next=foo', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                server.create('root', { currentUser: null });
                                _context2.next = 3;
                                return (0, _testHelpers.visit)('/register?next=foo');

                            case 3:
                                assert.equal((0, _testHelpers.currentURL)(), '/register?next=foo', "Still at '/register?next=foo'.");
                                assert.dom('[data-test-institution-button][href$="%3Fnext%3Dfoo"]').exists('Institutions button link ends with encoded next.');

                            case 5:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, undefined);
            }));

            return function (_x2) {
                return _ref2.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/acceptance/resolve-guid-test', ['@ember/test-helpers', 'ember-cli-mirage/test-support/setup-mirage', 'ember-qunit', 'qunit', 'ember-osf-web/tests/helpers', 'ember-osf-web/tests/helpers/engines'], function (_testHelpers, _setupMirage, _emberQunit, _qunit, _helpers, _engines) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    var KeenStub = Ember.Service.extend({
        queryNode: function queryNode(model) {
            return {
                result: [{
                    'page.info.path': '/' + model.id + '/foo'
                }]
            };
        }
    });
    function routingAssertions(assert, segment, url, route) {
        assert.equal((0, _testHelpers.currentURL)(), '/' + segment + url, 'The "real" URL contains the hidden "' + segment + '" segment');
        assert.equal((0, _helpers.currentURL)(), url, 'The Location URL is the same');
        assert.equal((0, _testHelpers.currentRouteName)(), route, 'The correct route was reached');
    }
    (0, _qunit.module)('Acceptance | resolve-guid', function (hooks) {
        (0, _emberQunit.setupApplicationTest)(hooks);
        (0, _setupMirage.default)(hooks);
        (0, _qunit.test)('User | Index', function () {
            var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                var user;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                server.create('root', { currentUser: null });
                                user = server.create('user');
                                _context.next = 4;
                                return (0, _helpers.visit)('/' + user.id);

                            case 4:
                                assert.expect(3);
                                routingAssertions(assert, '--user', '/' + user.id, 'guid-user.index');

                            case 6:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, undefined);
            }));

            return function (_x) {
                return _ref.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('File | Index', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
                var file;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                server.create('root', { currentUser: null });
                                file = server.create('file', { user: server.create('user') });
                                _context2.next = 4;
                                return (0, _helpers.visit)('/' + file.id);

                            case 4:
                                assert.expect(3);
                                routingAssertions(assert, '--file', '/' + file.id, 'guid-file');

                            case 6:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, undefined);
            }));

            return function (_x2) {
                return _ref2.apply(this, arguments);
            };
        }());
        (0, _qunit.module)('Node', function (mhooks) {
            mhooks.beforeEach(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                var analyticsEngine;
                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                _context3.next = 2;
                                return (0, _engines.loadEngine)('analytics-page', 'guid-node.analytics');

                            case 2:
                                analyticsEngine = _context3.sent;

                                analyticsEngine.register('service:keen', KeenStub);

                            case 4:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            })));
            (0, _qunit.test)('Index', function () {
                var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
                    var node;
                    return regeneratorRuntime.wrap(function _callee4$(_context4) {
                        while (1) {
                            switch (_context4.prev = _context4.next) {
                                case 0:
                                    server.create('root', { currentUser: null });
                                    node = server.create('node');
                                    _context4.next = 4;
                                    return (0, _helpers.visit)('/' + node.id);

                                case 4:
                                    assert.expect(3);
                                    routingAssertions(assert, '--node', '/' + node.id, 'guid-node.index');

                                case 6:
                                case 'end':
                                    return _context4.stop();
                            }
                        }
                    }, _callee4, undefined);
                }));

                return function (_x3) {
                    return _ref4.apply(this, arguments);
                };
            }());
            (0, _qunit.test)('Forks', function () {
                var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
                    var node;
                    return regeneratorRuntime.wrap(function _callee5$(_context5) {
                        while (1) {
                            switch (_context5.prev = _context5.next) {
                                case 0:
                                    server.create('root', { currentUser: null });
                                    node = server.create('node');
                                    _context5.next = 4;
                                    return (0, _helpers.visit)('/' + node.id + '/forks');

                                case 4:
                                    assert.expect(3);
                                    routingAssertions(assert, '--node', '/' + node.id + '/forks', 'guid-node.forks');

                                case 6:
                                case 'end':
                                    return _context5.stop();
                            }
                        }
                    }, _callee5, undefined);
                }));

                return function (_x4) {
                    return _ref5.apply(this, arguments);
                };
            }());
            (0, _qunit.test)('Analytics', function () {
                var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
                    var node;
                    return regeneratorRuntime.wrap(function _callee6$(_context6) {
                        while (1) {
                            switch (_context6.prev = _context6.next) {
                                case 0:
                                    server.create('root', { currentUser: null });
                                    node = server.create('node');
                                    _context6.next = 4;
                                    return (0, _helpers.visit)('/' + node.id + '/analytics');

                                case 4:
                                    assert.expect(3);
                                    routingAssertions(assert, '--node', '/' + node.id + '/analytics', 'guid-node.analytics.index');

                                case 6:
                                case 'end':
                                    return _context6.stop();
                            }
                        }
                    }, _callee6, undefined);
                }));

                return function (_x5) {
                    return _ref6.apply(this, arguments);
                };
            }());
            (0, _qunit.test)('Registrations', function () {
                var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
                    var node;
                    return regeneratorRuntime.wrap(function _callee7$(_context7) {
                        while (1) {
                            switch (_context7.prev = _context7.next) {
                                case 0:
                                    server.create('root', { currentUser: null });
                                    node = server.create('node');
                                    _context7.next = 4;
                                    return (0, _helpers.visit)('/' + node.id + '/registrations');

                                case 4:
                                    assert.expect(3);
                                    routingAssertions(assert, '--node', '/' + node.id + '/registrations', 'guid-node.registrations');

                                case 6:
                                case 'end':
                                    return _context7.stop();
                            }
                        }
                    }, _callee7, undefined);
                }));

                return function (_x6) {
                    return _ref7.apply(this, arguments);
                };
            }());
        });
        (0, _qunit.module)('Registration', function (mhooks) {
            mhooks.beforeEach(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
                var analyticsEngine;
                return regeneratorRuntime.wrap(function _callee8$(_context8) {
                    while (1) {
                        switch (_context8.prev = _context8.next) {
                            case 0:
                                _context8.next = 2;
                                return (0, _engines.loadEngine)('analytics-page', 'guid-registration.analytics');

                            case 2:
                                analyticsEngine = _context8.sent;

                                analyticsEngine.register('service:keen', KeenStub);

                            case 4:
                            case 'end':
                                return _context8.stop();
                        }
                    }
                }, _callee8, this);
            })));
            (0, _qunit.module)('No ember_registries_detail_page', function (__) {
                (0, _qunit.test)('Index', function () {
                    var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
                        var reg;
                        return regeneratorRuntime.wrap(function _callee9$(_context9) {
                            while (1) {
                                switch (_context9.prev = _context9.next) {
                                    case 0:
                                        server.create('root', { currentUser: null, activeFlags: [] });
                                        reg = server.create('registration');
                                        _context9.next = 4;
                                        return (0, _helpers.visit)('/' + reg.id);

                                    case 4:
                                        assert.expect(3);
                                        routingAssertions(assert, '--registration', '/' + reg.id, 'guid-registration.index');

                                    case 6:
                                    case 'end':
                                        return _context9.stop();
                                }
                            }
                        }, _callee9, undefined);
                    }));

                    return function (_x7) {
                        return _ref9.apply(this, arguments);
                    };
                }());
                (0, _qunit.test)('Forks', function () {
                    var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
                        var reg;
                        return regeneratorRuntime.wrap(function _callee10$(_context10) {
                            while (1) {
                                switch (_context10.prev = _context10.next) {
                                    case 0:
                                        server.create('root', { currentUser: null, activeFlags: [] });
                                        reg = server.create('registration');
                                        _context10.next = 4;
                                        return (0, _helpers.visit)('/' + reg.id + '/forks');

                                    case 4:
                                        assert.expect(3);
                                        routingAssertions(assert, '--registration', '/' + reg.id + '/forks', 'guid-registration.forks');

                                    case 6:
                                    case 'end':
                                        return _context10.stop();
                                }
                            }
                        }, _callee10, undefined);
                    }));

                    return function (_x8) {
                        return _ref10.apply(this, arguments);
                    };
                }());
                (0, _qunit.test)('Analytics', function () {
                    var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
                        var reg, url;
                        return regeneratorRuntime.wrap(function _callee11$(_context11) {
                            while (1) {
                                switch (_context11.prev = _context11.next) {
                                    case 0:
                                        server.create('root', { currentUser: null, activeFlags: [] });
                                        reg = server.create('registration');
                                        url = '/' + reg.id + '/analytics';
                                        _context11.next = 5;
                                        return (0, _helpers.visit)(url);

                                    case 5:
                                        assert.expect(3);
                                        routingAssertions(assert, '--registration', url, 'guid-registration.analytics.index');

                                    case 7:
                                    case 'end':
                                        return _context11.stop();
                                }
                            }
                        }, _callee11, undefined);
                    }));

                    return function (_x9) {
                        return _ref11.apply(this, arguments);
                    };
                }());
            });
            (0, _qunit.module)('With ember_registries_detail_page', function (__) {
                (0, _qunit.test)('Index', function () {
                    var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {
                        var reg;
                        return regeneratorRuntime.wrap(function _callee12$(_context12) {
                            while (1) {
                                switch (_context12.prev = _context12.next) {
                                    case 0:
                                        server.create('root', { currentUser: null });
                                        reg = server.create('registration');
                                        _context12.next = 4;
                                        return (0, _helpers.visit)('/' + reg.id);

                                    case 4:
                                        assert.expect(3);
                                        routingAssertions(assert, '--registries', '/' + reg.id, 'registries.overview.index');

                                    case 6:
                                    case 'end':
                                        return _context12.stop();
                                }
                            }
                        }, _callee12, undefined);
                    }));

                    return function (_x10) {
                        return _ref12.apply(this, arguments);
                    };
                }());
                (0, _qunit.test)('Forks', function () {
                    var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {
                        var reg;
                        return regeneratorRuntime.wrap(function _callee13$(_context13) {
                            while (1) {
                                switch (_context13.prev = _context13.next) {
                                    case 0:
                                        server.create('root', { currentUser: null });
                                        reg = server.create('registration');
                                        _context13.next = 4;
                                        return (0, _helpers.visit)('/' + reg.id + '/forks');

                                    case 4:
                                        assert.expect(3);
                                        routingAssertions(assert, '--registration', '/' + reg.id + '/forks', 'guid-registration.forks');

                                    case 6:
                                    case 'end':
                                        return _context13.stop();
                                }
                            }
                        }, _callee13, undefined);
                    }));

                    return function (_x11) {
                        return _ref13.apply(this, arguments);
                    };
                }());
                (0, _qunit.test)('Analytics', function () {
                    var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {
                        var reg, url;
                        return regeneratorRuntime.wrap(function _callee14$(_context14) {
                            while (1) {
                                switch (_context14.prev = _context14.next) {
                                    case 0:
                                        server.create('root', { currentUser: null });
                                        reg = server.create('registration');
                                        url = '/' + reg.id + '/analytics';
                                        _context14.next = 5;
                                        return (0, _helpers.visit)(url);

                                    case 5:
                                        assert.expect(3);
                                        routingAssertions(assert, '--registration', url, 'guid-registration.analytics.index');

                                    case 7:
                                    case 'end':
                                        return _context14.stop();
                                }
                            }
                        }, _callee14, undefined);
                    }));

                    return function (_x12) {
                        return _ref14.apply(this, arguments);
                    };
                }());
            });
        });
        (0, _qunit.test)('Invalid GUIDs', function () {
            var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(assert) {
                var testCases, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, testCase;

                return regeneratorRuntime.wrap(function _callee15$(_context15) {
                    while (1) {
                        switch (_context15.prev = _context15.next) {
                            case 0:
                                server.create('root', { currentUser: null });
                                testCases = [{ url: '/decof', guid: 'decof', test: 'Invalid GUID' }, { url: '/dec1f/foo', guid: 'dec1f', test: 'Invalid GUID with sub route' }];
                                _iteratorNormalCompletion = true;
                                _didIteratorError = false;
                                _iteratorError = undefined;
                                _context15.prev = 5;
                                _iterator = testCases[Symbol.iterator]();

                            case 7:
                                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                                    _context15.next = 26;
                                    break;
                                }

                                testCase = _step.value;
                                _context15.prev = 9;
                                _context15.next = 12;
                                return (0, _helpers.visit)(testCase.url);

                            case 12:
                                _context15.next = 17;
                                break;

                            case 14:
                                _context15.prev = 14;
                                _context15.t0 = _context15['catch'](9);

                                assert.equal(_context15.t0.message, 'Invalid GUID and no matching engine: ' + testCase.guid);

                            case 17:
                                _context15.next = 19;
                                return (0, _testHelpers.settled)();

                            case 19:
                                assert.ok(true, testCase.test);
                                assert.equal((0, _testHelpers.currentURL)(), testCase.url, 'The URL has not changed');
                                assert.equal((0, _helpers.currentURL)(), testCase.url, 'The URL has not changed');
                                assert.equal((0, _testHelpers.currentRouteName)(), 'not-found', 'The correct route was reached');

                            case 23:
                                _iteratorNormalCompletion = true;
                                _context15.next = 7;
                                break;

                            case 26:
                                _context15.next = 32;
                                break;

                            case 28:
                                _context15.prev = 28;
                                _context15.t1 = _context15['catch'](5);
                                _didIteratorError = true;
                                _iteratorError = _context15.t1;

                            case 32:
                                _context15.prev = 32;
                                _context15.prev = 33;

                                if (!_iteratorNormalCompletion && _iterator.return) {
                                    _iterator.return();
                                }

                            case 35:
                                _context15.prev = 35;

                                if (!_didIteratorError) {
                                    _context15.next = 38;
                                    break;
                                }

                                throw _iteratorError;

                            case 38:
                                return _context15.finish(35);

                            case 39:
                                return _context15.finish(32);

                            case 40:
                            case 'end':
                                return _context15.stop();
                        }
                    }
                }, _callee15, undefined, [[5, 28, 32, 40], [9, 14], [33,, 35, 39]]);
            }));

            return function (_x13) {
                return _ref15.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('Not found', function () {
            var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(assert) {
                var testCases, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, testCase;

                return regeneratorRuntime.wrap(function _callee16$(_context16) {
                    while (1) {
                        switch (_context16.prev = _context16.next) {
                            case 0:
                                server.create('root', { currentUser: null });
                                testCases = [{ url: '/decaf', test: 'Nonexistant GUID' }, { url: '/decaf/files', test: 'Nonexistant GUID with existing sub route' }, { url: '/decaf/blah/blah/blah', test: 'Nonexistant GUID with non-existing sub route' }, { url: '/decaf?tastes-like=dirt', test: 'GUID with query params' }, { url: '/decaf/files?cream=1', test: 'GUID and subpath with query params' }];

                                assert.expect(6 * testCases.length);
                                _iteratorNormalCompletion2 = true;
                                _didIteratorError2 = false;
                                _iteratorError2 = undefined;
                                _context16.prev = 6;
                                _iterator2 = testCases[Symbol.iterator]();

                            case 8:
                                if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                                    _context16.next = 28;
                                    break;
                                }

                                testCase = _step2.value;
                                _context16.prev = 10;
                                _context16.next = 13;
                                return (0, _helpers.visit)(testCase.url);

                            case 13:
                                _context16.next = 19;
                                break;

                            case 15:
                                _context16.prev = 15;
                                _context16.t0 = _context16['catch'](10);

                                assert.equal(_context16.t0.errors.length, 1);
                                assert.equal(_context16.t0.errors[0].detail, 'Not found.');

                            case 19:
                                _context16.next = 21;
                                return (0, _testHelpers.settled)();

                            case 21:
                                assert.ok(true, testCase.test);
                                assert.equal((0, _testHelpers.currentURL)(), testCase.url, 'The URL has not changed');
                                assert.equal((0, _helpers.currentURL)(), testCase.url, 'The URL has not changed');
                                assert.equal((0, _testHelpers.currentRouteName)(), 'not-found', 'The correct route was reached');

                            case 25:
                                _iteratorNormalCompletion2 = true;
                                _context16.next = 8;
                                break;

                            case 28:
                                _context16.next = 34;
                                break;

                            case 30:
                                _context16.prev = 30;
                                _context16.t1 = _context16['catch'](6);
                                _didIteratorError2 = true;
                                _iteratorError2 = _context16.t1;

                            case 34:
                                _context16.prev = 34;
                                _context16.prev = 35;

                                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                    _iterator2.return();
                                }

                            case 37:
                                _context16.prev = 37;

                                if (!_didIteratorError2) {
                                    _context16.next = 40;
                                    break;
                                }

                                throw _iteratorError2;

                            case 40:
                                return _context16.finish(37);

                            case 41:
                                return _context16.finish(34);

                            case 42:
                            case 'end':
                                return _context16.stop();
                        }
                    }
                }, _callee16, undefined, [[6, 30, 34, 42], [10, 15], [35,, 37, 41]]);
            }));

            return function (_x14) {
                return _ref16.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/acceptance/settings/developer-apps-page-test', ['@ember/test-helpers', 'ember-cli-mirage/test-support/setup-mirage', 'ember-qunit', 'qunit'], function (_testHelpers, _setupMirage, _emberQunit, _qunit) {
    'use strict';

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Acceptance | settings | developer apps', function (hooks) {
        (0, _emberQunit.setupApplicationTest)(hooks);
        (0, _setupMirage.default)(hooks);
        (0, _qunit.test)('visit page', function () {
            var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                server.create('user', 'loggedIn');
                                _context.next = 3;
                                return (0, _testHelpers.visit)('/settings/applications');

                            case 3:
                                assert.equal((0, _testHelpers.currentURL)(), '/settings/applications', 'Went to the Applications route.');

                            case 4:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, undefined);
            }));

            return function (_x) {
                return _ref.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('empty app list', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                server.create('user', 'loggedIn');
                                _context2.next = 3;
                                return (0, _testHelpers.visit)('/settings/applications');

                            case 3:
                                assert.dom('[data-test-developer-app-card]').doesNotExist();

                            case 4:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, undefined);
            }));

            return function (_x2) {
                return _ref2.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('apps list', function () {
            var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                server.create('user', 'loggedIn');
                                server.createList('developer-app', 7);
                                _context3.next = 4;
                                return (0, _testHelpers.visit)('/settings/applications');

                            case 4:
                                assert.dom('[data-test-developer-app-card]').exists({ count: 7 });

                            case 5:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, undefined);
            }));

            return function (_x3) {
                return _ref3.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('long apps list', function () {
            var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                server.create('user', 'loggedIn');
                                server.createList('developer-app', 27);
                                _context4.next = 4;
                                return (0, _testHelpers.visit)('/settings/applications');

                            case 4:
                                assert.dom('[data-test-developer-app-card]').exists({ count: 10 });

                            case 5:
                            case 'end':
                                return _context4.stop();
                        }
                    }
                }, _callee4, undefined);
            }));

            return function (_x4) {
                return _ref4.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('create app', function () {
            var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
                var appName;
                return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                        switch (_context5.prev = _context5.next) {
                            case 0:
                                server.create('user', 'loggedIn');
                                appName = 'my app!';
                                _context5.next = 4;
                                return (0, _testHelpers.visit)('/settings/applications');

                            case 4:
                                assert.dom('[data-test-developer-app-card]').doesNotExist();
                                _context5.next = 7;
                                return (0, _testHelpers.click)('[data-test-create-app-link]');

                            case 7:
                                _context5.next = 9;
                                return (0, _testHelpers.fillIn)('[data-test-developer-app-name] input', appName);

                            case 9:
                                _context5.next = 11;
                                return (0, _testHelpers.fillIn)('[data-test-developer-app-homepage] input', 'http://osf.io/');

                            case 11:
                                _context5.next = 13;
                                return (0, _testHelpers.fillIn)('[data-test-developer-app-callback-url] input', 'http://osf.io/');

                            case 13:
                                _context5.next = 15;
                                return (0, _testHelpers.click)('[data-test-create-developer-app-button]');

                            case 15:
                                assert.dom('[data-test-client-secret]').exists();
                                _context5.next = 18;
                                return (0, _testHelpers.visit)('/settings/applications');

                            case 18:
                                assert.dom('[data-test-developer-app-card]').exists({ count: 1 });

                            case 19:
                            case 'end':
                                return _context5.stop();
                        }
                    }
                }, _callee5, undefined);
            }));

            return function (_x5) {
                return _ref5.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('edit app', function () {
            var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
                var oldName, newName, app, link, input;
                return regeneratorRuntime.wrap(function _callee6$(_context6) {
                    while (1) {
                        switch (_context6.prev = _context6.next) {
                            case 0:
                                server.create('user', 'loggedIn');
                                oldName = 'app the grey';
                                newName = 'app the white';
                                app = server.create('developer-app', { name: oldName });
                                _context6.next = 6;
                                return (0, _testHelpers.visit)('/settings/applications');

                            case 6:
                                link = '[data-test-developer-app-link=\'' + app.id + '\']';

                                assert.dom(link).exists({ count: 1 });
                                assert.dom(link).containsText(oldName);
                                _context6.next = 11;
                                return (0, _testHelpers.click)(link);

                            case 11:
                                input = '[data-test-developer-app-name] input';
                                _context6.next = 14;
                                return (0, _testHelpers.waitFor)(input + ':enabled');

                            case 14:
                                assert.equal((0, _testHelpers.currentURL)(), '/settings/applications/' + app.id);
                                assert.dom(input).hasValue(oldName);
                                _context6.next = 18;
                                return (0, _testHelpers.fillIn)(input, newName);

                            case 18:
                                _context6.next = 20;
                                return (0, _testHelpers.click)('[data-test-save-developer-app-button]');

                            case 20:
                                assert.equal((0, _testHelpers.currentURL)(), '/settings/applications');
                                assert.dom(link).exists({ count: 1 });
                                assert.dom(link).containsText(newName);

                            case 23:
                            case 'end':
                                return _context6.stop();
                        }
                    }
                }, _callee6, undefined);
            }));

            return function (_x6) {
                return _ref6.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('delete app', function () {
            var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
                var _server$createList, _server$createList2, app, card;

                return regeneratorRuntime.wrap(function _callee7$(_context7) {
                    while (1) {
                        switch (_context7.prev = _context7.next) {
                            case 0:
                                server.create('user', 'loggedIn');
                                _server$createList = server.createList('developer-app', 2), _server$createList2 = _slicedToArray(_server$createList, 1), app = _server$createList2[0];
                                _context7.next = 4;
                                return (0, _testHelpers.visit)('/settings/applications');

                            case 4:
                                card = '[data-test-developer-app-card=\'' + app.id + '\']';

                                assert.dom('[data-test-developer-app-card]').exists({ count: 2 });
                                assert.dom(card).exists({ count: 1 });
                                _context7.next = 9;
                                return (0, _testHelpers.click)(card + ' [data-test-delete-button]');

                            case 9:
                                _context7.next = 11;
                                return (0, _testHelpers.click)('[data-test-confirm-delete]');

                            case 11:
                                assert.dom('[data-test-developer-app-card]').exists({ count: 1 });
                                assert.dom(card).doesNotExist();

                            case 13:
                            case 'end':
                                return _context7.stop();
                        }
                    }
                }, _callee7, undefined);
            }));

            return function (_x7) {
                return _ref7.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('reset client secret', function () {
            var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
                var app, oldSecret;
                return regeneratorRuntime.wrap(function _callee8$(_context8) {
                    while (1) {
                        switch (_context8.prev = _context8.next) {
                            case 0:
                                server.create('user', 'loggedIn');
                                app = server.create('developer-app');
                                oldSecret = app.clientSecret;
                                _context8.next = 5;
                                return (0, _testHelpers.visit)('/settings/applications/' + app.id);

                            case 5:
                                assert.dom('[data-test-client-secret] button').isDisabled();
                                assert.dom('[data-test-client-secret] input[type=text]').hasValue('*********************');
                                _context8.next = 9;
                                return (0, _testHelpers.click)('[data-test-toggle-client-secret]');

                            case 9:
                                assert.dom('[data-test-client-secret] button').isNotDisabled();
                                assert.dom('[data-test-client-secret] input[type=text]').hasValue(oldSecret);
                                _context8.next = 13;
                                return (0, _testHelpers.click)('[data-test-reset-client-secret] [data-test-delete-button]');

                            case 13:
                                _context8.next = 15;
                                return (0, _testHelpers.click)('[data-test-confirm-delete]');

                            case 15:
                                _context8.next = 17;
                                return (0, _testHelpers.settled)();

                            case 17:
                                app.reload();
                                assert.notEqual(app.clientSecret, oldSecret, 'client secret updated');
                                assert.dom('[data-test-client-secret] button').isDisabled();
                                assert.dom('[data-test-client-secret] input[type=text]').hasValue('*********************');
                                _context8.next = 23;
                                return (0, _testHelpers.click)('[data-test-toggle-client-secret]');

                            case 23:
                                assert.dom('[data-test-client-secret] button').isNotDisabled();
                                assert.dom('[data-test-client-secret] input[type=text]').hasValue(app.clientSecret);

                            case 25:
                            case 'end':
                                return _context8.stop();
                        }
                    }
                }, _callee8, undefined);
            }));

            return function (_x8) {
                return _ref8.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/acceptance/settings/profile-menuing-test', ['@ember/test-helpers', 'ember-cli-mirage/test-support/setup-mirage', 'ember-qunit', 'qunit'], function (_testHelpers, _setupMirage, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Acceptance | settings | profile | menu', function (hooks) {
        (0, _emberQunit.setupApplicationTest)(hooks);
        (0, _setupMirage.default)(hooks);
        (0, _qunit.test)('visit settings page', function () {
            var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                server.create('user', 'loggedIn');
                                _context.next = 3;
                                return (0, _testHelpers.visit)('/settings/');

                            case 3:
                                assert.equal((0, _testHelpers.currentURL)(), '/settings/profile/name', 'Went to the settings.profile.name route.');

                            case 4:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, undefined);
            }));

            return function (_x) {
                return _ref.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('visit settings profile page', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                server.create('user', 'loggedIn');
                                _context2.next = 3;
                                return (0, _testHelpers.visit)('/settings/profile');

                            case 3:
                                assert.equal((0, _testHelpers.currentURL)(), '/settings/profile/name', 'Went to the settings.profile.name route.');

                            case 4:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, undefined);
            }));

            return function (_x2) {
                return _ref2.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/acceptance/settings/profile/names-test', ['@ember/test-helpers', 'ember-cli-mirage/test-support/setup-mirage', 'ember-qunit', 'qunit', 'ember-osf-web/tests/helpers/require-auth'], function (_testHelpers, _setupMirage, _emberQunit, _qunit, _requireAuth) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Acceptance | settings | profile | name', function (hooks) {
        (0, _emberQunit.setupApplicationTest)(hooks);
        (0, _setupMirage.default)(hooks);
        (0, _qunit.test)('cannot use unauthenticated', function () {
            var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                var currentUser;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                this.owner.register('service:current-user', _requireAuth.CurrentUserStub);
                                server.create('root', { currentUser: null });
                                currentUser = this.owner.lookup('service:current-user');
                                _context.next = 5;
                                return (0, _testHelpers.visit)('settings/profile/name');

                            case 5:
                                assert.equal(currentUser.urlCalled, '/settings/profile/name');

                            case 6:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x) {
                return _ref.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('visit settings page for basic functionality', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
                var currentUser;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                currentUser = server.create('user', 'loggedIn');
                                _context2.next = 3;
                                return (0, _testHelpers.visit)('/settings/profile/name');

                            case 3:
                                assert.equal((0, _testHelpers.currentURL)(), '/settings/profile/name', 'Stayed on the proper url.');
                                assert.dom('img[alt*="Missing translation"]').doesNotExist();
                                assert.dom('[data-test-full-name-field] input[type=text]').hasValue(currentUser.fullName);
                                assert.dom('[data-test-given-name-field] input[type=text]').hasValue(currentUser.givenName);
                                assert.dom('[data-test-middle-names-field] input[type=text]').hasValue(currentUser.middleNames);
                                assert.dom('[data-test-family-name-field] input[type=text]').hasValue(currentUser.familyName);
                                assert.dom('[data-test-suffix-field] input[type=text]').hasValue(currentUser.suffix);
                                assert.dom('[data-test-discard-changes').isDisabled('No changes means you cannot discard changes.');
                                assert.dom('[data-test-citation-container]').exists();

                            case 12:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, undefined);
            }));

            return function (_x2) {
                return _ref2.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('citation preview works properly', function () {
            var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
                var user, apa, mla;
                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                user = server.create('user', {
                                    givenName: 'Peggy',
                                    middleNames: 'Herbert Gavin',
                                    familyName: 'Doyle',
                                    suffix: 'DDS',
                                    fullName: 'Peggy Herbert Gavin Doyle, DDS.'
                                }, 'loggedIn');
                                apa = 'Doyle, P. H. G., DDS.';
                                mla = 'Doyle, Peggy H. G., DDS.';
                                _context3.next = 5;
                                return (0, _testHelpers.visit)('/settings/profile/name');

                            case 5:
                                assert.dom('[data-test-citation-container]').exists();
                                assert.dom('[data-test-apa-citation]').containsText(apa);
                                assert.dom('[data-test-mla-citation]').containsText(mla);
                                _context3.next = 10;
                                return (0, _testHelpers.fillIn)('[data-test-given-name-field] input', '');

                            case 10:
                                assert.dom('[data-test-citation-container]').doesNotExist();
                                _context3.next = 13;
                                return (0, _testHelpers.fillIn)('[data-test-given-name-field] input', 'Peggy');

                            case 13:
                                assert.dom('[data-test-citation-container]').exists();
                                assert.dom('[data-test-apa-citation]').containsText(apa);
                                assert.dom('[data-test-mla-citation]').containsText(mla);
                                _context3.next = 18;
                                return (0, _testHelpers.fillIn)('[data-test-family-name-field] input', '');

                            case 18:
                                assert.dom('[data-test-citation-container]').doesNotExist();
                                _context3.next = 21;
                                return (0, _testHelpers.fillIn)('[data-test-given-name-field] input', '');

                            case 21:
                                assert.dom('[data-test-citation-container]').doesNotExist();
                                _context3.next = 24;
                                return (0, _testHelpers.click)('[data-test-discard-changes]');

                            case 24:
                                assert.dom('[data-test-discard-changes').isDisabled('Already discarded changes means you cannot discard changes.');
                                assert.dom('[data-test-citation-container]').exists();
                                assert.dom('[data-test-apa-citation]').containsText(apa);
                                assert.dom('[data-test-mla-citation]').containsText(mla);
                                assert.dom('[data-test-given-name-field] input[type=text]').hasValue('Peggy');
                                assert.dom('[data-test-family-name-field] input[type=text]').hasValue('Doyle');
                                _context3.next = 32;
                                return (0, _testHelpers.fillIn)('[data-test-given-name-field] input', 'Maggs');

                            case 32:
                                assert.dom('[data-test-given-name-field] input[type=text]').hasValue('Maggs');
                                assert.dom('[data-test-apa-citation]').containsText('Doyle, M. H. G., DDS.');
                                assert.dom('[data-test-mla-citation]').containsText('Doyle, Maggs H. G., DDS.');
                                _context3.next = 37;
                                return (0, _testHelpers.click)('[data-test-save]');

                            case 37:
                                assert.dom('[data-test-discard-changes').isDisabled('Just saved means you cannot discard changes.');
                                assert.equal(user.givenName, 'Maggs');

                            case 39:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, undefined);
            }));

            return function (_x3) {
                return _ref3.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('validation works', function () {
            var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
                var givenName, middleNames, familyName, suffix, fullName, user, oneEightySeven, twoFiftySix;
                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                givenName = 'Peggy';
                                middleNames = 'Herbert Gavin';
                                familyName = 'Doyle';
                                suffix = 'DDS';
                                fullName = 'Peggy Herbert Gavin Doyle, DDS.';
                                user = server.create('user', {
                                    givenName: givenName,
                                    middleNames: middleNames,
                                    familyName: familyName,
                                    suffix: suffix,
                                    fullName: fullName
                                }, 'loggedIn');
                                oneEightySeven = 'x'.repeat(187);
                                twoFiftySix = 'x'.repeat(256);
                                _context4.next = 10;
                                return (0, _testHelpers.visit)('/settings/profile/name');

                            case 10:
                                _context4.next = 12;
                                return (0, _testHelpers.fillIn)('[data-test-full-name-field] input', oneEightySeven);

                            case 12:
                                _context4.next = 14;
                                return (0, _testHelpers.fillIn)('[data-test-given-name-field] input', twoFiftySix);

                            case 14:
                                _context4.next = 16;
                                return (0, _testHelpers.fillIn)('[data-test-middle-names-field] input', twoFiftySix);

                            case 16:
                                _context4.next = 18;
                                return (0, _testHelpers.fillIn)('[data-test-family-name-field] input', twoFiftySix);

                            case 18:
                                _context4.next = 20;
                                return (0, _testHelpers.fillIn)('[data-test-suffix-field] input', twoFiftySix);

                            case 20:
                                assert.dom('[data-test-full-name-field]').doesNotContainText('This field is too long', 'No message before first save.');
                                assert.dom('[data-test-given-name-field]').doesNotContainText('This field is too long', 'No message before first save.');
                                assert.dom('[data-test-middle-names-field]').doesNotContainText('This field is too long', 'No message before first save.');
                                assert.dom('[data-test-family-name-field]').doesNotContainText('This field is too long', 'No message before first save.');
                                assert.dom('[data-test-suffix-field]').doesNotContainText('This field is too long', 'No message before first save.');
                                _context4.next = 27;
                                return (0, _testHelpers.click)('[data-test-save]');

                            case 27:
                                assert.dom('[data-test-full-name-field]').containsText('This field is too long');
                                assert.dom('[data-test-given-name-field]').containsText('This field is too long');
                                assert.dom('[data-test-middle-names-field]').containsText('This field is too long');
                                assert.dom('[data-test-family-name-field]').containsText('This field is too long');
                                assert.dom('[data-test-suffix-field]').containsText('This field is too long');
                                assert.equal(user.givenName, givenName, 'No change from invalid save.');
                                assert.equal(user.middleNames, middleNames, 'No change from invalid save.');
                                assert.equal(user.familyName, familyName, 'No change from invalid save.');
                                assert.equal(user.suffix, suffix, 'No change from invalid save.');
                                assert.equal(user.fullName, fullName, 'No change from invalid save.');
                                _context4.next = 39;
                                return (0, _testHelpers.fillIn)('[data-test-full-name-field] input', fullName);

                            case 39:
                                assert.dom('[data-test-full-name-field]').doesNotContainText('This field is too long');
                                _context4.next = 42;
                                return (0, _testHelpers.fillIn)('[data-test-given-name-field] input', givenName);

                            case 42:
                                assert.dom('[data-test-given-name-field]').doesNotContainText('This field is too long');
                                _context4.next = 45;
                                return (0, _testHelpers.fillIn)('[data-test-middle-names-field] input', middleNames);

                            case 45:
                                assert.dom('[data-test-middle-names-field]').doesNotContainText('This field is too long');
                                _context4.next = 48;
                                return (0, _testHelpers.fillIn)('[data-test-family-name-field] input', familyName);

                            case 48:
                                assert.dom('[data-test-family-name-field]').doesNotContainText('This field is too long');
                                _context4.next = 51;
                                return (0, _testHelpers.fillIn)('[data-test-suffix-field] input', suffix);

                            case 51:
                                assert.dom('[data-test-suffix-field]').doesNotContainText('This field is too long');
                                _context4.next = 54;
                                return (0, _testHelpers.fillIn)('[data-test-full-name-field] input', '');

                            case 54:
                                assert.dom('[data-test-full-name-field]').containsText('This field can\'t be blank');
                                _context4.next = 57;
                                return (0, _testHelpers.fillIn)('[data-test-full-name-field] input', '12');

                            case 57:
                                assert.dom('[data-test-full-name-field]').containsText('This field is too short');
                                _context4.next = 60;
                                return (0, _testHelpers.fillIn)('[data-test-full-name-field] input', 'And Peggy!');

                            case 60:
                                assert.dom('[data-test-full-name-field]').doesNotContainText('This field is too long');
                                _context4.next = 63;
                                return (0, _testHelpers.click)('[data-test-save]');

                            case 63:
                                assert.equal(user.fullName, 'And Peggy!', 'Full name was successfully changed');
                                assert.dom('[data-test-discard-changes').isDisabled('Just saved means you cannot discard changes.');

                            case 65:
                            case 'end':
                                return _context4.stop();
                        }
                    }
                }, _callee4, undefined);
            }));

            return function (_x4) {
                return _ref4.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/acceptance/settings/profile/profile-menuing-test', ['@ember/test-helpers', 'ember-cli-mirage/test-support/setup-mirage', 'ember-qunit', 'qunit'], function (_testHelpers, _setupMirage, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Acceptance | settings | developer apps', function (hooks) {
        (0, _emberQunit.setupApplicationTest)(hooks);
        (0, _setupMirage.default)(hooks);
        (0, _qunit.test)('visit settings page', function () {
            var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                server.create('user', 'loggedIn');
                                _context.next = 3;
                                return (0, _testHelpers.visit)('/settings/');

                            case 3:
                                assert.equal((0, _testHelpers.currentURL)(), '/settings/profile/name', 'Went to the Applications route.');

                            case 4:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, undefined);
            }));

            return function (_x) {
                return _ref.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('visit settings profile page', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                server.create('user', 'loggedIn');
                                _context2.next = 3;
                                return (0, _testHelpers.visit)('/settings/profile');

                            case 3:
                                assert.equal((0, _testHelpers.currentURL)(), '/settings/profile/name', 'Went to the Applications route.');

                            case 4:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, undefined);
            }));

            return function (_x2) {
                return _ref2.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/acceptance/settings/tokens-page-test', ['@ember/test-helpers', 'ember-cli-mirage/test-support/setup-mirage', 'ember-qunit', 'qunit'], function (_testHelpers, _setupMirage, _emberQunit, _qunit) {
    'use strict';

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Acceptance | settings | personal access tokens', function (hooks) {
        (0, _emberQunit.setupApplicationTest)(hooks);
        (0, _setupMirage.default)(hooks);
        (0, _qunit.test)('visit page', function () {
            var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                server.create('user', 'loggedIn');
                                _context.next = 3;
                                return (0, _testHelpers.visit)('/settings/tokens');

                            case 3:
                                assert.equal((0, _testHelpers.currentURL)(), '/settings/tokens', 'Went to the PAT route.');

                            case 4:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, undefined);
            }));

            return function (_x) {
                return _ref.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('empty tokens list', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                server.create('user', 'loggedIn');
                                _context2.next = 3;
                                return (0, _testHelpers.visit)('/settings/tokens');

                            case 3:
                                assert.dom('[data-test-token-card]').doesNotExist();

                            case 4:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, undefined);
            }));

            return function (_x2) {
                return _ref2.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('tokens list', function () {
            var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                server.create('user', 'loggedIn');
                                server.createList('token', 7);
                                _context3.next = 4;
                                return (0, _testHelpers.visit)('/settings/tokens');

                            case 4:
                                assert.dom('[data-test-token-card]').exists({ count: 7 });

                            case 5:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, undefined);
            }));

            return function (_x3) {
                return _ref3.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('long tokens list', function () {
            var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                server.create('user', 'loggedIn');
                                server.createList('token', 27);
                                _context4.next = 4;
                                return (0, _testHelpers.visit)('/settings/tokens');

                            case 4:
                                assert.dom('[data-test-token-card]').exists({ count: 10 });

                            case 5:
                            case 'end':
                                return _context4.stop();
                        }
                    }
                }, _callee4, undefined);
            }));

            return function (_x4) {
                return _ref4.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('create token', function () {
            var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
                var tokenName;
                return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                        switch (_context5.prev = _context5.next) {
                            case 0:
                                server.create('user', 'loggedIn');
                                server.create('scope');
                                tokenName = 'my token!';
                                _context5.next = 5;
                                return (0, _testHelpers.visit)('/settings/tokens');

                            case 5:
                                assert.dom('[data-test-token-card]').doesNotExist();
                                _context5.next = 8;
                                return (0, _testHelpers.visit)('/settings/tokens/create');

                            case 8:
                                _context5.next = 10;
                                return (0, _testHelpers.fillIn)('[data-test-token-name] input', tokenName);

                            case 10:
                                _context5.next = 12;
                                return (0, _testHelpers.click)('[data-test-scope] input[type=checkbox]');

                            case 12:
                                _context5.next = 14;
                                return (0, _testHelpers.click)('[data-test-create-token-button]');

                            case 14:
                                assert.dom('[data-test-new-token-value]').exists();
                                _context5.next = 17;
                                return (0, _testHelpers.visit)('/settings/tokens');

                            case 17:
                                assert.dom('[data-test-token-card]').exists({ count: 1 });

                            case 18:
                            case 'end':
                                return _context5.stop();
                        }
                    }
                }, _callee5, undefined);
            }));

            return function (_x5) {
                return _ref5.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('edit token', function () {
            var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
                var oldName, newName, token, link, input;
                return regeneratorRuntime.wrap(function _callee6$(_context6) {
                    while (1) {
                        switch (_context6.prev = _context6.next) {
                            case 0:
                                server.create('user', 'loggedIn');
                                oldName = 'token the grey';
                                newName = 'token the white';
                                token = server.create('token', { name: oldName });
                                _context6.next = 6;
                                return (0, _testHelpers.visit)('/settings/tokens');

                            case 6:
                                link = '[data-test-token-link=\'' + token.id + '\']';

                                assert.dom(link).exists({ count: 1 });
                                assert.dom(link).containsText(oldName);
                                _context6.next = 11;
                                return (0, _testHelpers.click)(link);

                            case 11:
                                input = '[data-test-token-name] input';
                                _context6.next = 14;
                                return (0, _testHelpers.waitFor)(input + ':enabled');

                            case 14:
                                assert.equal((0, _testHelpers.currentURL)(), '/settings/tokens/' + token.id);
                                assert.dom(input).hasValue(oldName);
                                _context6.next = 18;
                                return (0, _testHelpers.fillIn)(input, newName);

                            case 18:
                                _context6.next = 20;
                                return (0, _testHelpers.click)('[data-test-save-token-button]');

                            case 20:
                                assert.equal((0, _testHelpers.currentURL)(), '/settings/tokens');
                                assert.dom(link).exists({ count: 1 });
                                assert.dom(link).containsText(newName);

                            case 23:
                            case 'end':
                                return _context6.stop();
                        }
                    }
                }, _callee6, undefined);
            }));

            return function (_x6) {
                return _ref6.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('delete token', function () {
            var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
                var _server$createList, _server$createList2, token, card;

                return regeneratorRuntime.wrap(function _callee7$(_context7) {
                    while (1) {
                        switch (_context7.prev = _context7.next) {
                            case 0:
                                server.create('user', 'loggedIn');
                                _server$createList = server.createList('token', 2), _server$createList2 = _slicedToArray(_server$createList, 1), token = _server$createList2[0];
                                _context7.next = 4;
                                return (0, _testHelpers.visit)('/settings/tokens');

                            case 4:
                                card = '[data-test-token-card=\'' + token.id + '\']';

                                assert.dom('[data-test-token-card]').exists({ count: 2 });
                                assert.dom(card).exists({ count: 1 });
                                _context7.next = 9;
                                return (0, _testHelpers.click)(card + ' [data-test-delete-button]');

                            case 9:
                                _context7.next = 11;
                                return (0, _testHelpers.click)('[data-test-confirm-delete]');

                            case 11:
                                assert.dom('[data-test-token-card]').exists({ count: 1 });
                                assert.dom(card).doesNotExist();

                            case 13:
                            case 'end':
                                return _context7.stop();
                        }
                    }
                }, _callee7, undefined);
            }));

            return function (_x7) {
                return _ref7.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/acceptance/verify-email-test', ['@ember/test-helpers', 'ember-cli-mirage/test-support/setup-mirage', 'ember-qunit', 'qunit'], function (_testHelpers, _setupMirage, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    function unverifiedEmails(user) {
        return user.emails.models.filter(function (email) {
            return !email.verified;
        }).sort(function (a, b) {
            return parseInt(b.id, 10) - parseInt(a.id, 10);
        });
    }
    (0, _qunit.module)('Acceptance | verify email', function (hooks) {
        (0, _emberQunit.setupApplicationTest)(hooks);
        (0, _setupMirage.default)(hooks);
        (0, _qunit.test)('no unverified emails', function () {
            var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                server.create('user', 'loggedIn');
                                _context.next = 3;
                                return (0, _testHelpers.visit)('/dashboard');

                            case 3:
                                assert.dom('[data-test-verify-email-prompt]').doesNotExist();

                            case 4:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, undefined);
            }));

            return function (_x) {
                return _ref.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('verify email', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
                var user, beforeCount;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                user = server.create('user', 'loggedIn', 'withUnverifiedEmail');
                                beforeCount = user.emails.length;
                                _context2.next = 4;
                                return (0, _testHelpers.visit)('/dashboard');

                            case 4:
                                assert.dom('[data-test-verify-email-prompt]').exists();
                                _context2.next = 7;
                                return (0, _testHelpers.click)('[data-test-verify-email]');

                            case 7:
                                user.reload();
                                assert.dom('[data-test-verify-email-prompt').doesNotExist();
                                assert.equal(user.emails.length, beforeCount, 'Correct number of user emails');
                                assert.ok(user.emails.models.every(function (email) {
                                    return email.verified;
                                }), 'All user emails verified');

                            case 11:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, undefined);
            }));

            return function (_x2) {
                return _ref2.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('verify emails', function () {
            var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
                var user, beforeCount, emails, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, unverifiedEmail, emailAddress;

                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                user = server.create('user', 'loggedIn', 'withUnverifiedEmail');
                                beforeCount = user.emails.length;
                                _context3.next = 4;
                                return (0, _testHelpers.visit)('/dashboard');

                            case 4:
                                emails = unverifiedEmails(user);
                                _iteratorNormalCompletion = true;
                                _didIteratorError = false;
                                _iteratorError = undefined;
                                _context3.prev = 8;
                                _iterator = emails[Symbol.iterator]();

                            case 10:
                                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                                    _context3.next = 19;
                                    break;
                                }

                                unverifiedEmail = _step.value;
                                emailAddress = unverifiedEmail.emailAddress;

                                assert.dom('[data-test-verify-email-prompt]').hasText(unverifiedEmail.isMerge ? 'Would you like to merge ' + emailAddress + ' into your account? This action is irreversible.' : 'Would you like to add ' + emailAddress + ' to your account?');
                                _context3.next = 16;
                                return (0, _testHelpers.click)('[data-test-verify-email]');

                            case 16:
                                _iteratorNormalCompletion = true;
                                _context3.next = 10;
                                break;

                            case 19:
                                _context3.next = 25;
                                break;

                            case 21:
                                _context3.prev = 21;
                                _context3.t0 = _context3['catch'](8);
                                _didIteratorError = true;
                                _iteratorError = _context3.t0;

                            case 25:
                                _context3.prev = 25;
                                _context3.prev = 26;

                                if (!_iteratorNormalCompletion && _iterator.return) {
                                    _iterator.return();
                                }

                            case 28:
                                _context3.prev = 28;

                                if (!_didIteratorError) {
                                    _context3.next = 31;
                                    break;
                                }

                                throw _iteratorError;

                            case 31:
                                return _context3.finish(28);

                            case 32:
                                return _context3.finish(25);

                            case 33:
                                user.reload();
                                assert.dom('[data-test-verify-email-prompt').doesNotExist();
                                assert.equal(user.emails.length, beforeCount, 'Correct number of user emails');
                                assert.ok(user.emails.models.every(function (email) {
                                    return email.verified;
                                }), 'All user emails verified');

                            case 37:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, undefined, [[8, 21, 25, 33], [26,, 28, 32]]);
            }));

            return function (_x3) {
                return _ref3.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('deny email', function () {
            var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
                var user, beforeCount;
                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                user = server.create('user', 'loggedIn', 'withUnverifiedEmail');
                                // @ts-ignore TODO: upgrade ember types

                                beforeCount = user.emails.length;
                                _context4.next = 4;
                                return (0, _testHelpers.visit)('/dashboard');

                            case 4:
                                assert.dom('[data-test-verify-email-prompt]').exists();
                                _context4.next = 7;
                                return (0, _testHelpers.click)('[data-test-deny-email]');

                            case 7:
                                user.reload();
                                assert.dom('[data-test-verify-email-prompt').doesNotExist();
                                assert.equal(user.emails.length, beforeCount - 1, 'Correct number of user emails');
                                assert.ok(user.emails.models.every(function (email) {
                                    return email.verified;
                                }), 'All user emails verified');

                            case 11:
                            case 'end':
                                return _context4.stop();
                        }
                    }
                }, _callee4, undefined);
            }));

            return function (_x4) {
                return _ref4.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('deny emails', function () {
            var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
                var user, beforeCount, emails, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, unverifiedEmail, emailAddress, isMerge;

                return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                        switch (_context5.prev = _context5.next) {
                            case 0:
                                user = server.create('user', 'loggedIn', 'withUnverifiedEmails');
                                // @ts-ignore TODO: upgrade ember types

                                beforeCount = user.emails.length;
                                _context5.next = 4;
                                return (0, _testHelpers.visit)('/dashboard');

                            case 4:
                                emails = unverifiedEmails(user);
                                _iteratorNormalCompletion2 = true;
                                _didIteratorError2 = false;
                                _iteratorError2 = undefined;
                                _context5.prev = 8;
                                _iterator2 = emails[Symbol.iterator]();

                            case 10:
                                if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                                    _context5.next = 19;
                                    break;
                                }

                                unverifiedEmail = _step2.value;
                                emailAddress = unverifiedEmail.emailAddress, isMerge = unverifiedEmail.isMerge;

                                assert.dom('[data-test-verify-email-prompt]').hasText(isMerge ? 'Would you like to merge ' + emailAddress + ' into your account? This action is irreversible.' : 'Would you like to add ' + emailAddress + ' to your account?');
                                _context5.next = 16;
                                return (0, _testHelpers.click)('[data-test-deny-email]');

                            case 16:
                                _iteratorNormalCompletion2 = true;
                                _context5.next = 10;
                                break;

                            case 19:
                                _context5.next = 25;
                                break;

                            case 21:
                                _context5.prev = 21;
                                _context5.t0 = _context5['catch'](8);
                                _didIteratorError2 = true;
                                _iteratorError2 = _context5.t0;

                            case 25:
                                _context5.prev = 25;
                                _context5.prev = 26;

                                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                    _iterator2.return();
                                }

                            case 28:
                                _context5.prev = 28;

                                if (!_didIteratorError2) {
                                    _context5.next = 31;
                                    break;
                                }

                                throw _iteratorError2;

                            case 31:
                                return _context5.finish(28);

                            case 32:
                                return _context5.finish(25);

                            case 33:
                                user.reload();
                                assert.dom('[data-test-verify-email-prompt').doesNotExist();
                                assert.equal(user.emails.length, beforeCount - 2, 'Correct number of user emails');
                                assert.ok(user.emails.models.every(function (email) {
                                    return email.verified;
                                }), 'All user emails verified');

                            case 37:
                            case 'end':
                                return _context5.stop();
                        }
                    }
                }, _callee5, undefined, [[8, 21, 25, 33], [26,, 28, 32]]);
            }));

            return function (_x5) {
                return _ref5.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/components/ember-ace', ['exports', 'ember-ace/test-support/components/ember-ace'], function (exports, _emberAce) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _emberAce.default;
    }
  });
});

define('ember-a11y-testing/test-support/audit-if', ['exports', 'ember-a11y-testing/test-support/audit', 'ember-a11y-testing/test-support/utils'], function (exports, _audit, _utils) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = a11yAuditIf;


  /**
   * A method to return the value of queryParameter
   *
   * @method getUrlParameter
   * @private
   */
  function getUrlParameter(name) {
    var location = _utils.default.getLocation();
    var regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
    var results = regex.exec(location.search);
    return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
  };

  /**
   * A wrapper method to run the a11yAudit if desired
   *
   * @method a11yAuditIf
   * @public
   */
  function a11yAuditIf() {
    if (getUrlParameter('enableA11yAudit') === 'true') {
      return _audit.default.apply(undefined, arguments);
    }

    return Ember.RSVP.resolve(undefined, 'a11y audit not run');
  }
});
define('ember-a11y-testing/test-support/audit', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = a11yAudit;

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  };

  /**
   * Processes the results of calling axe.a11yCheck. If there are any
   * violations, it throws an error and then logs them individually.
   * @param {Object} results
   * @return {Void}
   */
  function a11yAuditCallback(results) {
    var violations = results.violations;

    if (violations.length) {
      Ember.Logger.error('ACCESSIBILITY VIOLATIONS: ' + violations.length);

      for (var i = 0, l = violations.length; i < l; i++) {
        var violation = violations[i];
        var violationNodes = violation.nodes.map(function (node) {
          return node.html;
        });

        Ember.Logger.warn(violation.impact.toUpperCase() + ': ' + violation.help);
        Ember.Logger.info('Offending markup (' + violation.nodes.length + ')');
        Ember.Logger.debug(violationNodes);
        Ember.Logger.info('Additional info: ' + violation.helpUrl);
        Ember.Logger.info('-------------------------------------');
      }

      (true && !(false) && Ember.assert('The page should have no accessibility violations. Please check the developer console for more details.'));
    }
  }

  /**
   * Determines if an object is a plain object (as opposed to a jQuery or other
   * type of object).
   * @param {Object} obj
   * @return {Boolean}
   */
  function isPlainObj(obj) {
    return (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) == 'object' && obj.constructor == Object;
  }

  /**
   * Runs the axe a11y audit with the given context selector and options.
   * The context defaults to '#ember-testing-container' if not specified.
   * The options default axe-core defaults.
   *
   * @method runA11yAudit
   * @private
   */
  function runA11yAudit() {
    var contextSelector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '#ember-testing-container';
    var auditOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    // Support passing axeOptions as a single argument
    if (arguments.length === 1 && isPlainObj(contextSelector)) {
      auditOptions = contextSelector;
      contextSelector = '#ember-testing-container';
    }

    document.body.classList.add('axe-running');

    var auditPromise = new Ember.RSVP.Promise(function (resolve, reject) {
      axe.run(contextSelector, auditOptions, function (error, result) {
        if (!error) {
          return resolve(result);
        } else {
          return reject(error);
        }
      });
    });

    return auditPromise.then(a11yAuditCallback).finally(function () {
      return document.body.classList.remove('axe-running');
    });
  }

  // Register an async helper to use in acceptance tests
  Ember.Test.registerAsyncHelper('a11yAudit', function (app) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    return runA11yAudit.apply(undefined, args);
  });

  /**
   * A wrapper method to run the async a11yAudit test helper if in an acceptance
   * testing situation, but also supports being used in integration/unit test
   * scenarios.
   *
   * @method a11yAudit
   * @public
   */
  function a11yAudit() {
    if (window.a11yAudit) {
      var _window;

      return (_window = window).a11yAudit.apply(_window, arguments);
    }

    return runA11yAudit.apply(undefined, arguments);
  }
});
define("ember-a11y-testing/test-support/utils", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    getLocation: function getLocation() {
      return window && window.location;
    }
  };
});
define('ember-ace/test-support/components/ember-ace', ['exports', 'ember-cli-page-object', 'ember-ace/test-support/helpers/editor-interaction', 'ember-ace/test-support/components/ember-ace/line', 'ember-ace/test-support/components/ember-ace/marker', 'ember-ace/test-support/components/ember-ace/annotation', 'ember-ace/test-support/components/ember-ace/autocomplete'], function (exports, _emberCliPageObject, _editorInteraction, _line, _marker, _annotation, _autocomplete) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    /**
     * The current text value of the entire contents of the editor, with any
     * leading or trailing whitespace removed.
     */
    value: {
      isDescriptor: true,
      get: (0, _editorInteraction.default)(function (editor) {
        return editor.getValue();
      })
    },

    /**
     * Update the current value of this editor.
     */
    setValue: (0, _editorInteraction.default)(function (editor, value) {
      editor.setValue(value, 1);
      editor.renderer.updateFull(true);
    }),

    /**
     * Moves the cursor to the given position.
     */
    moveCursorTo: (0, _editorInteraction.default)(function (editor, row, column) {
      editor.moveCursorTo(row, column);
    }),

    /**
     * A collection of lines making up the editor contents.
     */
    lines: (0, _emberCliPageObject.collection)({
      itemScope: '.ace_line',
      item: _line.default
    }),

    /**
     * The autocomplete dropdown box.
     */
    autocomplete: _autocomplete.default,

    /**
     * A collection of line gutter annotations.
     */
    annotations: (0, _emberCliPageObject.collection)({
      itemScope: '.ace_gutter-cell:not([class$=" "])',
      item: _annotation.default
    }),

    /**
     * A collection of markers overlaying text.
     */
    frontMarkers: (0, _emberCliPageObject.collection)({
      scope: '.ace_layer:nth-child(4)',
      itemScope: '.ace_start',
      item: _marker.default
    }),

    /**
     * A collection of markers underlaying text.
     */
    backMarkers: (0, _emberCliPageObject.collection)({
      scope: '.ace_layer:nth-child(2)',
      itemScope: '.ace_start:not(.ace_selection)',
      item: _marker.default
    })
  };
});
define('ember-ace/test-support/components/ember-ace/annotation', ['exports', 'ember-cli-page-object'], function (exports, _emberCliPageObject) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    /**
     * The type of annotation this is, typically one of 'info', 'warning', or 'error'.
     */
    type: {
      isDescriptor: true,
      get: function get() {
        var classes = (0, _emberCliPageObject.findElementWithAssert)(this).attr('class').split(/\s+/);
        return classes[classes.length - 1].replace(/^ace_/, '');
      }
    },

    /**
     * The 0-indexed row number of this annotation.
     */
    row: {
      isDescriptor: true,
      get: function get() {
        var el = (0, _emberCliPageObject.findElementWithAssert)(this)[0];
        return [].slice.call(el.parentElement.children).indexOf(el);
      }
    }
  };
});
define('ember-ace/test-support/components/ember-ace/autocomplete', ['exports', 'ember-ace/test-support/helpers/poll-condition', 'ember-ace/test-support/helpers/editor-interaction', 'ember-cli-page-object'], function (exports, _pollCondition, _editorInteraction, _emberCliPageObject) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.tooltip = exports.suggestion = undefined;


  /**
   * A suggestion in the autocomplete list, with a caption on the left
   * and metadata on the right.
   */
  var suggestion = exports.suggestion = {
    selected: (0, _emberCliPageObject.is)('.ace_selected'),

    caption: {
      isDescriptor: true,
      get: function get() {
        return this.text.slice(0, -this.meta.length);
      }
    },

    meta: (0, _emberCliPageObject.text)('.ace_rightAlignedText')
  };

  /**
   * A rendered tooltip for the focused suggestion in the autocomplete dropdown.
   */
  var tooltip = exports.tooltip = {
    resetScope: true,
    testContainer: 'body',
    scope: '.ace_doc-tooltip'
  };

  exports.default = {
    isVisible: (0, _emberCliPageObject.isVisible)('.ace_autocomplete', { testContainer: 'body' }),

    /**
     * Trigger a request for autocomplete suggestions.
     */
    trigger: (0, _editorInteraction.default)(function (editor) {
      var _this = this;

      editor.execCommand('startAutocomplete');
      return (0, _pollCondition.default)('autocomplete visible', function () {
        return _this.isVisible;
      });
    }),

    /**
     * Clear the open autocomplete suggestions list, if present.
     */
    close: (0, _editorInteraction.default)(function (editor) {
      return editor.completer.detach();
    }),

    /**
     * Focus the next suggestion in the list.
     */
    focusNext: (0, _editorInteraction.default)(function (editor) {
      var _this2 = this;

      var index = this.focusedIndex;
      editor.completer.goTo('down');
      return (0, _pollCondition.default)('next suggestion focused', function () {
        return _this2.focusedIndex === index + 1;
      });
    }),

    /**
     * Focus the previous suggestion in the list.
     */
    focusPrevious: (0, _editorInteraction.default)(function (editor) {
      var _this3 = this;

      var index = this.focusedIndex;
      editor.completer.goTo('up');
      return (0, _pollCondition.default)('previous suggestion focused', function () {
        return _this3.focusedIndex === index - 1;
      });
    }),

    /**
     * Select the highlighted suggestion for insertion.
     */
    selectFocused: (0, _editorInteraction.default)(function (editor) {
      return editor.completer.insertMatch();
    }),

    /**
     * The index of the currently-highlighted selection
     */
    focusedIndex: {
      isDescriptor: true,
      get: function get() {
        for (var i = 0, len = this.suggestions().count; i < len; i++) {
          if (this.suggestions(i).selected) {
            return i;
          }
        }
        return -1;
      }
    },

    /**
     * The currently-highlighted suggestion.
     */
    focusedSuggestion: {
      isDescriptor: true,
      get: function get() {
        return this.suggestions(this.focusedIndex);
      }
    },

    /**
     * The list of active suggestions.
     */
    suggestions: (0, _emberCliPageObject.collection)({
      resetScope: true,
      testContainer: 'body',
      scope: '.ace_autocomplete',
      itemScope: '.ace_line',
      item: suggestion
    }),

    /**
     * The active suggestion tooltip.
     */
    tooltip: tooltip
  };
});
define('ember-ace/test-support/components/ember-ace/line', ['exports', 'ember-cli-page-object', 'ember-ace/test-support/components/ember-ace/token'], function (exports, _emberCliPageObject, _token) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    /**
     * The text value of this entire line.
     */
    text: (0, _emberCliPageObject.text)(null, { normalize: false }),

    /**
     * A collection of tokens from which this line is composed.
     */
    tokens: (0, _emberCliPageObject.collection)({
      itemScope: '>',
      item: _token.default
    })
  };
});
define('ember-ace/test-support/components/ember-ace/marker', ['exports', 'ember-cli-page-object'], function (exports, _emberCliPageObject) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    /**
     * The type of marker this is, as designated by the specified `class` for the marker.
     */
    type: {
      isDescriptor: true,
      get: function get() {
        return (0, _emberCliPageObject.findElementWithAssert)(this).attr('class').split(/\s+/)[0];
      }
    },

    /**
     * The number of segments this marker is composed from. Typically a marker will have
     * one segment per document line that it spans.
     */
    segmentCount: {
      isDescriptor: true,
      get: function get() {
        var type = this.type;
        var sibling = (0, _emberCliPageObject.findElementWithAssert)(this)[0];
        var count = 1;

        while (sibling = sibling.nextElementSibling) {
          if (!sibling.classList.contains(type) || sibling.classList.contains('ace_start')) {
            break;
          }
          count++;
        }

        return count;
      }
    }
  };
});
define('ember-ace/test-support/components/ember-ace/token', ['exports', 'ember-cli-page-object'], function (exports, _emberCliPageObject) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    /**
     * The text value of this token
     */
    text: (0, _emberCliPageObject.text)(null, { normalize: false }),

    /**
     * The type of this token, as specified by the Ace tokenizer,
     * e.g. `variable` or `punctuation.operator`.
     *
     * See https://github.com/ajaxorg/ace/wiki/Creating-or-Extending-an-Edit-Mode#common-tokens
     */
    type: {
      isDescriptor: true,
      get: function get() {
        var $el = (0, _emberCliPageObject.findElementWithAssert)(this);
        var classes = $el.attr('class').split(/\s+/);
        return classes.map(function (cls) {
          return cls.replace(/^ace_/, '');
        }).join('.');
      }
    }
  };
});
define('ember-ace/test-support/helpers/editor-interaction', ['exports', 'ember-cli-page-object'], function (exports, _emberCliPageObject) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = editorInteraction;
  function editorInteraction(callback) {
    return function () {
      var $pre = (0, _emberCliPageObject.findElementWithAssert)(this, 'pre');
      return callback.call.apply(callback, [this, $pre[0].env.editor].concat(Array.prototype.slice.call(arguments)));
    };
  }
});
define('ember-ace/test-support/helpers/poll-condition', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  function _asyncToGenerator(fn) {
    return function () {
      var gen = fn.apply(this, arguments);
      return new Promise(function (resolve, reject) {
        function step(key, arg) {
          try {
            var info = gen[key](arg);
            var value = info.value;
          } catch (error) {
            reject(error);
            return;
          }

          if (info.done) {
            resolve(value);
          } else {
            return Promise.resolve(value).then(function (value) {
              step("next", value);
            }, function (err) {
              step("throw", err);
            });
          }
        }

        return step("next");
      });
    };
  }

  exports.default = function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(message, callback) {
      var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
          _ref2$maxTries = _ref2.maxTries,
          maxTries = _ref2$maxTries === undefined ? 50 : _ref2$maxTries,
          _ref2$interval = _ref2.interval,
          interval = _ref2$interval === undefined ? 5 : _ref2$interval;

      var tries, result;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              tries = 0;

            case 1:
              if (!(tries < maxTries)) {
                _context.next = 15;
                break;
              }

              _context.prev = 2;
              result = callback();

              if (!result) {
                _context.next = 6;
                break;
              }

              return _context.abrupt('return', result);

            case 6:
              _context.next = 10;
              break;

            case 8:
              _context.prev = 8;
              _context.t0 = _context['catch'](2);

            case 10:
              _context.next = 12;
              return new Ember.RSVP.Promise(function (resolve) {
                return setTimeout(resolve, interval);
              });

            case 12:
              tries++;
              _context.next = 1;
              break;

            case 15:
              throw new Error('Condition failed to come true: ' + message);

            case 16:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, this, [[2, 8]]);
    }));

    function pollCondition(_x2, _x3) {
      return _ref.apply(this, arguments);
    }

    return pollCondition;
  }();
});
define('ember-asset-loader/test-support/loaded-asset-state', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getLoadedAssetState = getLoadedAssetState;
  exports.cacheLoadedAssetState = cacheLoadedAssetState;
  exports.resetLoadedAssetState = resetLoadedAssetState;


  var cachedRequireEntries = void 0;
  var cachedScriptTags = void 0;
  var cachedLinkTags = void 0;

  /**
   * Determines whether an array contains the provided item.
   *
   * @param {Array} array
   * @param {Any} item
   * @return {Boolean}
   */
  function has(array, item) {
    return array.indexOf(item) !== -1;
  }

  /**
   * Removes a DOM Node from the document.
   *
   * @param {Node} node
   * @return {Void}
   */
  function removeNode(node) {
    node.parentNode.removeChild(node);
  }

  /**
   * Converts an iterable object into an actual Array.
   *
   * @param {Iterable} iterable
   * @return {Array}
   */
  function toArray(iterable) {
    return Array.prototype.slice.call(iterable);
  }

  /**
   * Returns all of the HTML Elements matching a given selector as an array.
   *
   * @param {String} selector
   * @return {Array<HTMLElement>}
   */
  function getAll(selector) {
    var htmlCollection = document.querySelectorAll(selector);
    return toArray(htmlCollection);
  }

  /**
   * Deletes an entry from require's list of modules.
   *
   * @param {String} entry
   * @return {Void}
   */
  function resetRequireEntry(entry) {
    delete requirejs.entries[entry];
  }

  /**
   * Compares two arrays, if they're different, invokes a callback for each
   * entry that does not appear in the initial array.
   *
   * @param {Array} initial
   * @param {Array} current
   * @param {Function} diffHandler
   * @return {Void}
   */
  function compareAndIterate(initial, current, diffHandler) {
    if (initial.length < current.length) {
      for (var i = 0; i < current.length; i++) {
        var entry = current[i];
        if (!has(initial, entry)) {
          diffHandler(entry);
        }
      }
    }
  }

  /**
   * Gets the current loaded asset state including scripts, links, and require
   * modules.
   *
   * @return {Object}
   */
  function getLoadedAssetState() {
    return {
      requireEntries: Object.keys(requirejs.entries),
      scripts: getAll('script'),
      links: getAll('link')
    };
  }

  /**
   * Caches the current loaded asset state with regards to links, scripts, and JS
   * modules currently present.
   *
   * @return {Void}
   */
  function cacheLoadedAssetState() {
    var _getLoadedAssetState = getLoadedAssetState();

    cachedRequireEntries = _getLoadedAssetState.requireEntries;
    cachedScriptTags = _getLoadedAssetState.scripts;
    cachedLinkTags = _getLoadedAssetState.links;
  }

  /**
   * Restores the loaded asset state to the previous cached value with regards to
   * links, scripts, and JS modules.
   *
   * @return {Void}
   */
  function resetLoadedAssetState() {
    Ember.Logger.info('Resetting loaded asset state. This will attempt to restore the state of loaded assets to the last cached value. If an asset modified some global state, we cannot guarantee it will be reset. For more information see: https://github.com/trentmwillis/ember-asset-loader#resetting-test-state');

    var _getLoadedAssetState2 = getLoadedAssetState(),
        currentRequireEntries = _getLoadedAssetState2.requireEntries,
        currentScriptTags = _getLoadedAssetState2.scripts,
        currentLinkTags = _getLoadedAssetState2.links;

    compareAndIterate(cachedRequireEntries, currentRequireEntries, resetRequireEntry);
    compareAndIterate(cachedScriptTags, currentScriptTags, removeNode);
    compareAndIterate(cachedLinkTags, currentLinkTags, removeNode);
  }
});
define('ember-asset-loader/test-support/preload-assets', ['exports', 'ember-asset-loader/services/asset-loader'], function (exports, _assetLoader) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = preloadAssets;
  var Test = Ember.Test,
      RSVP = Ember.RSVP;


  /**
   * Preloads all the bundles specified in an asset manifest
   * to make sure all files are available for testing.
   *
   * Uses the Ember.Test.Promise class to make sure tests
   * wait for the assets to load first.
   *
   * @return {Promise}
   */
  function preloadAssets(manifest) {
    var loader = _assetLoader.default.create();
    loader.pushManifest(manifest);

    var bundlePromises = Object.keys(manifest.bundles).map(function (bundle) {
      return loader.loadBundle(bundle);
    });
    var allBundles = RSVP.all(bundlePromises);

    return Test.resolve(allBundles);
  }
});
define('ember-basic-dropdown/test-support/helpers', ['exports', '@ember/test-helpers'], function (exports, _testHelpers) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.nativeTap = nativeTap;
  exports.clickTrigger = clickTrigger;
  exports.tapTrigger = tapTrigger;
  exports.fireKeydown = fireKeydown;

  exports.default = function () {
    Ember.Test.registerAsyncHelper('clickDropdown', function (app, cssPath) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      (true && !(false) && Ember.deprecate('Using the global `clickDropdown` acceptance helper from ember-basic-dropdown is deprecated. Please, explicitly import the `clickTrigger` or just use `click` helper from `@ember/test-helpers`.', false, { until: '1.0.0', id: 'ember-basic-dropdown-click-dropdown' }));

      clickTrigger(cssPath, options);
    });

    Ember.Test.registerAsyncHelper('tapDropdown', function (app, cssPath) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      (true && !(false) && Ember.deprecate('Using the global `tapDropdown` acceptance helper from ember-basic-dropdown is deprecated. Please, explicitly import the `tapTrigger` or just use `tap` helper from `@ember/test-helpers`.', false, { until: '1.0.0', id: 'ember-basic-dropdown-click-dropdown' }));

      tapTrigger(cssPath, options);
    });
  };

  function nativeTap(selector) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var touchStartEvent = new window.Event('touchstart', { bubbles: true, cancelable: true, view: window });
    Object.keys(options).forEach(function (key) {
      return touchStartEvent[key] = options[key];
    });
    Ember.run(function () {
      return document.querySelector(selector).dispatchEvent(touchStartEvent);
    });
    var touchEndEvent = new window.Event('touchend', { bubbles: true, cancelable: true, view: window });
    Object.keys(options).forEach(function (key) {
      return touchEndEvent[key] = options[key];
    });
    Ember.run(function () {
      return document.querySelector(selector).dispatchEvent(touchEndEvent);
    });
  }

  function clickTrigger(scope) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var selector = '.ember-basic-dropdown-trigger';
    if (scope) {
      var element = document.querySelector(scope);
      if (element.classList.contains('ember-basic-dropdown-trigger')) {
        selector = scope;
      } else {
        selector = scope + ' ' + selector;
      }
    }
    (0, _testHelpers.click)(selector, options);
    return (0, _testHelpers.settled)();
  }

  function tapTrigger(scope) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var selector = '.ember-basic-dropdown-trigger';
    if (scope) {
      selector = scope + ' ' + selector;
    }
    nativeTap(selector, options);
  }

  function fireKeydown(selector, k) {
    var oEvent = document.createEvent('Events');
    oEvent.initEvent('keydown', true, true);
    Ember.merge(oEvent, {
      view: window,
      ctrlKey: false,
      altKey: false,
      shiftKey: false,
      metaKey: false,
      keyCode: k,
      charCode: k
    });
    Ember.run(function () {
      return document.querySelector(selector).dispatchEvent(oEvent);
    });
  }

  // acceptance helpers
});
define('ember-cli-mirage/test-support/setup-mirage', ['exports', 'ember-cli-mirage/start-mirage', '@ember/test-helpers'], function (exports, _startMirage, _testHelpers) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = setupMirage;


  //
  // Used to set up mirage for a test. Must be called after one of the
  // `ember-qunit` `setup*Test()` methods. It starts the server and sets
  // `this.server` to point to it, and shuts the server down when the test
  // finishes.
  //
  // NOTE: the `hooks = self` is for mocha support
  //
  function setupMirage() {
    var hooks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self;

    hooks.beforeEach(function () {
      if (!this.owner) {
        throw new Error('You must call one of the ember-qunit setupTest(),' + ' setupRenderingTest() or setupApplicationTest() methods before' + ' calling setupMirage()');
      }

      this.server = (0, _startMirage.default)(this.owner);
    });

    hooks.afterEach(function () {
      var _this = this;

      return (0, _testHelpers.settled)().then(function () {
        if (_this.server) {
          _this.server.shutdown();
          delete _this.server;
        }
      });
    });
  }
});
define('ember-cli-qunit', ['exports', 'ember-qunit'], function (exports, _emberQunit) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'TestLoader', {
    enumerable: true,
    get: function () {
      return _emberQunit.TestLoader;
    }
  });
  Object.defineProperty(exports, 'setupTestContainer', {
    enumerable: true,
    get: function () {
      return _emberQunit.setupTestContainer;
    }
  });
  Object.defineProperty(exports, 'loadTests', {
    enumerable: true,
    get: function () {
      return _emberQunit.loadTests;
    }
  });
  Object.defineProperty(exports, 'startTests', {
    enumerable: true,
    get: function () {
      return _emberQunit.startTests;
    }
  });
  Object.defineProperty(exports, 'setupTestAdapter', {
    enumerable: true,
    get: function () {
      return _emberQunit.setupTestAdapter;
    }
  });
  Object.defineProperty(exports, 'start', {
    enumerable: true,
    get: function () {
      return _emberQunit.start;
    }
  });
});
define('ember-cli-test-loader/test-support/index', ['exports'], function (exports) {
  /* globals requirejs, require */
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.addModuleIncludeMatcher = addModuleIncludeMatcher;
  exports.addModuleExcludeMatcher = addModuleExcludeMatcher;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var moduleIncludeMatchers = [];
  var moduleExcludeMatchers = [];

  function addModuleIncludeMatcher(fn) {
    moduleIncludeMatchers.push(fn);
  }

  function addModuleExcludeMatcher(fn) {
    moduleExcludeMatchers.push(fn);
  }

  function checkMatchers(matchers, moduleName) {
    return matchers.some(function (matcher) {
      return matcher(moduleName);
    });
  }

  var TestLoader = function () {
    _createClass(TestLoader, null, [{
      key: 'load',
      value: function load() {
        new TestLoader().loadModules();
      }
    }]);

    function TestLoader() {
      _classCallCheck(this, TestLoader);

      this._didLogMissingUnsee = false;
    }

    _createClass(TestLoader, [{
      key: 'shouldLoadModule',
      value: function shouldLoadModule(moduleName) {
        return moduleName.match(/[-_]test$/);
      }
    }, {
      key: 'listModules',
      value: function listModules() {
        return Object.keys(requirejs.entries);
      }
    }, {
      key: 'listTestModules',
      value: function listTestModules() {
        var moduleNames = this.listModules();
        var testModules = [];
        var moduleName = void 0;

        for (var i = 0; i < moduleNames.length; i++) {
          moduleName = moduleNames[i];

          if (checkMatchers(moduleExcludeMatchers, moduleName)) {
            continue;
          }

          if (checkMatchers(moduleIncludeMatchers, moduleName) || this.shouldLoadModule(moduleName)) {
            testModules.push(moduleName);
          }
        }

        return testModules;
      }
    }, {
      key: 'loadModules',
      value: function loadModules() {
        var testModules = this.listTestModules();
        var testModule = void 0;

        for (var i = 0; i < testModules.length; i++) {
          testModule = testModules[i];
          this.require(testModule);
          this.unsee(testModule);
        }
      }
    }, {
      key: 'require',
      value: function (_require) {
        function require(_x) {
          return _require.apply(this, arguments);
        }

        require.toString = function () {
          return _require.toString();
        };

        return require;
      }(function (moduleName) {
        try {
          require(moduleName);
        } catch (e) {
          this.moduleLoadFailure(moduleName, e);
        }
      })
    }, {
      key: 'unsee',
      value: function unsee(moduleName) {
        if (typeof require.unsee === 'function') {
          require.unsee(moduleName);
        } else if (!this._didLogMissingUnsee) {
          this._didLogMissingUnsee = true;
          if (typeof console !== 'undefined') {
            console.warn('unable to require.unsee, please upgrade loader.js to >= v3.3.0');
          }
        }
      }
    }, {
      key: 'moduleLoadFailure',
      value: function moduleLoadFailure(moduleName, error) {
        console.error('Error loading: ' + moduleName, error.stack);
      }
    }]);

    return TestLoader;
  }();

  exports.default = TestLoader;
  ;
});
define('ember-cookies/clear-all-cookies', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.default = function () {
    var cookies = document.cookie.split(';');

    cookies.forEach(function (cookie) {
      var cookieName = cookie.split('=')[0];

      document.cookie = cookieName + '=; expires=' + new Date(0).toUTCString();
    });
  };
});
define('ember-engines/test-support/engine-resolver-for', ['exports', 'ember-resolver'], function (exports, _emberResolver) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = engineResolverFor;


  /**
   * Gets the resolver class used by an Engine and creates an instance to be used
   * with test modules. Ex:
   *
   *   moduleForComponent('some-component', 'Integration Test', {
   *     resolver: engineResolverFor('ember-blog')
   *   });
   *
   * Uses the module found at `<engine-name>/resolver` as the class. If no module
   * exists at that path, then a default EmberResolver instance is created.
   *
   * You can optionally specify a modulePrefix in the event that the modulePrefix
   * differs from the engineName.
   *
   * @method engineResolverFor
   * @param {String} engineName
   * @param {String} [modulePrefix]
   * @return {Resolver}
   */
  function engineResolverFor(engineName) {
    var modulePrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : engineName;

    var Resolver = void 0;

    if (require.has(engineName + '/resolver')) {
      Resolver = require(engineName + '/resolver').default;
    } else {
      Resolver = _emberResolver.default;
    }
    return Resolver.create({ namespace: { modulePrefix: modulePrefix } });
  } /* global require */
});
define('ember-feature-flags/test-support/-private/enable-feature', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports._enableFeature = _enableFeature;
  function _enableFeature(owner, featureName) {
    var featuresService = owner.lookup('service:features');
    featuresService.enable(featureName);
  }
});
define('ember-feature-flags/test-support/helpers/with-feature', ['ember-feature-flags/test-support/-private/enable-feature'], function (_enableFeature2) {
  'use strict';

  Ember.Test.registerHelper('withFeature', function withFeature(app, featureName) {
    (0, _enableFeature2._enableFeature)(app.__deprecatedInstance__, featureName);
  });
});
define('ember-feature-flags/test-support/index', ['exports', '@ember/test-helpers', 'ember-feature-flags/test-support/-private/enable-feature'], function (exports, _testHelpers, _enableFeature2) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.enableFeature = enableFeature;
  function enableFeature(featureName) {
    var _getContext = (0, _testHelpers.getContext)(),
        owner = _getContext.owner;

    (0, _enableFeature2._enableFeature)(owner, featureName);
  }
});
define('ember-i18n/test-support/-private/t', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.default = function (owner, key, interpolations) {
    var i18n = owner.lookup('service:i18n');
    return i18n.t(key, interpolations);
  };
});
define('ember-i18n/test-support/index', ['exports', '@ember/test-helpers', 'ember-i18n/test-support/-private/t'], function (exports, _testHelpers, _t2) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.t = t;
  function t(key, interpolations) {
    var _getContext = (0, _testHelpers.getContext)(),
        owner = _getContext.owner;

    return (0, _t2.default)(owner, key, interpolations);
  }
});
define('ember-power-select/test-support/helpers', ['exports', '@ember/test-helpers', 'ember-power-select/test-support/index'], function (exports, _testHelpers, _index) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.clearSelected = exports.removeMultipleOption = exports.selectSearch = exports.selectChoose = exports.touchTrigger = exports.nativeTouch = exports.clickTrigger = exports.triggerKeydown = exports.nativeMouseUp = exports.nativeMouseDown = undefined;
  exports.findContains = findContains;
  exports.typeInSearch = typeInSearch;

  exports.default = function () {
    Ember.Test.registerAsyncHelper('selectChoose', function (_, cssPathOrTrigger, valueOrSelector, optionIndex) {
      (true && !(true) && Ember.deprecate('Using the implicit global async helper `selectChoose` is deprecated. Please, import it explicitly with `import { selectChoose } from "ember-power-select/test-support"`', true, { id: 'ember-power-select-global-select-choose', until: '2.0.0' }));

      return (0, _index.selectChoose)(cssPathOrTrigger, valueOrSelector, optionIndex);
    });

    Ember.Test.registerAsyncHelper('selectSearch', function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(app, cssPathOrTrigger, value) {
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                (true && !(true) && Ember.deprecate('Using the implicit global async helper `selectSearch` is deprecated. Please, import it explicitly with `import { selectSearch } from "ember-power-select/test-support"`', true, { id: 'ember-power-select-global-select-search', until: '2.0.0' }));
                return _context11.abrupt('return', (0, _index.selectSearch)(cssPathOrTrigger, value));

              case 2:
              case 'end':
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      return function (_x18, _x19, _x20) {
        return _ref11.apply(this, arguments);
      };
    }());

    Ember.Test.registerAsyncHelper('removeMultipleOption', function () {
      var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(app, cssPath, value) {
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                (true && !(true) && Ember.deprecate('Using the implicit global async helper `removeMultipleOption` is deprecated. Please, import it explicitly with `import { removeMultipleOption } from "ember-power-select/test-support"`', true, { id: 'ember-power-select-global-remove-multiple-option', until: '2.0.0' }));
                return _context12.abrupt('return', (0, _index.removeMultipleOption)(cssPath, value));

              case 2:
              case 'end':
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      return function (_x21, _x22, _x23) {
        return _ref12.apply(this, arguments);
      };
    }());

    Ember.Test.registerAsyncHelper('clearSelected', function () {
      var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(app, cssPath) {
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                (true && !(true) && Ember.deprecate('Using the implicit global async helper `clearSelected` is deprecated. Please, import it explicitly with `import { clearSelected } from "ember-power-select/test-support"`', true, { id: 'ember-power-select-global-clear-selected', until: '2.0.0' }));
                return _context13.abrupt('return', (0, _index.clearSelected)(cssPath));

              case 2:
              case 'end':
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      return function (_x24, _x25) {
        return _ref13.apply(this, arguments);
      };
    }());
  };

  function _asyncToGenerator(fn) {
    return function () {
      var gen = fn.apply(this, arguments);
      return new Promise(function (resolve, reject) {
        function step(key, arg) {
          try {
            var info = gen[key](arg);
            var value = info.value;
          } catch (error) {
            reject(error);
            return;
          }

          if (info.done) {
            resolve(value);
          } else {
            return Promise.resolve(value).then(function (value) {
              step("next", value);
            }, function (err) {
              step("throw", err);
            });
          }
        }

        return step("next");
      });
    };
  }

  /**
   * @private
   * @param {String} selector CSS3 selector of the elements to check the content
   * @param {String} text Substring that the selected element must contain
   * @returns HTMLElement The first element that maches the given selector and contains the
   *                      given text
   */
  function findContains(selector, text) {
    return [].slice.apply(document.querySelectorAll(selector)).filter(function (e) {
      return e.textContent.trim().indexOf(text) > -1;
    })[0];
  }

  var nativeMouseDown = exports.nativeMouseDown = function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(selectorOrDomElement, options) {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt('return', (0, _testHelpers.triggerEvent)(selectorOrDomElement, 'mousedown', options));

            case 1:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    return function nativeMouseDown(_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }();

  var nativeMouseUp = exports.nativeMouseUp = function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(selectorOrDomElement, options) {
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt('return', (0, _testHelpers.triggerEvent)(selectorOrDomElement, 'mouseup', options));

            case 1:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    return function nativeMouseUp(_x3, _x4) {
      return _ref2.apply(this, arguments);
    };
  }();

  var triggerKeydown = exports.triggerKeydown = function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(domElement, k) {
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt('return', (0, _testHelpers.triggerKeyEvent)(domElement, 'keydown', k));

            case 1:
            case 'end':
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    return function triggerKeydown(_x5, _x6) {
      return _ref3.apply(this, arguments);
    };
  }();

  function typeInSearch(scopeOrText, text) {
    var scope = '';

    if (typeof text === 'undefined') {
      text = scopeOrText;
    } else {
      scope = scopeOrText;
    }

    var selectors = ['.ember-power-select-search-input', '.ember-power-select-search input', '.ember-power-select-trigger-multiple-input', 'input[type="search"]'].map(function (selector) {
      return scope + ' ' + selector;
    }).join(', ');

    return (0, _testHelpers.fillIn)(selectors, text);
  }

  var clickTrigger = exports.clickTrigger = function () {
    var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(scope) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var selector;
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              selector = '.ember-power-select-trigger';

              if (scope) {
                selector = scope + ' ' + selector;
              }
              return _context4.abrupt('return', (0, _testHelpers.click)(selector, options));

            case 3:
            case 'end':
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    return function clickTrigger(_x8) {
      return _ref4.apply(this, arguments);
    };
  }();

  var nativeTouch = exports.nativeTouch = function () {
    var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(selectorOrDomElement) {
      return regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              (0, _testHelpers.triggerEvent)(selectorOrDomElement, 'touchstart');
              return _context5.abrupt('return', (0, _testHelpers.triggerEvent)(selectorOrDomElement, 'touchend'));

            case 2:
            case 'end':
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    return function nativeTouch(_x9) {
      return _ref5.apply(this, arguments);
    };
  }();

  var touchTrigger = exports.touchTrigger = function () {
    var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
      return regeneratorRuntime.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              return _context6.abrupt('return', nativeTouch('.ember-power-select-trigger'));

            case 1:
            case 'end':
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    return function touchTrigger() {
      return _ref6.apply(this, arguments);
    };
  }();

  var selectChoose = exports.selectChoose = function () {
    var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(cssPathOrTrigger, valueOrSelector, optionIndex) {
      return regeneratorRuntime.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              return _context7.abrupt('return', (0, _index.selectChoose)(cssPathOrTrigger, valueOrSelector, optionIndex));

            case 1:
            case 'end':
              return _context7.stop();
          }
        }
      }, _callee7, this);
    }));

    return function selectChoose(_x10, _x11, _x12) {
      return _ref7.apply(this, arguments);
    };
  }();

  var selectSearch = exports.selectSearch = function () {
    var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(cssPathOrTrigger, value) {
      return regeneratorRuntime.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              return _context8.abrupt('return', (0, _index.selectSearch)(cssPathOrTrigger, value));

            case 1:
            case 'end':
              return _context8.stop();
          }
        }
      }, _callee8, this);
    }));

    return function selectSearch(_x13, _x14) {
      return _ref8.apply(this, arguments);
    };
  }();

  var removeMultipleOption = exports.removeMultipleOption = function () {
    var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(cssPath, value) {
      return regeneratorRuntime.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              return _context9.abrupt('return', (0, _index.removeMultipleOption)(cssPath, value));

            case 1:
            case 'end':
              return _context9.stop();
          }
        }
      }, _callee9, this);
    }));

    return function removeMultipleOption(_x15, _x16) {
      return _ref9.apply(this, arguments);
    };
  }();

  var clearSelected = exports.clearSelected = function () {
    var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(cssPath) {
      return regeneratorRuntime.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              return _context10.abrupt('return', (0, _index.clearSelected)(cssPath));

            case 1:
            case 'end':
              return _context10.stop();
          }
        }
      }, _callee10, this);
    }));

    return function clearSelected(_x17) {
      return _ref10.apply(this, arguments);
    };
  }();
});
define('ember-power-select/test-support/index', ['exports', '@ember/test-helpers'], function (exports, _testHelpers) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.clearSelected = exports.removeMultipleOption = exports.selectSearch = exports.selectChoose = undefined;

  function _asyncToGenerator(fn) {
    return function () {
      var gen = fn.apply(this, arguments);
      return new Promise(function (resolve, reject) {
        function step(key, arg) {
          try {
            var info = gen[key](arg);
            var value = info.value;
          } catch (error) {
            reject(error);
            return;
          }

          if (info.done) {
            resolve(value);
          } else {
            return Promise.resolve(value).then(function (value) {
              step("next", value);
            }, function (err) {
              step("throw", err);
            });
          }
        }

        return step("next");
      });
    };
  }

  var selectChoose = exports.selectChoose = function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(cssPathOrTrigger, valueOrSelector, optionIndex) {
      var trigger, target, contentId, content, options, potentialTargets, filteredTargets;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              trigger = void 0, target = void 0;

              if (!(cssPathOrTrigger instanceof HTMLElement)) {
                _context.next = 5;
                break;
              }

              if (cssPathOrTrigger.classList.contains('ember-power-select-trigger')) {
                trigger = cssPathOrTrigger;
              } else {
                trigger = cssPathOrTrigger.querySelector('.ember-power-select-trigger');
              }
              _context.next = 9;
              break;

            case 5:
              trigger = document.querySelector(cssPathOrTrigger + ' .ember-power-select-trigger');

              if (!trigger) {
                trigger = document.querySelector(cssPathOrTrigger);
              }

              if (trigger) {
                _context.next = 9;
                break;
              }

              throw new Error('You called "selectChoose(\'' + cssPathOrTrigger + '\', \'' + valueOrSelector + '\')" but no select was found using selector "' + cssPathOrTrigger + '"');

            case 9:

              if (trigger.scrollIntoView) {
                trigger.scrollIntoView();
              }

              contentId = '' + trigger.attributes['aria-owns'].value;
              content = document.querySelector('#' + contentId);
              // If the dropdown is closed, open it

              if (!(!content || content.classList.contains('ember-basic-dropdown-content-placeholder'))) {
                _context.next = 17;
                break;
              }

              _context.next = 15;
              return (0, _testHelpers.click)(trigger);

            case 15:
              _context.next = 17;
              return (0, _testHelpers.settled)();

            case 17:

              // Select the option with the given text
              options = document.querySelectorAll('#' + contentId + ' .ember-power-select-option');
              potentialTargets = [].slice.apply(options).filter(function (opt) {
                return opt.textContent.indexOf(valueOrSelector) > -1;
              });

              if (potentialTargets.length === 0) {
                potentialTargets = document.querySelectorAll('#' + contentId + ' ' + valueOrSelector);
              }
              console.log("PT", potentialTargets);
              if (potentialTargets.length > 1) {
                filteredTargets = [].slice.apply(potentialTargets).filter(function (t) {
                  return t.textContent.trim() === valueOrSelector;
                });

                if (optionIndex === undefined) {
                  target = filteredTargets[0] || potentialTargets[0];
                } else {
                  target = filteredTargets[optionIndex] || potentialTargets[optionIndex];
                }
              } else {
                target = potentialTargets[0];
              }

              if (target) {
                _context.next = 24;
                break;
              }

              throw new Error('You called "selectChoose(\'' + cssPathOrTrigger + '\', \'' + valueOrSelector + '\')" but "' + valueOrSelector + '" didn\'t match any option');

            case 24:
              _context.next = 26;
              return (0, _testHelpers.click)(target);

            case 26:
              return _context.abrupt('return', (0, _testHelpers.settled)());

            case 27:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    return function selectChoose(_x, _x2, _x3) {
      return _ref.apply(this, arguments);
    };
  }();

  var selectSearch = exports.selectSearch = function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(cssPathOrTrigger, value) {
      var trigger, triggerPath, contentId, isMultipleSelect, content, dropdownIsClosed, isDefaultSingleSelect, inputIsInTrigger;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              trigger = void 0;

              if (!(cssPathOrTrigger instanceof HTMLElement)) {
                _context2.next = 5;
                break;
              }

              trigger = cssPathOrTrigger;
              _context2.next = 10;
              break;

            case 5:
              triggerPath = cssPathOrTrigger + ' .ember-power-select-trigger';

              trigger = document.querySelector(triggerPath);
              if (!trigger) {
                triggerPath = cssPathOrTrigger;
                trigger = document.querySelector(triggerPath);
              }

              if (trigger) {
                _context2.next = 10;
                break;
              }

              throw new Error('You called "selectSearch(\'' + cssPathOrTrigger + '\', \'' + value + '\')" but no select was found using selector "' + cssPathOrTrigger + '"');

            case 10:

              if (trigger.scrollIntoView) {
                trigger.scrollIntoView();
              }

              contentId = '' + trigger.attributes['aria-owns'].value;
              isMultipleSelect = !!trigger.querySelector('.ember-power-select-trigger-multiple-input');
              content = document.querySelector('#' + contentId);
              dropdownIsClosed = !content || content.classList.contains('ember-basic-dropdown-content-placeholder');

              if (!dropdownIsClosed) {
                _context2.next = 20;
                break;
              }

              _context2.next = 18;
              return (0, _testHelpers.click)(trigger);

            case 18:
              _context2.next = 20;
              return (0, _testHelpers.settled)();

            case 20:
              isDefaultSingleSelect = !!document.querySelector('.ember-power-select-search-input');

              if (!isMultipleSelect) {
                _context2.next = 26;
                break;
              }

              _context2.next = 24;
              return (0, _testHelpers.fillIn)(trigger.querySelector('.ember-power-select-trigger-multiple-input'), value);

            case 24:
              _context2.next = 39;
              break;

            case 26:
              if (!isDefaultSingleSelect) {
                _context2.next = 31;
                break;
              }

              _context2.next = 29;
              return (0, _testHelpers.fillIn)('.ember-power-select-search-input', value);

            case 29:
              _context2.next = 39;
              break;

            case 31:
              // It's probably a customized version
              inputIsInTrigger = !!trigger.querySelector('.ember-power-select-trigger input[type=search]');

              if (!inputIsInTrigger) {
                _context2.next = 37;
                break;
              }

              _context2.next = 35;
              return (0, _testHelpers.fillIn)(trigger.querySelector('input[type=search]'), value);

            case 35:
              _context2.next = 39;
              break;

            case 37:
              _context2.next = 39;
              return (0, _testHelpers.fillIn)('#' + contentId + ' .ember-power-select-search-input[type=search]', 'input');

            case 39:
              return _context2.abrupt('return', (0, _testHelpers.settled)());

            case 40:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    return function selectSearch(_x4, _x5) {
      return _ref2.apply(this, arguments);
    };
  }();

  var removeMultipleOption = exports.removeMultipleOption = function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(cssPath, value) {
      var elem, items, item;
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              elem = void 0;
              items = document.querySelectorAll(cssPath + ' .ember-power-select-multiple-options > li');
              item = [].slice.apply(items).find(function (el) {
                return el.textContent.indexOf(value) > -1;
              });

              if (item) {
                elem = item.querySelector('.ember-power-select-multiple-remove-btn');
              }
              _context3.prev = 4;
              _context3.next = 7;
              return (0, _testHelpers.click)(elem);

            case 7:
              return _context3.abrupt('return', (0, _testHelpers.settled)());

            case 10:
              _context3.prev = 10;
              _context3.t0 = _context3['catch'](4);
              (true && Ember.warn('css path to remove btn not found'));
              throw _context3.t0;

            case 14:
            case 'end':
              return _context3.stop();
          }
        }
      }, _callee3, this, [[4, 10]]);
    }));

    return function removeMultipleOption(_x6, _x7) {
      return _ref3.apply(this, arguments);
    };
  }();

  var clearSelected = exports.clearSelected = function () {
    var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(cssPath) {
      var elem;
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              elem = document.querySelector(cssPath + ' .ember-power-select-clear-btn');
              _context4.prev = 1;
              _context4.next = 4;
              return (0, _testHelpers.click)(elem);

            case 4:
              return _context4.abrupt('return', (0, _testHelpers.settled)());

            case 7:
              _context4.prev = 7;
              _context4.t0 = _context4['catch'](1);
              (true && Ember.warn('css path to clear btn not found'));
              throw _context4.t0;

            case 11:
            case 'end':
              return _context4.stop();
          }
        }
      }, _callee4, this, [[1, 7]]);
    }));

    return function clearSelected(_x8) {
      return _ref4.apply(this, arguments);
    };
  }();
});
define('ember-qunit/adapter', ['exports', 'qunit', '@ember/test-helpers/has-ember-version'], function (exports, _qunit, _hasEmberVersion) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  };

  function unhandledRejectionAssertion(current, error) {
    var message = void 0,
        source = void 0;

    if ((typeof error === 'undefined' ? 'undefined' : _typeof(error)) === 'object' && error !== null) {
      message = error.message;
      source = error.stack;
    } else if (typeof error === 'string') {
      message = error;
      source = 'unknown source';
    } else {
      message = 'unhandledRejection occured, but it had no message';
      source = 'unknown source';
    }

    current.assert.pushResult({
      result: false,
      actual: false,
      expected: true,
      message: message,
      source: source
    });
  }

  var Adapter = Ember.Test.Adapter.extend({
    init: function init() {
      this.doneCallbacks = [];
    },
    asyncStart: function asyncStart() {
      this.doneCallbacks.push(_qunit.default.config.current ? _qunit.default.config.current.assert.async() : null);
    },
    asyncEnd: function asyncEnd() {
      var done = this.doneCallbacks.pop();
      // This can be null if asyncStart() was called outside of a test
      if (done) {
        done();
      }
    },


    // clobber default implementation of `exception` will be added back for Ember
    // < 2.17 just below...
    exception: null
  });

  // Ember 2.17 and higher do not require the test adapter to have an `exception`
  // method When `exception` is not present, the unhandled rejection is
  // automatically re-thrown and will therefore hit QUnit's own global error
  // handler (therefore appropriately causing test failure)
  if (!(0, _hasEmberVersion.default)(2, 17)) {
    Adapter = Adapter.extend({
      exception: function exception(error) {
        unhandledRejectionAssertion(_qunit.default.config.current, error);
      }
    });
  }

  exports.default = Adapter;
});
define('ember-qunit/index', ['exports', 'ember-qunit/legacy-2-x/module-for', 'ember-qunit/legacy-2-x/module-for-component', 'ember-qunit/legacy-2-x/module-for-model', 'ember-qunit/adapter', 'qunit', 'ember-qunit/test-loader', '@ember/test-helpers'], function (exports, _moduleFor, _moduleForComponent, _moduleForModel, _adapter, _qunit, _testLoader, _testHelpers) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.loadTests = exports.todo = exports.only = exports.skip = exports.test = exports.module = exports.QUnitAdapter = exports.moduleForModel = exports.moduleForComponent = exports.moduleFor = undefined;
  Object.defineProperty(exports, 'moduleFor', {
    enumerable: true,
    get: function () {
      return _moduleFor.default;
    }
  });
  Object.defineProperty(exports, 'moduleForComponent', {
    enumerable: true,
    get: function () {
      return _moduleForComponent.default;
    }
  });
  Object.defineProperty(exports, 'moduleForModel', {
    enumerable: true,
    get: function () {
      return _moduleForModel.default;
    }
  });
  Object.defineProperty(exports, 'QUnitAdapter', {
    enumerable: true,
    get: function () {
      return _adapter.default;
    }
  });
  Object.defineProperty(exports, 'module', {
    enumerable: true,
    get: function () {
      return _qunit.module;
    }
  });
  Object.defineProperty(exports, 'test', {
    enumerable: true,
    get: function () {
      return _qunit.test;
    }
  });
  Object.defineProperty(exports, 'skip', {
    enumerable: true,
    get: function () {
      return _qunit.skip;
    }
  });
  Object.defineProperty(exports, 'only', {
    enumerable: true,
    get: function () {
      return _qunit.only;
    }
  });
  Object.defineProperty(exports, 'todo', {
    enumerable: true,
    get: function () {
      return _qunit.todo;
    }
  });
  Object.defineProperty(exports, 'loadTests', {
    enumerable: true,
    get: function () {
      return _testLoader.loadTests;
    }
  });
  exports.setResolver = setResolver;
  exports.render = render;
  exports.clearRender = clearRender;
  exports.settled = settled;
  exports.pauseTest = pauseTest;
  exports.resumeTest = resumeTest;
  exports.setupTest = setupTest;
  exports.setupRenderingTest = setupRenderingTest;
  exports.setupApplicationTest = setupApplicationTest;
  exports.setupTestContainer = setupTestContainer;
  exports.startTests = startTests;
  exports.setupTestAdapter = setupTestAdapter;
  exports.setupEmberTesting = setupEmberTesting;
  exports.setupEmberOnerrorValidation = setupEmberOnerrorValidation;
  exports.start = start;
  function setResolver() {
    (true && !(false) && Ember.deprecate('`setResolver` should be imported from `@ember/test-helpers`, but was imported from `ember-qunit`', false, {
      id: 'ember-qunit.deprecated-reexports.setResolver',
      until: '4.0.0'
    }));


    return _testHelpers.setResolver.apply(undefined, arguments);
  }

  function render() {
    (true && !(false) && Ember.deprecate('`render` should be imported from `@ember/test-helpers`, but was imported from `ember-qunit`', false, {
      id: 'ember-qunit.deprecated-reexports.render',
      until: '4.0.0'
    }));


    return _testHelpers.render.apply(undefined, arguments);
  }

  function clearRender() {
    (true && !(false) && Ember.deprecate('`clearRender` should be imported from `@ember/test-helpers`, but was imported from `ember-qunit`', false, {
      id: 'ember-qunit.deprecated-reexports.clearRender',
      until: '4.0.0'
    }));


    return _testHelpers.clearRender.apply(undefined, arguments);
  }

  function settled() {
    (true && !(false) && Ember.deprecate('`settled` should be imported from `@ember/test-helpers`, but was imported from `ember-qunit`', false, {
      id: 'ember-qunit.deprecated-reexports.settled',
      until: '4.0.0'
    }));


    return _testHelpers.settled.apply(undefined, arguments);
  }

  function pauseTest() {
    (true && !(false) && Ember.deprecate('`pauseTest` should be imported from `@ember/test-helpers`, but was imported from `ember-qunit`', false, {
      id: 'ember-qunit.deprecated-reexports.pauseTest',
      until: '4.0.0'
    }));


    return _testHelpers.pauseTest.apply(undefined, arguments);
  }

  function resumeTest() {
    (true && !(false) && Ember.deprecate('`resumeTest` should be imported from `@ember/test-helpers`, but was imported from `ember-qunit`', false, {
      id: 'ember-qunit.deprecated-reexports.resumeTest',
      until: '4.0.0'
    }));


    return _testHelpers.resumeTest.apply(undefined, arguments);
  }

  function setupTest(hooks, options) {
    hooks.beforeEach(function (assert) {
      var _this = this;

      return (0, _testHelpers.setupContext)(this, options).then(function () {
        var originalPauseTest = _this.pauseTest;
        _this.pauseTest = function QUnit_pauseTest() {
          assert.timeout(-1); // prevent the test from timing out

          return originalPauseTest.call(this);
        };
      });
    });

    hooks.afterEach(function () {
      return (0, _testHelpers.teardownContext)(this);
    });
  }

  function setupRenderingTest(hooks, options) {
    setupTest(hooks, options);

    hooks.beforeEach(function () {
      return (0, _testHelpers.setupRenderingContext)(this);
    });

    hooks.afterEach(function () {
      return (0, _testHelpers.teardownRenderingContext)(this);
    });
  }

  function setupApplicationTest(hooks, options) {
    setupTest(hooks, options);

    hooks.beforeEach(function () {
      return (0, _testHelpers.setupApplicationContext)(this);
    });

    hooks.afterEach(function () {
      return (0, _testHelpers.teardownApplicationContext)(this);
    });
  }

  /**
     Uses current URL configuration to setup the test container.
  
     * If `?nocontainer` is set, the test container will be hidden.
     * If `?dockcontainer` or `?devmode` are set the test container will be
       absolutely positioned.
     * If `?devmode` is set, the test container will be made full screen.
  
     @method setupTestContainer
   */
  function setupTestContainer() {
    var testContainer = document.getElementById('ember-testing-container');
    if (!testContainer) {
      return;
    }

    var params = _qunit.default.urlParams;

    var containerVisibility = params.nocontainer ? 'hidden' : 'visible';
    var containerPosition = params.dockcontainer || params.devmode ? 'fixed' : 'relative';

    if (params.devmode) {
      testContainer.className = ' full-screen';
    }

    testContainer.style.visibility = containerVisibility;
    testContainer.style.position = containerPosition;

    var qunitContainer = document.getElementById('qunit');
    if (params.dockcontainer) {
      qunitContainer.style.marginBottom = window.getComputedStyle(testContainer).height;
    }
  }

  /**
     Instruct QUnit to start the tests.
     @method startTests
   */
  function startTests() {
    _qunit.default.start();
  }

  /**
     Sets up the `Ember.Test` adapter for usage with QUnit 2.x.
  
     @method setupTestAdapter
   */
  function setupTestAdapter() {
    Ember.Test.adapter = _adapter.default.create();
  }

  /**
    Ensures that `Ember.testing` is set to `true` before each test begins
    (including `before` / `beforeEach`), and reset to `false` after each test is
    completed. This is done via `QUnit.testStart` and `QUnit.testDone`.
  
   */
  function setupEmberTesting() {
    _qunit.default.testStart(function () {
      Ember.testing = true;
    });

    _qunit.default.testDone(function () {
      Ember.testing = false;
    });
  }

  /**
    Ensures that `Ember.onerror` (if present) is properly configured to re-throw
    errors that occur while `Ember.testing` is `true`.
  */
  function setupEmberOnerrorValidation() {
    _qunit.default.module('ember-qunit: Ember.onerror validation', function () {
      _qunit.default.test('Ember.onerror is functioning properly', function (assert) {
        assert.expect(1);
        var result = (0, _testHelpers.validateErrorHandler)();
        assert.ok(result.isValid, 'Ember.onerror handler with invalid testing behavior detected. An Ember.onerror handler _must_ rethrow exceptions when `Ember.testing` is `true` or the test suite is unreliable. See https://git.io/vbine for more details.');
      });
    });
  }

  /**
     @method start
     @param {Object} [options] Options to be used for enabling/disabling behaviors
     @param {Boolean} [options.loadTests] If `false` tests will not be loaded automatically.
     @param {Boolean} [options.setupTestContainer] If `false` the test container will not
     be setup based on `devmode`, `dockcontainer`, or `nocontainer` URL params.
     @param {Boolean} [options.startTests] If `false` tests will not be automatically started
     (you must run `QUnit.start()` to kick them off).
     @param {Boolean} [options.setupTestAdapter] If `false` the default Ember.Test adapter will
     not be updated.
     @param {Boolean} [options.setupEmberTesting] `false` opts out of the
     default behavior of setting `Ember.testing` to `true` before all tests and
     back to `false` after each test will.
     @param {Boolean} [options.setupEmberOnerrorValidation] If `false` validation
     of `Ember.onerror` will be disabled.
   */
  function start() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    if (options.loadTests !== false) {
      (0, _testLoader.loadTests)();
    }

    if (options.setupTestContainer !== false) {
      setupTestContainer();
    }

    if (options.setupTestAdapter !== false) {
      setupTestAdapter();
    }

    if (options.setupEmberTesting !== false) {
      setupEmberTesting();
    }

    if (options.setupEmberOnerrorValidation !== false) {
      setupEmberOnerrorValidation();
    }

    if (options.startTests !== false) {
      startTests();
    }
  }
});
define('ember-qunit/legacy-2-x/module-for-component', ['exports', 'ember-qunit/legacy-2-x/qunit-module', 'ember-test-helpers'], function (exports, _qunitModule, _emberTestHelpers) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = moduleForComponent;
  function moduleForComponent(name, description, callbacks) {
    (0, _qunitModule.createModule)(_emberTestHelpers.TestModuleForComponent, name, description, callbacks);
  }
});
define('ember-qunit/legacy-2-x/module-for-model', ['exports', 'ember-qunit/legacy-2-x/qunit-module', 'ember-test-helpers'], function (exports, _qunitModule, _emberTestHelpers) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = moduleForModel;
  function moduleForModel(name, description, callbacks) {
    (0, _qunitModule.createModule)(_emberTestHelpers.TestModuleForModel, name, description, callbacks);
  }
});
define('ember-qunit/legacy-2-x/module-for', ['exports', 'ember-qunit/legacy-2-x/qunit-module', 'ember-test-helpers'], function (exports, _qunitModule, _emberTestHelpers) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = moduleFor;
  function moduleFor(name, description, callbacks) {
    (0, _qunitModule.createModule)(_emberTestHelpers.TestModule, name, description, callbacks);
  }
});
define('ember-qunit/legacy-2-x/qunit-module', ['exports', 'qunit'], function (exports, _qunit) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createModule = createModule;

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  };

  function noop() {}

  function callbackFor(name, callbacks) {
    if ((typeof callbacks === 'undefined' ? 'undefined' : _typeof(callbacks)) !== 'object') {
      return noop;
    }
    if (!callbacks) {
      return noop;
    }

    var callback = noop;

    if (callbacks[name]) {
      callback = callbacks[name];
      delete callbacks[name];
    }

    return callback;
  }

  function createModule(Constructor, name, description, callbacks) {
    if (!callbacks && (typeof description === 'undefined' ? 'undefined' : _typeof(description)) === 'object') {
      callbacks = description;
      description = name;
    }

    var _before = callbackFor('before', callbacks);
    var _beforeEach = callbackFor('beforeEach', callbacks);
    var _afterEach = callbackFor('afterEach', callbacks);
    var _after = callbackFor('after', callbacks);

    var module;
    var moduleName = typeof description === 'string' ? description : name;

    (0, _qunit.module)(moduleName, {
      before: function before() {
        // storing this in closure scope to avoid exposing these
        // private internals to the test context
        module = new Constructor(name, description, callbacks);
        return _before.apply(this, arguments);
      },
      beforeEach: function beforeEach() {
        var _module,
            _this = this,
            _arguments = arguments;

        // provide the test context to the underlying module
        module.setContext(this);

        return (_module = module).setup.apply(_module, arguments).then(function () {
          return _beforeEach.apply(_this, _arguments);
        });
      },
      afterEach: function afterEach() {
        var _arguments2 = arguments;

        var result = _afterEach.apply(this, arguments);
        return Ember.RSVP.resolve(result).then(function () {
          var _module2;

          return (_module2 = module).teardown.apply(_module2, _arguments2);
        });
      },
      after: function after() {
        try {
          return _after.apply(this, arguments);
        } finally {
          _after = _afterEach = _before = _beforeEach = callbacks = module = null;
        }
      }
    });
  }
});
define('ember-qunit/test-loader', ['exports', 'qunit', 'ember-cli-test-loader/test-support/index'], function (exports, _qunit, _index) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.TestLoader = undefined;
  exports.loadTests = loadTests;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  (0, _index.addModuleExcludeMatcher)(function (moduleName) {
    return _qunit.default.urlParams.nolint && moduleName.match(/\.(jshint|lint-test)$/);
  });

  (0, _index.addModuleIncludeMatcher)(function (moduleName) {
    return moduleName.match(/\.jshint$/);
  });

  var moduleLoadFailures = [];

  _qunit.default.done(function () {
    if (moduleLoadFailures.length) {
      throw new Error('\n' + moduleLoadFailures.join('\n'));
    }
  });

  var TestLoader = exports.TestLoader = function (_AbstractTestLoader) {
    _inherits(TestLoader, _AbstractTestLoader);

    function TestLoader() {
      _classCallCheck(this, TestLoader);

      return _possibleConstructorReturn(this, (TestLoader.__proto__ || Object.getPrototypeOf(TestLoader)).apply(this, arguments));
    }

    _createClass(TestLoader, [{
      key: 'moduleLoadFailure',
      value: function moduleLoadFailure(moduleName, error) {
        moduleLoadFailures.push(error);

        _qunit.default.module('TestLoader Failures');
        _qunit.default.test(moduleName + ': could not be loaded', function () {
          throw error;
        });
      }
    }]);

    return TestLoader;
  }(_index.default);

  /**
     Load tests following the default patterns:
  
     * The module name ends with `-test`
     * The module name ends with `.jshint`
  
     Excludes tests that match the following
     patterns when `?nolint` URL param is set:
  
     * The module name ends with `.jshint`
     * The module name ends with `-lint-test`
  
     @method loadTests
   */
  function loadTests() {
    new TestLoader().loadModules();
  }
});
define('ember-raf-scheduler/test-support/register-waiter', ['exports', 'ember-raf-scheduler'], function (exports, _emberRafScheduler) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = registerWaiter;
  function registerWaiter() {
    // We can't rely on the importable Ember since shims are no
    // longer included by default, so use the global instance.
    // eslint-disable-next-line
    Ember.Test.registerWaiter(function () {
      return _emberRafScheduler.default.jobs === 0;
    });
  }
});
define('ember-responsive/test-support/index', ['exports', '@ember/test-helpers'], function (exports, _testHelpers) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.setBreakpoint = setBreakpoint;
  function setBreakpoint(breakpointName) {
    var _getContext = (0, _testHelpers.getContext)(),
        owner = _getContext.owner;

    var breakpoints = owner.lookup('breakpoints:main');
    var media = owner.lookup('service:media');
    if (breakpointName === 'auto') {
      media.set('_mocked', false);
      return;
    }
    if (Object.keys(breakpoints).indexOf(breakpointName) === -1) {
      throw new Error('Breakpoint "' + breakpointName + '" is not defined in your breakpoints file');
    }
    var matches = media.get('matches');
    Ember.run(function () {
      matches.clear();
      matches.addObject(breakpointName);
      media._triggerMediaChanged();
    });
    return (0, _testHelpers.settled)();
  }
});
define('ember-simple-auth/test-support/index', ['exports', '@ember/test-helpers', 'ember-simple-auth/authenticators/test'], function (exports, _testHelpers, _test) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.authenticateSession = authenticateSession;
  exports.currentSession = currentSession;
  exports.invalidateSession = invalidateSession;


  var SESSION_SERVICE_KEY = 'service:session';
  var TEST_CONTAINER_KEY = 'authenticator:test';

  function ensureAuthenticator(owner) {
    var authenticator = owner.lookup(TEST_CONTAINER_KEY);
    if (!authenticator) {
      owner.register(TEST_CONTAINER_KEY, _test.default);
    }
  }

  /**
   * Authenticates the session.
   *
   * @param {Object} sessionData Optional argument used to mock an authenticator
   * response (e.g. a token or user).
   * @return {Promise}
   * @public
   */
  function authenticateSession(sessionData) {
    var _getContext = (0, _testHelpers.getContext)(),
        owner = _getContext.owner;

    var session = owner.lookup(SESSION_SERVICE_KEY);
    ensureAuthenticator(owner);
    return session.authenticate(TEST_CONTAINER_KEY, sessionData).then(function () {
      return (0, _testHelpers.settled)();
    });
  }

  /**
   * Returns the current session.
   *
   * @return {Object} a session service.
   * @public
   */
  function currentSession() {
    var _getContext2 = (0, _testHelpers.getContext)(),
        owner = _getContext2.owner;

    return owner.lookup(SESSION_SERVICE_KEY);
  }

  /**
   * Invalidates the session.
   *
   * @return {Promise}
   * @public
   */
  function invalidateSession() {
    var _getContext3 = (0, _testHelpers.getContext)(),
        owner = _getContext3.owner;

    var session = owner.lookup(SESSION_SERVICE_KEY);
    var isAuthenticated = Ember.get(session, 'isAuthenticated');
    return Ember.RSVP.resolve().then(function () {
      if (isAuthenticated) {
        return session.invalidate();
      }
    }).then(function () {
      return (0, _testHelpers.settled)();
    });
  }
});
define('ember-sinon-qunit/test-support/only', ['exports', 'ember-qunit', 'ember-sinon-qunit/test-support/utils/config'], function (exports, _emberQunit, _config) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = only;


  // Global sinon config setup
  (0, _config.commonConfig)();

  function only(testName, callback) {
    (0, _config.wrapTest)(testName, callback, _emberQunit.only);
  }
});
define('ember-sinon-qunit/test-support/test', ['exports', 'ember-qunit', 'ember-sinon-qunit/test-support/utils/config'], function (exports, _emberQunit, _config) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = test;


  // Global sinon config setup
  (0, _config.commonConfig)();

  function test(testName, callback) {
    (0, _config.wrapTest)(testName, callback, _emberQunit.test);
  }
});
define('ember-sinon-qunit/test-support/utils/config', ['exports', 'sinon', 'qunit'], function (exports, _sinon, _qunit) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.commonConfig = exports.wrapTest = undefined;

  var _slicedToArray = function () {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"]) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }
    };
  }();

  var ALREADY_FAILED = {};

  var commonConfig = function commonConfig() {
    _sinon.default.expectation.fail = _sinon.default.assert.fail = function (msg) {
      _qunit.default.assert.ok(false, msg);
    };

    _sinon.default.assert.pass = function (assertion) {
      _qunit.default.assert.ok(true, assertion);
    };

    _sinon.default.config = {
      injectIntoThis: false,
      injectInto: null,
      properties: ['spy', 'stub', 'mock', 'sandbox'],
      useFakeTimers: false,
      useFakeServer: false
    };
  };

  var DEFAULT_SINON_CONFIG = {
    injectIntoThis: true,
    injectInto: null,
    properties: ["spy", "stub", "mock", "clock", "server", "requests"],
    useFakeTimers: true,
    useFakeServer: true
  };

  var getConfig = function getConfig() {
    var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var config = {};
    var prop = void 0;

    for (prop in overrides) {
      if (DEFAULT_SINON_CONFIG.hasOwnProperty(prop)) {
        config[prop] = overrides.hasOwnProperty(prop) ? overrides[prop] : overrides[prop];
      }
    }

    return config;
  };

  var wrapTest = function wrapTest(testName, callback, importedQunitFunc) {
    var sandbox = void 0;
    var wrapper = function wrapper() {
      var context = this;
      if (Ember.isBlank(context)) {
        context = {};
      }

      var config = getConfig(_sinon.default.config);
      config.injectInto = context;
      sandbox = _sinon.default.sandbox.create(config);
      sandbox.usingPromise(Ember.RSVP);

      // There are two ways to have an async test:
      // 1. return a thenable
      // 2. call `assert.async()`

      var result = callback.apply(context, arguments);
      var currentTest = _qunit.default.config.current;

      // Normalize into a promise, even if the test was originally
      // synchronous. And wait for a thenable `result` to finish first
      // (otherwise an asynchronously invoked `assert.async()` will be
      // ignored).
      var promise = Ember.RSVP.resolve(result).then(function (data) {
        // When `assert.async()` is called, the best way found to
        // detect completion (so far) is to poll the semaphore. :(
        // (Esp. for cases where the test timed out.)
        var poll = function poll(resolve, reject) {
          // Afford for the fact that we are returning a promise, which
          // bumps the semaphore to at least 1. So when it drops to 1
          // then everything else is complete.
          // (0 means it already failed, e.g. by timing out. - handled below)
          if (currentTest.semaphore === 1) {
            clearTimeout(testTimeoutPollerId);
            testTimeoutDeferred.resolve();
            resolve(data);
          } else {
            setTimeout(function () {
              return poll(resolve, reject);
            }, 10);
          }
        };

        return new Ember.RSVP.Promise(poll);
      });

      // Watch for cases where either the `result` thenable
      // or `assert.async()` times out and ensure cleanup.
      var testTimeoutPollerId = 0;
      var testTimeoutPoll = function testTimeoutPoll() {
        // 0 means it already failed, e.g. by timing out.
        if (!currentTest.semaphore) {
          testTimeoutDeferred.reject(ALREADY_FAILED);
        } else {
          testTimeoutPollerId = setTimeout(testTimeoutPoll, 10);
        }
      };
      var testTimeoutDeferred = Ember.RSVP.defer();
      // delay first check so that the returned promise can bump the semaphore
      setTimeout(testTimeoutPoll);

      return Ember.RSVP.all([promise, testTimeoutDeferred.promise]).then(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 1),
            data = _ref2[0];

        sandbox.verifyAndRestore();
        return data;
      }, function (error) {
        sandbox.restore();
        if (error === ALREADY_FAILED) return;
        return Ember.RSVP.reject(error);
      });
    };

    try {
      return importedQunitFunc(testName, wrapper);
    } catch (exception) {
      sandbox.restore();
      throw exception;
    }
  };

  exports.wrapTest = wrapTest;
  exports.commonConfig = commonConfig;
});
define('ember-test-helpers/has-ember-version', ['exports', '@ember/test-helpers/has-ember-version'], function (exports, _hasEmberVersion) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function () {
      return _hasEmberVersion.default;
    }
  });
});
define('ember-test-helpers/index', ['exports', '@ember/test-helpers', 'ember-test-helpers/legacy-0-6-x/test-module', 'ember-test-helpers/legacy-0-6-x/test-module-for-acceptance', 'ember-test-helpers/legacy-0-6-x/test-module-for-component', 'ember-test-helpers/legacy-0-6-x/test-module-for-model'], function (exports, _testHelpers, _testModule, _testModuleForAcceptance, _testModuleForComponent, _testModuleForModel) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.keys(_testHelpers).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _testHelpers[key];
      }
    });
  });
  Object.defineProperty(exports, 'TestModule', {
    enumerable: true,
    get: function () {
      return _testModule.default;
    }
  });
  Object.defineProperty(exports, 'TestModuleForAcceptance', {
    enumerable: true,
    get: function () {
      return _testModuleForAcceptance.default;
    }
  });
  Object.defineProperty(exports, 'TestModuleForComponent', {
    enumerable: true,
    get: function () {
      return _testModuleForComponent.default;
    }
  });
  Object.defineProperty(exports, 'TestModuleForModel', {
    enumerable: true,
    get: function () {
      return _testModuleForModel.default;
    }
  });
});
define('ember-test-helpers/legacy-0-6-x/-legacy-overrides', ['exports', 'ember-test-helpers/has-ember-version'], function (exports, _hasEmberVersion) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.preGlimmerSetupIntegrationForComponent = preGlimmerSetupIntegrationForComponent;
  function preGlimmerSetupIntegrationForComponent() {
    var module = this;
    var context = this.context;

    this.actionHooks = {};

    context.dispatcher = this.container.lookup('event_dispatcher:main') || Ember.EventDispatcher.create();
    context.dispatcher.setup({}, '#ember-testing');
    context.actions = module.actionHooks;

    (this.registry || this.container).register('component:-test-holder', Ember.Component.extend());

    context.render = function (template) {
      // in case `this.render` is called twice, make sure to teardown the first invocation
      module.teardownComponent();

      if (!template) {
        throw new Error('in a component integration test you must pass a template to `render()`');
      }
      if (Ember.isArray(template)) {
        template = template.join('');
      }
      if (typeof template === 'string') {
        template = Ember.Handlebars.compile(template);
      }
      module.component = module.container.lookupFactory('component:-test-holder').create({
        layout: template
      });

      module.component.set('context', context);
      module.component.set('controller', context);

      Ember.run(function () {
        module.component.appendTo('#ember-testing');
      });

      context._element = module.component.element;
    };

    context.$ = function () {
      return module.component.$.apply(module.component, arguments);
    };

    context.set = function (key, value) {
      var ret = Ember.run(function () {
        return Ember.set(context, key, value);
      });

      if ((0, _hasEmberVersion.default)(2, 0)) {
        return ret;
      }
    };

    context.setProperties = function (hash) {
      var ret = Ember.run(function () {
        return Ember.setProperties(context, hash);
      });

      if ((0, _hasEmberVersion.default)(2, 0)) {
        return ret;
      }
    };

    context.get = function (key) {
      return Ember.get(context, key);
    };

    context.getProperties = function () {
      var args = Array.prototype.slice.call(arguments);
      return Ember.getProperties(context, args);
    };

    context.on = function (actionName, handler) {
      module.actionHooks[actionName] = handler;
    };

    context.send = function (actionName) {
      var hook = module.actionHooks[actionName];
      if (!hook) {
        throw new Error('integration testing template received unexpected action ' + actionName);
      }
      hook.apply(module, Array.prototype.slice.call(arguments, 1));
    };

    context.clearRender = function () {
      module.teardownComponent();
    };
  }
});
define('ember-test-helpers/legacy-0-6-x/abstract-test-module', ['exports', 'ember-test-helpers/legacy-0-6-x/ext/rsvp', '@ember/test-helpers/settled', '@ember/test-helpers'], function (exports, _rsvp, _settled, _testHelpers) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  // calling this `merge` here because we cannot
  // actually assume it is like `Object.assign`
  // with > 2 args
  var merge = Ember.assign || Ember.merge;

  var _class = function () {
    function _class(name, options) {
      _classCallCheck(this, _class);

      this.context = undefined;
      this.name = name;
      this.callbacks = options || {};

      this.initSetupSteps();
      this.initTeardownSteps();
    }

    _createClass(_class, [{
      key: 'setup',
      value: function setup(assert) {
        var _this = this;

        Ember.testing = true;
        return this.invokeSteps(this.setupSteps, this, assert).then(function () {
          _this.contextualizeCallbacks();
          return _this.invokeSteps(_this.contextualizedSetupSteps, _this.context, assert);
        });
      }
    }, {
      key: 'teardown',
      value: function teardown(assert) {
        var _this2 = this;

        return this.invokeSteps(this.contextualizedTeardownSteps, this.context, assert).then(function () {
          return _this2.invokeSteps(_this2.teardownSteps, _this2, assert);
        }).then(function () {
          _this2.cache = null;
          _this2.cachedCalls = null;
        }).finally(function () {
          Ember.testing = false;
        });
      }
    }, {
      key: 'initSetupSteps',
      value: function initSetupSteps() {
        this.setupSteps = [];
        this.contextualizedSetupSteps = [];

        if (this.callbacks.beforeSetup) {
          this.setupSteps.push(this.callbacks.beforeSetup);
          delete this.callbacks.beforeSetup;
        }

        this.setupSteps.push(this.setupContext);
        this.setupSteps.push(this.setupTestElements);
        this.setupSteps.push(this.setupAJAXListeners);
        this.setupSteps.push(this.setupPromiseListeners);

        if (this.callbacks.setup) {
          this.contextualizedSetupSteps.push(this.callbacks.setup);
          delete this.callbacks.setup;
        }
      }
    }, {
      key: 'invokeSteps',
      value: function invokeSteps(steps, context, assert) {
        steps = steps.slice();

        function nextStep() {
          var step = steps.shift();
          if (step) {
            // guard against exceptions, for example missing components referenced from needs.
            return new Ember.RSVP.Promise(function (resolve) {
              resolve(step.call(context, assert));
            }).then(nextStep);
          } else {
            return Ember.RSVP.resolve();
          }
        }
        return nextStep();
      }
    }, {
      key: 'contextualizeCallbacks',
      value: function contextualizeCallbacks() {}
    }, {
      key: 'initTeardownSteps',
      value: function initTeardownSteps() {
        this.teardownSteps = [];
        this.contextualizedTeardownSteps = [];

        if (this.callbacks.teardown) {
          this.contextualizedTeardownSteps.push(this.callbacks.teardown);
          delete this.callbacks.teardown;
        }

        this.teardownSteps.push(this.teardownContext);
        this.teardownSteps.push(this.teardownTestElements);
        this.teardownSteps.push(this.teardownAJAXListeners);
        this.teardownSteps.push(this.teardownPromiseListeners);

        if (this.callbacks.afterTeardown) {
          this.teardownSteps.push(this.callbacks.afterTeardown);
          delete this.callbacks.afterTeardown;
        }
      }
    }, {
      key: 'setupTestElements',
      value: function setupTestElements() {
        var testElementContainer = document.querySelector('#ember-testing-container');
        if (!testElementContainer) {
          testElementContainer = document.createElement('div');
          testElementContainer.setAttribute('id', 'ember-testing-container');
          document.body.appendChild(testElementContainer);
        }

        var testEl = document.querySelector('#ember-testing');
        if (!testEl) {
          var element = document.createElement('div');
          element.setAttribute('id', 'ember-testing');

          testElementContainer.appendChild(element);
          this.fixtureResetValue = '';
        } else {
          this.fixtureResetValue = testElementContainer.innerHTML;
        }
      }
    }, {
      key: 'setupContext',
      value: function setupContext(options) {
        var context = this.getContext();

        merge(context, {
          dispatcher: null,
          inject: {}
        });
        merge(context, options);

        this.setToString();
        (0, _testHelpers.setContext)(context);
        this.context = context;
      }
    }, {
      key: 'setContext',
      value: function setContext(context) {
        this.context = context;
      }
    }, {
      key: 'getContext',
      value: function getContext() {
        if (this.context) {
          return this.context;
        }

        return this.context = (0, _testHelpers.getContext)() || {};
      }
    }, {
      key: 'setToString',
      value: function setToString() {
        var _this3 = this;

        this.context.toString = function () {
          if (_this3.subjectName) {
            return 'test context for: ' + _this3.subjectName;
          }

          if (_this3.name) {
            return 'test context for: ' + _this3.name;
          }
        };
      }
    }, {
      key: 'setupAJAXListeners',
      value: function setupAJAXListeners() {
        (0, _settled._setupAJAXHooks)();
      }
    }, {
      key: 'teardownAJAXListeners',
      value: function teardownAJAXListeners() {
        (0, _settled._teardownAJAXHooks)();
      }
    }, {
      key: 'setupPromiseListeners',
      value: function setupPromiseListeners() {
        (0, _rsvp._setupPromiseListeners)();
      }
    }, {
      key: 'teardownPromiseListeners',
      value: function teardownPromiseListeners() {
        (0, _rsvp._teardownPromiseListeners)();
      }
    }, {
      key: 'teardownTestElements',
      value: function teardownTestElements() {
        document.getElementById('ember-testing-container').innerHTML = this.fixtureResetValue;

        // Ember 2.0.0 removed Ember.View as public API, so only do this when
        // Ember.View is present
        if (Ember.View && Ember.View.views) {
          Ember.View.views = {};
        }
      }
    }, {
      key: 'teardownContext',
      value: function teardownContext() {
        var context = this.context;
        this.context = undefined;
        (0, _testHelpers.unsetContext)();

        if (context && context.dispatcher && !context.dispatcher.isDestroyed) {
          Ember.run(function () {
            context.dispatcher.destroy();
          });
        }
      }
    }]);

    return _class;
  }();

  exports.default = _class;
});
define('ember-test-helpers/legacy-0-6-x/build-registry', ['exports', 'require'], function (exports, _require2) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.default = function (resolver) {
    var fallbackRegistry, registry, container;
    var namespace = Ember.Object.create({
      Resolver: {
        create: function create() {
          return resolver;
        }
      }
    });

    function register(name, factory) {
      var thingToRegisterWith = registry || container;

      if (!(container.factoryFor ? container.factoryFor(name) : container.lookupFactory(name))) {
        thingToRegisterWith.register(name, factory);
      }
    }

    if (Ember.Application.buildRegistry) {
      fallbackRegistry = Ember.Application.buildRegistry(namespace);
      fallbackRegistry.register('component-lookup:main', Ember.ComponentLookup);

      registry = new Ember.Registry({
        fallback: fallbackRegistry
      });

      if (Ember.ApplicationInstance && Ember.ApplicationInstance.setupRegistry) {
        Ember.ApplicationInstance.setupRegistry(registry);
      }

      // these properties are set on the fallback registry by `buildRegistry`
      // and on the primary registry within the ApplicationInstance constructor
      // but we need to manually recreate them since ApplicationInstance's are not
      // exposed externally
      registry.normalizeFullName = fallbackRegistry.normalizeFullName;
      registry.makeToString = fallbackRegistry.makeToString;
      registry.describe = fallbackRegistry.describe;

      var owner = Owner.create({
        __registry__: registry,
        __container__: null
      });

      container = registry.container({ owner: owner });
      owner.__container__ = container;

      exposeRegistryMethodsWithoutDeprecations(container);
    } else {
      container = Ember.Application.buildContainer(namespace);
      container.register('component-lookup:main', Ember.ComponentLookup);
    }

    // Ember 1.10.0 did not properly add `view:toplevel` or `view:default`
    // to the registry in Ember.Application.buildRegistry :(
    //
    // Ember 2.0.0 removed Ember.View as public API, so only do this when
    // Ember.View is present
    if (Ember.View) {
      register('view:toplevel', Ember.View.extend());
    }

    // Ember 2.0.0 removed Ember._MetamorphView from the Ember global, so only
    // do this when present
    if (Ember._MetamorphView) {
      register('view:default', Ember._MetamorphView);
    }

    var globalContext = (typeof global === 'undefined' ? 'undefined' : _typeof(global)) === 'object' && global || self;
    if (requirejs.entries['ember-data/setup-container']) {
      // ember-data is a proper ember-cli addon since 2.3; if no 'import
      // 'ember-data'' is present somewhere in the tests, there is also no `DS`
      // available on the globalContext and hence ember-data wouldn't be setup
      // correctly for the tests; that's why we import and call setupContainer
      // here; also see https://github.com/emberjs/data/issues/4071 for context
      var setupContainer = (0, _require2.default)('ember-data/setup-container')['default'];
      setupContainer(registry || container);
    } else if (globalContext.DS) {
      var DS = globalContext.DS;
      if (DS._setupContainer) {
        DS._setupContainer(registry || container);
      } else {
        register('transform:boolean', DS.BooleanTransform);
        register('transform:date', DS.DateTransform);
        register('transform:number', DS.NumberTransform);
        register('transform:string', DS.StringTransform);
        register('serializer:-default', DS.JSONSerializer);
        register('serializer:-rest', DS.RESTSerializer);
        register('adapter:-rest', DS.RESTAdapter);
      }
    }

    return {
      registry: registry,
      container: container,
      owner: owner
    };
  };

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  };

  /* globals global, self, requirejs */

  function exposeRegistryMethodsWithoutDeprecations(container) {
    var methods = ['register', 'unregister', 'resolve', 'normalize', 'typeInjection', 'injection', 'factoryInjection', 'factoryTypeInjection', 'has', 'options', 'optionsForType'];

    function exposeRegistryMethod(container, method) {
      if (method in container) {
        container[method] = function () {
          return container._registry[method].apply(container._registry, arguments);
        };
      }
    }

    for (var i = 0, l = methods.length; i < l; i++) {
      exposeRegistryMethod(container, methods[i]);
    }
  }

  var Owner = function () {
    if (Ember._RegistryProxyMixin && Ember._ContainerProxyMixin) {
      return Ember.Object.extend(Ember._RegistryProxyMixin, Ember._ContainerProxyMixin, {
        _emberTestHelpersMockOwner: true
      });
    }

    return Ember.Object.extend({
      _emberTestHelpersMockOwner: true
    });
  }();
});
define('ember-test-helpers/legacy-0-6-x/ext/rsvp', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports._setupPromiseListeners = _setupPromiseListeners;
  exports._teardownPromiseListeners = _teardownPromiseListeners;


  var originalAsync = void 0;

  /**
    Configures `RSVP` to resolve promises on the run-loop's action queue. This is
    done by Ember internally since Ember 1.7 and it is only needed to
    provide a consistent testing experience for users of Ember < 1.7.
  
    @private
  */
  function _setupPromiseListeners() {
    originalAsync = Ember.RSVP.configure('async');

    Ember.RSVP.configure('async', function (callback, promise) {
      Ember.run.backburner.schedule('actions', function () {
        callback(promise);
      });
    });
  }

  /**
    Resets `RSVP`'s `async` to its prior value.
  
    @private
  */
  function _teardownPromiseListeners() {
    Ember.RSVP.configure('async', originalAsync);
  }
});
define('ember-test-helpers/legacy-0-6-x/test-module-for-acceptance', ['exports', 'ember-test-helpers/legacy-0-6-x/abstract-test-module', '@ember/test-helpers'], function (exports, _abstractTestModule, _testHelpers) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  var _get = function get(object, property, receiver) {
    if (object === null) object = Function.prototype;
    var desc = Object.getOwnPropertyDescriptor(object, property);

    if (desc === undefined) {
      var parent = Object.getPrototypeOf(object);

      if (parent === null) {
        return undefined;
      } else {
        return get(parent, property, receiver);
      }
    } else if ("value" in desc) {
      return desc.value;
    } else {
      var getter = desc.get;

      if (getter === undefined) {
        return undefined;
      }

      return getter.call(receiver);
    }
  };

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var _class = function (_AbstractTestModule) {
    _inherits(_class, _AbstractTestModule);

    function _class() {
      _classCallCheck(this, _class);

      return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
    }

    _createClass(_class, [{
      key: 'setupContext',
      value: function setupContext() {
        _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'setupContext', this).call(this, { application: this.createApplication() });
      }
    }, {
      key: 'teardownContext',
      value: function teardownContext() {
        Ember.run(function () {
          (0, _testHelpers.getContext)().application.destroy();
        });

        _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'teardownContext', this).call(this);
      }
    }, {
      key: 'createApplication',
      value: function createApplication() {
        var _callbacks = this.callbacks,
            Application = _callbacks.Application,
            config = _callbacks.config;

        var application = void 0;

        Ember.run(function () {
          application = Application.create(config);
          application.setupForTesting();
          application.injectTestHelpers();
        });

        return application;
      }
    }]);

    return _class;
  }(_abstractTestModule.default);

  exports.default = _class;
});
define('ember-test-helpers/legacy-0-6-x/test-module-for-component', ['exports', 'ember-test-helpers/legacy-0-6-x/test-module', 'ember-test-helpers/has-ember-version', 'ember-test-helpers/legacy-0-6-x/-legacy-overrides'], function (exports, _testModule, _hasEmberVersion, _legacyOverrides) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.setupComponentIntegrationTest = undefined;

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  };

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  var _get = function get(object, property, receiver) {
    if (object === null) object = Function.prototype;
    var desc = Object.getOwnPropertyDescriptor(object, property);

    if (desc === undefined) {
      var parent = Object.getPrototypeOf(object);

      if (parent === null) {
        return undefined;
      } else {
        return get(parent, property, receiver);
      }
    } else if ("value" in desc) {
      return desc.value;
    } else {
      var getter = desc.get;

      if (getter === undefined) {
        return undefined;
      }

      return getter.call(receiver);
    }
  };

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var ACTION_KEY = void 0;
  if ((0, _hasEmberVersion.default)(2, 0)) {
    ACTION_KEY = 'actions';
  } else {
    ACTION_KEY = '_actions';
  }

  var isPreGlimmer = !(0, _hasEmberVersion.default)(1, 13);

  var _class = function (_TestModule) {
    _inherits(_class, _TestModule);

    function _class(componentName, description, callbacks) {
      _classCallCheck(this, _class);

      // Allow `description` to be omitted
      if (!callbacks && (typeof description === 'undefined' ? 'undefined' : _typeof(description)) === 'object') {
        callbacks = description;
        description = null;
      } else if (!callbacks) {
        callbacks = {};
      }

      var integrationOption = callbacks.integration;
      var hasNeeds = Array.isArray(callbacks.needs);

      var _this2 = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, 'component:' + componentName, description, callbacks));

      _this2.componentName = componentName;

      if (hasNeeds || callbacks.unit || integrationOption === false) {
        _this2.isUnitTest = true;
      } else if (integrationOption) {
        _this2.isUnitTest = false;
      } else {
        Ember.deprecate('the component:' + componentName + ' test module is implicitly running in unit test mode, ' + 'which will change to integration test mode by default in an upcoming version of ' + 'ember-test-helpers. Add `unit: true` or a `needs:[]` list to explicitly opt in to unit ' + 'test mode.', false, {
          id: 'ember-test-helpers.test-module-for-component.test-type',
          until: '0.6.0'
        });
        _this2.isUnitTest = true;
      }

      if (!_this2.isUnitTest && !_this2.isLegacy) {
        callbacks.integration = true;
      }

      if (_this2.isUnitTest || _this2.isLegacy) {
        _this2.setupSteps.push(_this2.setupComponentUnitTest);
      } else {
        _this2.callbacks.subject = function () {
          throw new Error("component integration tests do not support `subject()`. Instead, render the component as if it were HTML: `this.render('<my-component foo=true>');`. For more information, read: http://guides.emberjs.com/v2.2.0/testing/testing-components/");
        };
        _this2.setupSteps.push(_this2.setupComponentIntegrationTest);
        _this2.teardownSteps.unshift(_this2.teardownComponent);
      }

      if (Ember.View && Ember.View.views) {
        _this2.setupSteps.push(_this2._aliasViewRegistry);
        _this2.teardownSteps.unshift(_this2._resetViewRegistry);
      }
      return _this2;
    }

    _createClass(_class, [{
      key: 'initIntegration',
      value: function initIntegration(options) {
        this.isLegacy = options.integration === 'legacy';
        this.isIntegration = options.integration !== 'legacy';
      }
    }, {
      key: '_aliasViewRegistry',
      value: function _aliasViewRegistry() {
        this._originalGlobalViewRegistry = Ember.View.views;
        var viewRegistry = this.container.lookup('-view-registry:main');

        if (viewRegistry) {
          Ember.View.views = viewRegistry;
        }
      }
    }, {
      key: '_resetViewRegistry',
      value: function _resetViewRegistry() {
        Ember.View.views = this._originalGlobalViewRegistry;
      }
    }, {
      key: 'setupComponentUnitTest',
      value: function setupComponentUnitTest() {
        var _this = this;
        var resolver = this.resolver;
        var context = this.context;

        var layoutName = 'template:components/' + this.componentName;

        var layout = resolver.resolve(layoutName);

        var thingToRegisterWith = this.registry || this.container;
        if (layout) {
          thingToRegisterWith.register(layoutName, layout);
          thingToRegisterWith.injection(this.subjectName, 'layout', layoutName);
        }
        var eventDispatcher = resolver.resolve('event_dispatcher:main');
        if (eventDispatcher) {
          thingToRegisterWith.register('event_dispatcher:main', eventDispatcher);
        }

        context.dispatcher = this.container.lookup('event_dispatcher:main') || Ember.EventDispatcher.create();
        context.dispatcher.setup({}, '#ember-testing');

        context._element = null;

        this.callbacks.render = function () {
          var subject;

          Ember.run(function () {
            subject = context.subject();
            subject.appendTo('#ember-testing');
          });

          context._element = subject.element;

          _this.teardownSteps.unshift(function () {
            Ember.run(function () {
              Ember.tryInvoke(subject, 'destroy');
            });
          });
        };

        this.callbacks.append = function () {
          Ember.deprecate('this.append() is deprecated. Please use this.render() or this.$() instead.', false, {
            id: 'ember-test-helpers.test-module-for-component.append',
            until: '0.6.0'
          });
          return context.$();
        };

        context.$ = function () {
          this.render();
          var subject = this.subject();

          return subject.$.apply(subject, arguments);
        };
      }
    }, {
      key: 'setupComponentIntegrationTest',
      value: function setupComponentIntegrationTest() {
        if (isPreGlimmer) {
          return _legacyOverrides.preGlimmerSetupIntegrationForComponent.apply(this, arguments);
        } else {
          return _setupComponentIntegrationTest.apply(this, arguments);
        }
      }
    }, {
      key: 'setupContext',
      value: function setupContext() {
        _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'setupContext', this).call(this);

        // only setup the injection if we are running against a version
        // of Ember that has `-view-registry:main` (Ember >= 1.12)
        if (this.container.factoryFor ? this.container.factoryFor('-view-registry:main') : this.container.lookupFactory('-view-registry:main')) {
          (this.registry || this.container).injection('component', '_viewRegistry', '-view-registry:main');
        }

        if (!this.isUnitTest && !this.isLegacy) {
          this.context.factory = function () {};
        }
      }
    }, {
      key: 'teardownComponent',
      value: function teardownComponent() {
        var component = this.component;
        if (component) {
          Ember.run(component, 'destroy');
          this.component = null;
        }
      }
    }]);

    return _class;
  }(_testModule.default);

  exports.default = _class;
  function _setupComponentIntegrationTest() {
    var module = this;
    var context = this.context;

    this.actionHooks = context[ACTION_KEY] = {};
    context.dispatcher = this.container.lookup('event_dispatcher:main') || Ember.EventDispatcher.create();
    context.dispatcher.setup({}, '#ember-testing');

    var hasRendered = false;
    var OutletView = module.container.factoryFor ? module.container.factoryFor('view:-outlet') : module.container.lookupFactory('view:-outlet');
    var OutletTemplate = module.container.lookup('template:-outlet');
    var toplevelView = module.component = OutletView.create();
    var hasOutletTemplate = !!OutletTemplate;
    var outletState = {
      render: {
        owner: Ember.getOwner ? Ember.getOwner(module.container) : undefined,
        into: undefined,
        outlet: 'main',
        name: 'application',
        controller: module.context,
        ViewClass: undefined,
        template: OutletTemplate
      },

      outlets: {}
    };

    var element = document.getElementById('ember-testing');
    var templateId = 0;

    if (hasOutletTemplate) {
      Ember.run(function () {
        toplevelView.setOutletState(outletState);
      });
    }

    context.render = function (template) {
      if (!template) {
        throw new Error('in a component integration test you must pass a template to `render()`');
      }
      if (Ember.isArray(template)) {
        template = template.join('');
      }
      if (typeof template === 'string') {
        template = Ember.Handlebars.compile(template);
      }

      var templateFullName = 'template:-undertest-' + ++templateId;
      this.registry.register(templateFullName, template);
      var stateToRender = {
        owner: Ember.getOwner ? Ember.getOwner(module.container) : undefined,
        into: undefined,
        outlet: 'main',
        name: 'index',
        controller: module.context,
        ViewClass: undefined,
        template: module.container.lookup(templateFullName),
        outlets: {}
      };

      if (hasOutletTemplate) {
        stateToRender.name = 'index';
        outletState.outlets.main = { render: stateToRender, outlets: {} };
      } else {
        stateToRender.name = 'application';
        outletState = { render: stateToRender, outlets: {} };
      }

      Ember.run(function () {
        toplevelView.setOutletState(outletState);
      });

      if (!hasRendered) {
        Ember.run(module.component, 'appendTo', '#ember-testing');
        hasRendered = true;
      }

      if (EmberENV._APPLICATION_TEMPLATE_WRAPPER !== false) {
        // ensure the element is based on the wrapping toplevel view
        // Ember still wraps the main application template with a
        // normal tagged view
        context._element = element = document.querySelector('#ember-testing > .ember-view');
      } else {
        context._element = element = document.querySelector('#ember-testing');
      }
    };

    context.$ = function (selector) {
      // emulates Ember internal behavor of `this.$` in a component
      // https://github.com/emberjs/ember.js/blob/v2.5.1/packages/ember-views/lib/views/states/has_element.js#L18
      return selector ? Ember.$(selector, element) : Ember.$(element);
    };

    context.set = function (key, value) {
      var ret = Ember.run(function () {
        return Ember.set(context, key, value);
      });

      if ((0, _hasEmberVersion.default)(2, 0)) {
        return ret;
      }
    };

    context.setProperties = function (hash) {
      var ret = Ember.run(function () {
        return Ember.setProperties(context, hash);
      });

      if ((0, _hasEmberVersion.default)(2, 0)) {
        return ret;
      }
    };

    context.get = function (key) {
      return Ember.get(context, key);
    };

    context.getProperties = function () {
      var args = Array.prototype.slice.call(arguments);
      return Ember.getProperties(context, args);
    };

    context.on = function (actionName, handler) {
      module.actionHooks[actionName] = handler;
    };

    context.send = function (actionName) {
      var hook = module.actionHooks[actionName];
      if (!hook) {
        throw new Error('integration testing template received unexpected action ' + actionName);
      }
      hook.apply(module.context, Array.prototype.slice.call(arguments, 1));
    };

    context.clearRender = function () {
      Ember.run(function () {
        toplevelView.setOutletState({
          render: {
            owner: module.container,
            into: undefined,
            outlet: 'main',
            name: 'application',
            controller: module.context,
            ViewClass: undefined,
            template: undefined
          },
          outlets: {}
        });
      });
    };
  }
  exports.setupComponentIntegrationTest = _setupComponentIntegrationTest;
});
define('ember-test-helpers/legacy-0-6-x/test-module-for-model', ['exports', 'require', 'ember-test-helpers/legacy-0-6-x/test-module'], function (exports, _require2, _testModule) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var _class = function (_TestModule) {
    _inherits(_class, _TestModule);

    function _class(modelName, description, callbacks) {
      _classCallCheck(this, _class);

      var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, 'model:' + modelName, description, callbacks));

      _this.modelName = modelName;

      _this.setupSteps.push(_this.setupModel);
      return _this;
    }

    _createClass(_class, [{
      key: 'setupModel',
      value: function setupModel() {
        var container = this.container;
        var defaultSubject = this.defaultSubject;
        var callbacks = this.callbacks;
        var modelName = this.modelName;

        var adapterFactory = container.factoryFor ? container.factoryFor('adapter:application') : container.lookupFactory('adapter:application');
        if (!adapterFactory) {
          if (requirejs.entries['ember-data/adapters/json-api']) {
            adapterFactory = (0, _require2.default)('ember-data/adapters/json-api')['default'];
          }

          // when ember-data/adapters/json-api is provided via ember-cli shims
          // using Ember Data 1.x the actual JSONAPIAdapter isn't found, but the
          // above require statement returns a bizzaro object with only a `default`
          // property (circular reference actually)
          if (!adapterFactory || !adapterFactory.create) {
            adapterFactory = DS.JSONAPIAdapter || DS.FixtureAdapter;
          }

          var thingToRegisterWith = this.registry || this.container;
          thingToRegisterWith.register('adapter:application', adapterFactory);
        }

        callbacks.store = function () {
          var container = this.container;
          return container.lookup('service:store') || container.lookup('store:main');
        };

        if (callbacks.subject === defaultSubject) {
          callbacks.subject = function (options) {
            var container = this.container;

            return Ember.run(function () {
              var store = container.lookup('service:store') || container.lookup('store:main');
              return store.createRecord(modelName, options);
            });
          };
        }
      }
    }]);

    return _class;
  }(_testModule.default);

  exports.default = _class;
});
define('ember-test-helpers/legacy-0-6-x/test-module', ['exports', 'ember-test-helpers/legacy-0-6-x/abstract-test-module', '@ember/test-helpers', 'ember-test-helpers/legacy-0-6-x/build-registry', '@ember/test-helpers/has-ember-version'], function (exports, _abstractTestModule, _testHelpers, _buildRegistry, _hasEmberVersion) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  };

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  var _get = function get(object, property, receiver) {
    if (object === null) object = Function.prototype;
    var desc = Object.getOwnPropertyDescriptor(object, property);

    if (desc === undefined) {
      var parent = Object.getPrototypeOf(object);

      if (parent === null) {
        return undefined;
      } else {
        return get(parent, property, receiver);
      }
    } else if ("value" in desc) {
      return desc.value;
    } else {
      var getter = desc.get;

      if (getter === undefined) {
        return undefined;
      }

      return getter.call(receiver);
    }
  };

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var _class = function (_AbstractTestModule) {
    _inherits(_class, _AbstractTestModule);

    function _class(subjectName, description, callbacks) {
      _classCallCheck(this, _class);

      // Allow `description` to be omitted, in which case it should
      // default to `subjectName`
      if (!callbacks && (typeof description === 'undefined' ? 'undefined' : _typeof(description)) === 'object') {
        callbacks = description;
        description = subjectName;
      }

      var _this2 = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, description || subjectName, callbacks));

      _this2.subjectName = subjectName;
      _this2.description = description || subjectName;
      _this2.resolver = _this2.callbacks.resolver || (0, _testHelpers.getResolver)();

      if (_this2.callbacks.integration && _this2.callbacks.needs) {
        throw new Error("cannot declare 'integration: true' and 'needs' in the same module");
      }

      if (_this2.callbacks.integration) {
        _this2.initIntegration(callbacks);
        delete callbacks.integration;
      }

      _this2.initSubject();
      _this2.initNeeds();
      return _this2;
    }

    _createClass(_class, [{
      key: 'initIntegration',
      value: function initIntegration(options) {
        if (options.integration === 'legacy') {
          throw new Error("`integration: 'legacy'` is only valid for component tests.");
        }
        this.isIntegration = true;
      }
    }, {
      key: 'initSubject',
      value: function initSubject() {
        this.callbacks.subject = this.callbacks.subject || this.defaultSubject;
      }
    }, {
      key: 'initNeeds',
      value: function initNeeds() {
        this.needs = [this.subjectName];
        if (this.callbacks.needs) {
          this.needs = this.needs.concat(this.callbacks.needs);
          delete this.callbacks.needs;
        }
      }
    }, {
      key: 'initSetupSteps',
      value: function initSetupSteps() {
        this.setupSteps = [];
        this.contextualizedSetupSteps = [];

        if (this.callbacks.beforeSetup) {
          this.setupSteps.push(this.callbacks.beforeSetup);
          delete this.callbacks.beforeSetup;
        }

        this.setupSteps.push(this.setupContainer);
        this.setupSteps.push(this.setupContext);
        this.setupSteps.push(this.setupTestElements);
        this.setupSteps.push(this.setupAJAXListeners);
        this.setupSteps.push(this.setupPromiseListeners);

        if (this.callbacks.setup) {
          this.contextualizedSetupSteps.push(this.callbacks.setup);
          delete this.callbacks.setup;
        }
      }
    }, {
      key: 'initTeardownSteps',
      value: function initTeardownSteps() {
        this.teardownSteps = [];
        this.contextualizedTeardownSteps = [];

        if (this.callbacks.teardown) {
          this.contextualizedTeardownSteps.push(this.callbacks.teardown);
          delete this.callbacks.teardown;
        }

        this.teardownSteps.push(this.teardownSubject);
        this.teardownSteps.push(this.teardownContainer);
        this.teardownSteps.push(this.teardownContext);
        this.teardownSteps.push(this.teardownTestElements);
        this.teardownSteps.push(this.teardownAJAXListeners);
        this.teardownSteps.push(this.teardownPromiseListeners);

        if (this.callbacks.afterTeardown) {
          this.teardownSteps.push(this.callbacks.afterTeardown);
          delete this.callbacks.afterTeardown;
        }
      }
    }, {
      key: 'setupContainer',
      value: function setupContainer() {
        if (this.isIntegration || this.isLegacy) {
          this._setupIntegratedContainer();
        } else {
          this._setupIsolatedContainer();
        }
      }
    }, {
      key: 'setupContext',
      value: function setupContext() {
        var subjectName = this.subjectName;
        var container = this.container;

        var factory = function factory() {
          return container.factoryFor ? container.factoryFor(subjectName) : container.lookupFactory(subjectName);
        };

        _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'setupContext', this).call(this, {
          container: this.container,
          registry: this.registry,
          factory: factory,
          register: function register() {
            var target = this.registry || this.container;
            return target.register.apply(target, arguments);
          }
        });

        if (Ember.setOwner) {
          Ember.setOwner(this.context, this.container.owner);
        }

        this.setupInject();
      }
    }, {
      key: 'setupInject',
      value: function setupInject() {
        var module = this;
        var context = this.context;

        if (Ember.inject) {
          var keys = (Object.keys || keys)(Ember.inject);

          keys.forEach(function (typeName) {
            context.inject[typeName] = function (name, opts) {
              var alias = opts && opts.as || name;
              Ember.run(function () {
                Ember.set(context, alias, module.container.lookup(typeName + ':' + name));
              });
            };
          });
        }
      }
    }, {
      key: 'teardownSubject',
      value: function teardownSubject() {
        var subject = this.cache.subject;

        if (subject) {
          Ember.run(function () {
            Ember.tryInvoke(subject, 'destroy');
          });
        }
      }
    }, {
      key: 'teardownContainer',
      value: function teardownContainer() {
        var container = this.container;
        Ember.run(function () {
          container.destroy();
        });
      }
    }, {
      key: 'defaultSubject',
      value: function defaultSubject(options, factory) {
        return factory.create(options);
      }
    }, {
      key: 'contextualizeCallbacks',
      value: function contextualizeCallbacks() {
        var callbacks = this.callbacks;
        var context = this.context;

        this.cache = this.cache || {};
        this.cachedCalls = this.cachedCalls || {};

        var keys = (Object.keys || keys)(callbacks);
        var keysLength = keys.length;

        if (keysLength) {
          var deprecatedContext = this._buildDeprecatedContext(this, context);
          for (var i = 0; i < keysLength; i++) {
            this._contextualizeCallback(context, keys[i], deprecatedContext);
          }
        }
      }
    }, {
      key: '_contextualizeCallback',
      value: function _contextualizeCallback(context, key, callbackContext) {
        var _this = this;
        var callbacks = this.callbacks;
        var factory = context.factory;

        context[key] = function (options) {
          if (_this.cachedCalls[key]) {
            return _this.cache[key];
          }

          var result = callbacks[key].call(callbackContext, options, factory());

          _this.cache[key] = result;
          _this.cachedCalls[key] = true;

          return result;
        };
      }
    }, {
      key: '_buildDeprecatedContext',
      value: function _buildDeprecatedContext(module, context) {
        var deprecatedContext = Object.create(context);

        var keysForDeprecation = Object.keys(module);

        for (var i = 0, l = keysForDeprecation.length; i < l; i++) {
          this._proxyDeprecation(module, deprecatedContext, keysForDeprecation[i]);
        }

        return deprecatedContext;
      }
    }, {
      key: '_proxyDeprecation',
      value: function _proxyDeprecation(obj, proxy, key) {
        if (typeof proxy[key] === 'undefined') {
          Object.defineProperty(proxy, key, {
            get: function get() {
              Ember.deprecate('Accessing the test module property "' + key + '" from a callback is deprecated.', false, {
                id: 'ember-test-helpers.test-module.callback-context',
                until: '0.6.0'
              });
              return obj[key];
            }
          });
        }
      }
    }, {
      key: '_setupContainer',
      value: function _setupContainer(isolated) {
        var resolver = this.resolver;

        var items = (0, _buildRegistry.default)(!isolated ? resolver : Object.create(resolver, {
          resolve: {
            value: function value() {}
          }
        }));

        this.container = items.container;
        this.registry = items.registry;

        if ((0, _hasEmberVersion.default)(1, 13)) {
          var thingToRegisterWith = this.registry || this.container;
          var router = resolver.resolve('router:main');
          router = router || Ember.Router.extend();
          thingToRegisterWith.register('router:main', router);
        }
      }
    }, {
      key: '_setupIsolatedContainer',
      value: function _setupIsolatedContainer() {
        var resolver = this.resolver;
        this._setupContainer(true);

        var thingToRegisterWith = this.registry || this.container;

        for (var i = this.needs.length; i > 0; i--) {
          var fullName = this.needs[i - 1];
          var normalizedFullName = resolver.normalize(fullName);
          thingToRegisterWith.register(fullName, resolver.resolve(normalizedFullName));
        }

        if (!this.registry) {
          this.container.resolver = function () {};
        }
      }
    }, {
      key: '_setupIntegratedContainer',
      value: function _setupIntegratedContainer() {
        this._setupContainer();
      }
    }]);

    return _class;
  }(_abstractTestModule.default);

  exports.default = _class;
});
define('ember-test-helpers/wait', ['exports', '@ember/test-helpers/settled', '@ember/test-helpers'], function (exports, _settled, _testHelpers) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports._teardownPromiseListeners = exports._teardownAJAXHooks = exports._setupPromiseListeners = exports._setupAJAXHooks = undefined;
  Object.defineProperty(exports, '_setupAJAXHooks', {
    enumerable: true,
    get: function () {
      return _settled._setupAJAXHooks;
    }
  });
  Object.defineProperty(exports, '_setupPromiseListeners', {
    enumerable: true,
    get: function () {
      return _settled._setupPromiseListeners;
    }
  });
  Object.defineProperty(exports, '_teardownAJAXHooks', {
    enumerable: true,
    get: function () {
      return _settled._teardownAJAXHooks;
    }
  });
  Object.defineProperty(exports, '_teardownPromiseListeners', {
    enumerable: true,
    get: function () {
      return _settled._teardownPromiseListeners;
    }
  });
  exports.default = wait;

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  };

  /**
    Returns a promise that resolves when in a settled state (see `isSettled` for
    a definition of "settled state").
  
    @private
    @deprecated
    @param {Object} [options={}] the options to be used for waiting
    @param {boolean} [options.waitForTimers=true] should timers be waited upon
    @param {boolean} [options.waitForAjax=true] should $.ajax requests be waited upon
    @param {boolean} [options.waitForWaiters=true] should test waiters be waited upon
    @returns {Promise<void>} resolves when settled
  */
  function wait() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) !== 'object' || options === null) {
      options = {};
    }

    return (0, _testHelpers.waitUntil)(function () {
      var waitForTimers = 'waitForTimers' in options ? options.waitForTimers : true;
      var waitForAJAX = 'waitForAJAX' in options ? options.waitForAJAX : true;
      var waitForWaiters = 'waitForWaiters' in options ? options.waitForWaiters : true;

      var _getSettledState = (0, _testHelpers.getSettledState)(),
          hasPendingTimers = _getSettledState.hasPendingTimers,
          hasRunLoop = _getSettledState.hasRunLoop,
          hasPendingRequests = _getSettledState.hasPendingRequests,
          hasPendingWaiters = _getSettledState.hasPendingWaiters;

      if (waitForTimers && (hasPendingTimers || hasRunLoop)) {
        return false;
      }

      if (waitForAJAX && hasPendingRequests) {
        return false;
      }

      if (waitForWaiters && hasPendingWaiters) {
        return false;
      }

      return true;
    }, { timeout: Infinity });
  }
});
define('ember-osf-web/tests/engines/app-components/integration/helpers/clip-test', ['@ember/test-helpers', 'ember-osf-web/tests/helpers/engines', 'qunit'], function (_testHelpers, _engines, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    var i18nStub = Ember.Service.extend({
        t: function t(key) {
            if (key === 'general.ellipsis') {
                return '...';
            }
            throw new Error('Unknown translation ' + key);
        }
    });
    (0, _qunit.module)('Integration | Helper | clip', function (hooks) {
        (0, _engines.setupEngineRenderingTest)(hooks, 'registries');
        (0, _qunit.test)('it renders', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                var i18n, cases, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, testCase;

                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                this.owner.register('service:i18n', i18nStub);
                                i18n = this.owner.lookup('service:i18n');
                                cases = [{
                                    text: 'A'.repeat(200),
                                    expected: 'A'.repeat(200)
                                }, {
                                    text: 'A'.repeat(201),
                                    expected: '' + 'A'.repeat(197) + i18n.t('general.ellipsis')
                                }];
                                _iteratorNormalCompletion = true;
                                _didIteratorError = false;
                                _iteratorError = undefined;
                                _context.prev = 6;
                                _iterator = cases[Symbol.iterator]();

                            case 8:
                                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                                    _context.next = 17;
                                    break;
                                }

                                testCase = _step.value;

                                this.set('text', testCase.text);
                                _context.next = 13;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "iSlGV/rL",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"clip\",[[23,[\"text\"]],200],null],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 13:
                                assert.dom(this.element).hasText(testCase.expected);

                            case 14:
                                _iteratorNormalCompletion = true;
                                _context.next = 8;
                                break;

                            case 17:
                                _context.next = 23;
                                break;

                            case 19:
                                _context.prev = 19;
                                _context.t0 = _context['catch'](6);
                                _didIteratorError = true;
                                _iteratorError = _context.t0;

                            case 23:
                                _context.prev = 23;
                                _context.prev = 24;

                                if (!_iteratorNormalCompletion && _iterator.return) {
                                    _iterator.return();
                                }

                            case 26:
                                _context.prev = 26;

                                if (!_didIteratorError) {
                                    _context.next = 29;
                                    break;
                                }

                                throw _iteratorError;

                            case 29:
                                return _context.finish(26);

                            case 30:
                                return _context.finish(23);

                            case 31:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this, [[6, 19, 23, 31], [24,, 26, 30]]);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/engines/app-components/integration/helpers/sort-test', ['@ember/test-helpers', 'ember-osf-web/tests/helpers/engines', 'qunit'], function (_testHelpers, _engines, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Integration | Helper | sort', function (hooks) {
        (0, _engines.setupEngineRenderingTest)(hooks, 'collections');
        (0, _qunit.test)('it renders', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                var options;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                options = ['Charlie', 'Delta', 'Bravo', 'Alpha'];

                                this.setProperties({ options: options });
                                _context.next = 4;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "7pPRGCgC",
                                    "block": "{\"symbols\":[\"option\"],\"statements\":[[4,\"each\",[[27,\"sort\",[[23,[\"options\"]]],null]],null,{\"statements\":[[0,\" \"],[1,[22,1,[]],false],[0,\" \"]],\"parameters\":[1]},null]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 4:
                                assert.dom(this.element).hasText(' Alpha Bravo Charlie Delta ');

                            case 5:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/engines/app-components/integration/helpers/unescape-xml-entities', ['@ember/test-helpers', 'ember-osf-web/tests/helpers/engines', 'qunit'], function (_testHelpers, _engines, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Integration | Helper | unescape-xml-entities', function (hooks) {
        (0, _engines.setupEngineRenderingTest)(hooks, 'registries');
        (0, _qunit.test)('it renders', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                var cases, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, testCase;

                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                cases = [{
                                    text: '&amp;test&amp;test&amp;',
                                    expected: '&test&test&'
                                }, {
                                    text: '&lt;test&lt;test&lt;',
                                    expected: '<test<test<'
                                }, {
                                    text: '&gt;test&gt;test&gt;',
                                    expected: '>test>test>'
                                }, {
                                    text: '&gt;test&lt;test&amp;',
                                    expected: '>test<test&'
                                }];
                                _iteratorNormalCompletion = true;
                                _didIteratorError = false;
                                _iteratorError = undefined;
                                _context.prev = 4;
                                _iterator = cases[Symbol.iterator]();

                            case 6:
                                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                                    _context.next = 15;
                                    break;
                                }

                                testCase = _step.value;

                                this.set('text', testCase.text);
                                _context.next = 11;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "sSfJnMT1",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"unescape-xml-entities\",[[23,[\"text\"]]],null],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 11:
                                assert.dom(this.element).hasText(testCase.expected);

                            case 12:
                                _iteratorNormalCompletion = true;
                                _context.next = 6;
                                break;

                            case 15:
                                _context.next = 21;
                                break;

                            case 17:
                                _context.prev = 17;
                                _context.t0 = _context['catch'](4);
                                _didIteratorError = true;
                                _iteratorError = _context.t0;

                            case 21:
                                _context.prev = 21;
                                _context.prev = 22;

                                if (!_iteratorNormalCompletion && _iterator.return) {
                                    _iterator.return();
                                }

                            case 24:
                                _context.prev = 24;

                                if (!_didIteratorError) {
                                    _context.next = 27;
                                    break;
                                }

                                throw _iteratorError;

                            case 27:
                                return _context.finish(24);

                            case 28:
                                return _context.finish(21);

                            case 29:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this, [[4, 17, 21, 29], [22,, 24, 28]]);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/engines/registries/integration/components/navbar/component-test', ['@ember/test-helpers', 'ember-osf-web/tests/helpers/engines', 'qunit'], function (_testHelpers, _engines, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    /* tslint:disable:only-arrow-functions */
    (0, _qunit.module)('Registries | Integration | Component | Navbar', function (hooks) {
        (0, _engines.setupEngineRenderingTest)(hooks, 'registries');
        (0, _qunit.test)('it renders', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "6bNNBWDC",
                                    "block": "{\"symbols\":[],\"statements\":[[0,\"\\n            \"],[5,\"navbar\",[],[[],[]],{\"statements\":[[0,\"\\n                This is a test!\\n            \"]],\"parameters\":[]}],[0,\"\\n        \"]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                assert.dom('nav').exists();
                                assert.dom('nav').hasText('This is a test!');
                                assert.dom('nav').hasAttribute('role', 'navigation');

                            case 5:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('it yields components', function () {
            var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                assert.expect(4);
                                this.set('action1', function () {
                                    return assert.ok(true, 'Action 1 was called using click=');
                                });
                                this.set('action2', function () {
                                    return assert.ok(true, 'Action 2 was called using onclick=');
                                });
                                _context2.next = 5;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "pVZAat27",
                                    "block": "{\"symbols\":[\"nav\"],\"statements\":[[0,\"\\n            \"],[5,\"navbar\",[],[[],[]],{\"statements\":[[0,\"\\n                \"],[6,[22,1,[\"buttons\",\"primary\"]],[[11,\"data-test-id\",\"1\"]],[[\"@click\"],[[27,\"action\",[[22,0,[]],[23,[\"action2\"]]],null]]],{\"statements\":[[0,\"\\n                    Hello World!\\n                \"]],\"parameters\":[]}],[0,\"\\n\\n                \"],[6,[22,1,[\"buttons\",\"secondary\"]],[[11,\"data-test-id\",\"2\"]],[[\"@onclick\"],[[27,\"action\",[[22,0,[]],[23,[\"action2\"]]],null]]],{\"statements\":[[0,\"\\n                    Hello World Again!\\n                \"]],\"parameters\":[]}],[0,\"\\n            \"]],\"parameters\":[1]}],[0,\"\\n        \"]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 5:
                                assert.dom('nav > a[data-test-id="1"][role="button"]').hasText('Hello World!');
                                assert.dom('nav > a[data-test-id="2"][role="button"]').hasText('Hello World Again!');
                                _context2.next = 9;
                                return (0, _testHelpers.click)('[data-test-id="1"]');

                            case 9:
                                _context2.next = 11;
                                return (0, _testHelpers.click)('[data-test-id="2"]');

                            case 11:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            return function (_x2) {
                return _ref3.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/engines/registries/integration/components/registries-navbar/component-test', ['@ember/test-helpers', 'ember-i18n/test-support', 'ember-osf-web/tests/helpers/engines', 'ember-responsive/test-support', 'qunit', 'sinon'], function (_testHelpers, _testSupport, _engines, _testSupport2, _qunit, _sinon) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    var statusMessagesStub = Ember.Service.extend({
        messages: [],
        getCookieMessages: function getCookieMessages() {
            return [];
        }
    });
    var analyticsStub = Ember.Service.extend({
        actions: {
            click: function click() {}
        }
    });
    var sessionStub = Ember.Service.extend({
        isAuthenticated: false,
        on: function on() {}
    });
    var currentUserStub = Ember.Service.extend({
        user: {
            profileImage: 'example.png?'
        },
        checkShowTosConsentBanner: function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function checkShowTosConsentBanner() {
                return _ref2.apply(this, arguments);
            }

            return checkShowTosConsentBanner;
        }()
    });
    var featuresStub = Ember.Service.extend({
        isEnabled: function isEnabled() {
            return false;
        }
    });
    function visibleText(selector) {
        // https://stackoverflow.com/questions/1846177/how-do-i-get-just-the-visible-text-with-jquery-or-javascript
        return Ember.$(selector + ' *:not(:has(*)):visible').text().replace(/\s+/g, ' ').trim();
    }
    /* tslint:disable:only-arrow-functions */
    (0, _qunit.module)('Registries | Integration | Component | registries-navbar', function (hooks) {
        (0, _engines.setupEngineRenderingTest)(hooks, 'registries');
        hooks.beforeEach(function () {
            this.owner.lookup('service:router').set('_router.currentURL', 'FakeURL');
            this.owner.register('service:session', sessionStub);
            this.owner.register('service:features', featuresStub);
            this.owner.register('service:analytics', analyticsStub);
            this.owner.register('service:currentUser', currentUserStub);
            this.owner.register('service:statusMessages', statusMessagesStub);
        });
        (0, _qunit.test)('it renders', function () {
            var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                _context2.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "QEyQfkMs",
                                    "block": "{\"symbols\":[],\"statements\":[[5,\"registries-navbar\",[],[[],[]]]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                assert.dom('nav[data-test-nav]').exists('The nav element is rendered');

                            case 3:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            return function (_x) {
                return _ref3.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('desktop layout', function () {
            var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                (0, _testSupport2.setBreakpoint)('desktop');
                                _context3.next = 3;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "C33P7+yY",
                                    "block": "{\"symbols\":[],\"statements\":[[5,\"registries-navbar\",[],[[\"@signUpURL\"],[\"http://example.com\"]]]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 3:
                                assert.equal(visibleText('[data-test-service]'), '' + (0, _testSupport.t)('general.OSF') + (0, _testSupport.t)('general.services.registries'));
                                assert.dom('[data-test-search-bar]').isVisible('Search bar is visible');
                                assert.dom('[data-test-search-bar-mobile]').isNotVisible('Mobile search bar is not visible on desktop');
                                assert.dom('a[data-test-help]').isVisible('Help button is visible');
                                assert.dom('a[data-test-help]').hasText('' + (0, _testSupport.t)('general.help'), 'Help button has correct text');
                                assert.dom('a[data-test-donate]').isVisible('Donate button is visible');
                                assert.dom('a[data-test-donate]').hasText('' + (0, _testSupport.t)('navbar.donate'), 'Donate button has correct text');

                            case 10:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            return function (_x2) {
                return _ref4.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('desktop layout (logged out)', function () {
            var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                (0, _testSupport2.setBreakpoint)('desktop');
                                this.owner.lookup('service:session').set('isAuthenticated', false);
                                _context4.next = 4;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "JltPesp3",
                                    "block": "{\"symbols\":[],\"statements\":[[5,\"registries-navbar\",[],[[\"@campaign\",\"@signUpURL\"],[\"osf-registries\",\"http://example.com\"]]]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 4:
                                assert.dom('a[data-test-join]').hasText('' + (0, _testSupport.t)('navbar.join'));
                                assert.dom('a[data-test-join]').hasAttribute('href', 'http://example.com?campaign=osf-registries&next=http%3A%2F%2Flocalhost%3A5000%2FFakeURL');
                                assert.dom('a[data-test-join]').isVisible('Join button is visible');
                                assert.dom('a[role="button"][data-test-login]').hasText('' + (0, _testSupport.t)('navbar.login'));
                                assert.dom('a[role="button"][data-test-login]').isVisible('Login button is visible');
                                assert.dom('img[data-test-gravatar]').isNotVisible('No user Gravatar when logged out');

                            case 10:
                            case 'end':
                                return _context4.stop();
                        }
                    }
                }, _callee4, this);
            }));

            return function (_x3) {
                return _ref5.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('desktop layout (logged in)', function () {
            var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
                return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                        switch (_context5.prev = _context5.next) {
                            case 0:
                                (0, _testSupport2.setBreakpoint)('desktop');
                                this.owner.lookup('service:session').set('isAuthenticated', true);
                                _context5.next = 4;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "C33P7+yY",
                                    "block": "{\"symbols\":[],\"statements\":[[5,\"registries-navbar\",[],[[\"@signUpURL\"],[\"http://example.com\"]]]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 4:
                                // Not visible due to not having a test image
                                assert.dom('img[data-test-gravatar]').exists('User Gravatar is rendered');
                                assert.dom('img[data-test-gravatar]').hasAttribute('src', 'example.png?&s=30');
                                assert.dom('img[data-test-gravatar]').hasAttribute('alt', '' + (0, _testSupport.t)('auth_dropdown.user_gravatar'));
                                assert.dom('a[role="button"][data-test-join]').isNotVisible('Join button not is visible');
                                assert.dom('a[role="button"][data-test-login]').isNotVisible('Login button not is visible');

                            case 9:
                            case 'end':
                                return _context5.stop();
                        }
                    }
                }, _callee5, this);
            }));

            return function (_x4) {
                return _ref6.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('tablet layout', function () {
            var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
                return regeneratorRuntime.wrap(function _callee6$(_context6) {
                    while (1) {
                        switch (_context6.prev = _context6.next) {
                            case 0:
                                (0, _testSupport2.setBreakpoint)('tablet');
                                _context6.next = 3;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "QEyQfkMs",
                                    "block": "{\"symbols\":[],\"statements\":[[5,\"registries-navbar\",[],[[],[]]]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 3:
                                assert.equal(visibleText('[data-test-service]'), '' + (0, _testSupport.t)('general.OSF') + (0, _testSupport.t)('general.services.registries'));
                                assert.dom('[data-test-search-bar]').isVisible('Search bar is visible');
                                assert.dom('[data-test-search-bar-mobile]').isNotVisible('Mobile search bar is not visible on tablet');
                                assert.dom('a[data-test-help]').isVisible('Help button is visible');
                                assert.dom('a[data-test-help]').hasText('' + (0, _testSupport.t)('general.help'), 'Help button has correct text');
                                assert.dom('a[data-test-donate]').isVisible('Donate button is visible');
                                assert.dom('a[data-test-donate]').hasText('' + (0, _testSupport.t)('navbar.donate'), 'Donate button has correct text');

                            case 10:
                            case 'end':
                                return _context6.stop();
                        }
                    }
                }, _callee6, this);
            }));

            return function (_x5) {
                return _ref7.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('tablet layout (logged out)', function () {
            var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
                return regeneratorRuntime.wrap(function _callee7$(_context7) {
                    while (1) {
                        switch (_context7.prev = _context7.next) {
                            case 0:
                                (0, _testSupport2.setBreakpoint)('tablet');
                                this.owner.lookup('service:session').set('isAuthenticated', false);
                                _context7.next = 4;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "QEyQfkMs",
                                    "block": "{\"symbols\":[],\"statements\":[[5,\"registries-navbar\",[],[[],[]]]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 4:
                                assert.dom('a[data-test-join]').hasText('' + (0, _testSupport.t)('navbar.join'));
                                assert.dom('a[data-test-join]').isVisible('Join button is visible');
                                assert.dom('a[role="button"][data-test-login]').hasText('' + (0, _testSupport.t)('navbar.login'));
                                assert.dom('a[role="button"][data-test-login]').isVisible('Login button is visible');
                                assert.dom('img[data-test-gravatar]').isNotVisible('No user Gravatar when logged out');

                            case 9:
                            case 'end':
                                return _context7.stop();
                        }
                    }
                }, _callee7, this);
            }));

            return function (_x6) {
                return _ref8.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('tablet layout (logged in)', function () {
            var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
                return regeneratorRuntime.wrap(function _callee8$(_context8) {
                    while (1) {
                        switch (_context8.prev = _context8.next) {
                            case 0:
                                (0, _testSupport2.setBreakpoint)('tablet');
                                this.owner.lookup('service:session').set('isAuthenticated', true);
                                _context8.next = 4;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "QEyQfkMs",
                                    "block": "{\"symbols\":[],\"statements\":[[5,\"registries-navbar\",[],[[],[]]]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 4:
                                // Not visible due to not having a test image
                                assert.dom('img[data-test-gravatar]').exists('User Gravatar is rendered');
                                assert.dom('a[role="button"][data-test-join]').isNotVisible('Join button not is visible');
                                assert.dom('a[role="button"][data-test-login]').isNotVisible('Login button not is visible');

                            case 7:
                            case 'end':
                                return _context8.stop();
                        }
                    }
                }, _callee8, this);
            }));

            return function (_x7) {
                return _ref9.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('mobile layout', function () {
            var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
                return regeneratorRuntime.wrap(function _callee9$(_context9) {
                    while (1) {
                        switch (_context9.prev = _context9.next) {
                            case 0:
                                (0, _testSupport2.setBreakpoint)('mobile');
                                this.owner.lookup('service:session').set('isAuthenticated', true);
                                _context9.next = 4;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "C33P7+yY",
                                    "block": "{\"symbols\":[],\"statements\":[[5,\"registries-navbar\",[],[[\"@signUpURL\"],[\"http://example.com\"]]]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 4:
                                assert.equal(visibleText('[data-test-service]'), (0, _testSupport.t)('general.services.registries'));
                                assert.dom('[data-test-search-bar-mobile]').isVisible('Mobile search bar visible');
                                assert.dom('a[data-test-help]').isNotVisible();
                                assert.dom('a[data-test-donate]').isNotVisible();
                                assert.dom('[data-test-search-bar]').isNotVisible('Search bar hidden');

                            case 9:
                            case 'end':
                                return _context9.stop();
                        }
                    }
                }, _callee9, this);
            }));

            return function (_x8) {
                return _ref10.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('mobile layout (logged out)', function () {
            var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
                return regeneratorRuntime.wrap(function _callee10$(_context10) {
                    while (1) {
                        switch (_context10.prev = _context10.next) {
                            case 0:
                                (0, _testSupport2.setBreakpoint)('mobile');
                                this.owner.lookup('service:session').set('isAuthenticated', false);
                                _context10.next = 4;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "C33P7+yY",
                                    "block": "{\"symbols\":[],\"statements\":[[5,\"registries-navbar\",[],[[\"@signUpURL\"],[\"http://example.com\"]]]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 4:
                                assert.dom('a[data-test-join]').hasText('' + (0, _testSupport.t)('navbar.join'));
                                assert.dom('a[data-test-join]').isVisible('Join button is visible');
                                assert.dom('a[role="button"][data-test-login]').hasText('' + (0, _testSupport.t)('navbar.login'));
                                assert.dom('a[role="button"][data-test-login]').isVisible('Login button is visible');
                                assert.dom('img[data-test-gravatar]').isNotVisible('No user Gravatar when logged out');

                            case 9:
                            case 'end':
                                return _context10.stop();
                        }
                    }
                }, _callee10, this);
            }));

            return function (_x9) {
                return _ref11.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('mobile layout (logged in)', function () {
            var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
                return regeneratorRuntime.wrap(function _callee11$(_context11) {
                    while (1) {
                        switch (_context11.prev = _context11.next) {
                            case 0:
                                (0, _testSupport2.setBreakpoint)('mobile');
                                this.owner.lookup('service:session').set('isAuthenticated', true);
                                _context11.next = 4;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "C33P7+yY",
                                    "block": "{\"symbols\":[],\"statements\":[[5,\"registries-navbar\",[],[[\"@signUpURL\"],[\"http://example.com\"]]]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 4:
                                // Not visible due to not having a test image
                                assert.dom('img[data-test-gravatar]').exists('User Gravatar is rendered');
                                assert.dom('a[role="button"][data-test-join]').isNotVisible('Join button not is visible');
                                assert.dom('a[role="button"][data-test-login]').isNotVisible('Login button not is visible');

                            case 7:
                            case 'end':
                                return _context11.stop();
                        }
                    }
                }, _callee11, this);
            }));

            return function (_x10) {
                return _ref12.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('onSearch', function () {
            var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(assert) {
                return regeneratorRuntime.wrap(function _callee12$(_context12) {
                    while (1) {
                        switch (_context12.prev = _context12.next) {
                            case 0:
                                (0, _testSupport2.setBreakpoint)('desktop');
                                this.set('onSearch', _sinon.default.stub());
                                _context12.next = 4;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "BvOTcelJ",
                                    "block": "{\"symbols\":[],\"statements\":[[5,\"registries-navbar\",[],[[\"@onSearch\"],[[22,0,[\"onSearch\"]]]]]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 4:
                                _context12.next = 6;
                                return (0, _testHelpers.fillIn)('[data-test-search-bar] input', 'This is my query');

                            case 6:
                                _context12.next = 8;
                                return (0, _testHelpers.triggerKeyEvent)('[data-test-search-bar] input', 'keyup', 13);

                            case 8:
                                assert.ok(this.get('onSearch').calledWith('This is my query'));

                            case 9:
                            case 'end':
                                return _context12.stop();
                        }
                    }
                }, _callee12, this);
            }));

            return function (_x11) {
                return _ref13.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('onSearch (Mobile)', function () {
            var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(assert) {
                return regeneratorRuntime.wrap(function _callee13$(_context13) {
                    while (1) {
                        switch (_context13.prev = _context13.next) {
                            case 0:
                                (0, _testSupport2.setBreakpoint)('mobile');
                                this.set('onSearch', _sinon.default.stub());
                                _context13.next = 4;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "BvOTcelJ",
                                    "block": "{\"symbols\":[],\"statements\":[[5,\"registries-navbar\",[],[[\"@onSearch\"],[[22,0,[\"onSearch\"]]]]]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 4:
                                assert.dom('[data-test-search-bar-mobile]').isVisible();
                                _context13.next = 7;
                                return (0, _testHelpers.fillIn)('[data-test-search-bar-mobile] input', 'This is my query');

                            case 7:
                                _context13.next = 9;
                                return (0, _testHelpers.triggerKeyEvent)('[data-test-search-bar-mobile] input', 'keyup', 13);

                            case 9:
                                assert.ok(this.get('onSearch').calledWith('This is my query'));

                            case 10:
                            case 'end':
                                return _context13.stop();
                        }
                    }
                }, _callee13, this);
            }));

            return function (_x12) {
                return _ref14.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('service list', function () {
            var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(assert) {
                return regeneratorRuntime.wrap(function _callee14$(_context14) {
                    while (1) {
                        switch (_context14.prev = _context14.next) {
                            case 0:
                                _context14.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "QEyQfkMs",
                                    "block": "{\"symbols\":[],\"statements\":[[5,\"registries-navbar\",[],[[],[]]]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                assert.dom('[data-test-service-list]').isNotVisible();
                                _context14.next = 5;
                                return (0, _testHelpers.click)('[data-test-service]');

                            case 5:
                                assert.dom('[data-test-service-list]').isVisible();

                            case 6:
                            case 'end':
                                return _context14.stop();
                        }
                    }
                }, _callee14, this);
            }));

            return function (_x13) {
                return _ref15.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('auth dropdown', function () {
            var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(assert) {
                return regeneratorRuntime.wrap(function _callee15$(_context15) {
                    while (1) {
                        switch (_context15.prev = _context15.next) {
                            case 0:
                                this.owner.lookup('service:session').set('isAuthenticated', true);
                                _context15.next = 3;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "QEyQfkMs",
                                    "block": "{\"symbols\":[],\"statements\":[[5,\"registries-navbar\",[],[[],[]]]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 3:
                                assert.dom('[data-test-auth-dropdown]').isNotVisible();
                                _context15.next = 6;
                                return (0, _testHelpers.click)('[data-test-gravatar]');

                            case 6:
                                assert.dom('[data-test-auth-dropdown]').isVisible();

                            case 7:
                            case 'end':
                                return _context15.stop();
                        }
                    }
                }, _callee15, this);
            }));

            return function (_x14) {
                return _ref16.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/engines/registries/integration/components/x-dummy/component-test', ['@ember/test-helpers', 'ember-osf-web/tests/helpers/engines', 'qunit'], function (_testHelpers, _engines, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    /* tslint:disable:only-arrow-functions */
    (0, _qunit.module)('Registries | Integration | Component | x-dummy', function (hooks) {
        (0, _engines.setupEngineRenderingTest)(hooks, 'registries');
        (0, _qunit.test)('it binds data-* attributes', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                this.set('attr', 'bar');
                                _context.next = 3;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "ix2PwWqD",
                                    "block": "{\"symbols\":[],\"statements\":[[0,\"\\n\"],[4,\"x-dummy\",null,[[\"data-attr\"],[[22,0,[\"attr\"]]]],{\"statements\":[[0,\"                This is a test!\\n\"]],\"parameters\":[]},null],[0,\"        \"]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 3:
                                assert.dom('[data-attr="bar"]').hasText('This is a test!');
                                this.set('attr', 'foo');
                                _context.next = 7;
                                return (0, _testHelpers.waitFor)('[data-attr="foo"]');

                            case 7:
                                assert.dom('[data-attr="foo"]').hasText('This is a test!');

                            case 8:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('it yields yieldValue', function () {
            var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                _context2.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "AkDqWWQu",
                                    "block": "{\"symbols\":[\"val\"],\"statements\":[[0,\"\\n\"],[4,\"x-dummy\",null,[[\"data-test-dummy\",\"yieldValue\"],[\"1\",\"It works!\"]],{\"statements\":[[0,\"                \"],[7,\"p\"],[9],[1,[22,1,[]],false],[10],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"        \"]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                assert.dom('[data-test-dummy="1"]').hasText('It works!');

                            case 3:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            return function (_x2) {
                return _ref3.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('it binds href', function () {
            var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                _context3.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "wbNHduVJ",
                                    "block": "{\"symbols\":[],\"statements\":[[0,\"\\n            \"],[1,[27,\"x-dummy\",null,[[\"tagName\",\"href\"],[\"a\",\"example.com\"]]],false],[0,\"\\n        \"]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                assert.dom('a').hasAttribute('href', 'example.com');

                            case 3:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            return function (_x3) {
                return _ref4.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/engines/registries/integration/discover/discover-test', ['@ember/test-helpers', 'ember-cli-mirage/test-support/setup-mirage', 'ember-osf-web/tests/helpers', 'ember-osf-web/tests/helpers/engines', 'ember-osf-web/utils/param', 'ember-qunit', 'immutable', 'qunit', 'registries/services/search', 'registries/services/share-search', 'sinon'], function (_testHelpers, _setupMirage, _helpers, _engines, _param, _emberQunit, _immutable, _qunit, _search, _shareSearch, _sinon) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    var equals = function equals(expected) {
        return _sinon.default.match(function (x) {
            return expected.equals(x);
        });
    };
    var emptyResults = {
        total: 0,
        results: [],
        aggregations: {
            sources: {
                buckets: []
            }
        }
    };
    // Default page ordering
    var order = new _search.SearchOrder({
        ascending: true,
        display: 'registries.discover.order.relevance',
        key: undefined
    });
    var QueryParamTestCases = [{
        name: 'Order by date_modified if no additional options are specified',
        params: {},
        expected: {
            query: '',
            order: new _search.SearchOrder({
                display: 'registries.discover.order.relevance',
                ascending: false,
                key: 'date_modified'
            })
        }
    }, {
        name: 'Basic query parameters',
        params: { q: 'What', page: 10 },
        expected: { order: order, query: 'What', page: 10 }
    }, {
        name: 'Providers Filters',
        params: { q: 'Foo', provider: 'OSF' },
        expected: {
            order: order,
            query: 'Foo',
            filters: (0, _immutable.OrderedSet)([new _shareSearch.ShareTermsFilter('sources', 'OSF', 'OSF Registries')])
        }
    }, {
        name: 'Multiple Providers Filters With Validation',
        params: { q: 'Foo', provider: 'OSF|ClinicalTrials.gov|Bar' },
        expected: {
            order: order,
            query: 'Foo',
            filters: (0, _immutable.OrderedSet)([new _shareSearch.ShareTermsFilter('sources', 'OSF', 'OSF Registries'), new _shareSearch.ShareTermsFilter('sources', 'ClinicalTrials.gov', 'ClinicalTrials.gov')])
        }
    }, {
        name: 'Multiple Legacy Providers Filters With Validation',
        params: { q: 'Foo', provider: 'OSFORClinicalTrials.govORFoo' },
        expected: {
            order: order,
            query: 'Foo',
            filters: (0, _immutable.OrderedSet)([new _shareSearch.ShareTermsFilter('sources', 'OSF', 'OSF Registries'), new _shareSearch.ShareTermsFilter('sources', 'ClinicalTrials.gov', 'ClinicalTrials.gov')])
        }
    }, {
        name: 'Sort',
        params: { sort: 'date_updated' },
        expected: {
            query: '',
            order: new _search.SearchOrder({
                ascending: true,
                display: 'registries.discover.order.modified_ascending',
                key: 'date_updated'
            })
        }
    }, {
        name: 'Sort decending',
        params: { sort: '-date_updated' },
        expected: {
            query: '',
            order: new _search.SearchOrder({
                ascending: false,
                display: 'registries.discover.order.modified_descending',
                key: 'date_updated'
            })
        }
    }, {
        name: 'Sort validation',
        params: { q: 'Not Empty', sort: '-date_moodified' },
        expected: { order: order, query: 'Not Empty' }
    }, {
        name: 'Registration Types without OSF',
        params: { q: 'What', page: 10, type: 'Foo|BAR' },
        expected: { order: order, query: 'What', page: 10 }
    }, {
        // NOTE: Not currently validated :(
        name: 'Registration Types',
        params: { q: 'What', page: 10, provider: 'OSF', type: 'Foo|BAR' },
        expected: {
            order: order,
            query: 'What',
            page: 10,
            filters: (0, _immutable.OrderedSet)([new _shareSearch.ShareTermsFilter('sources', 'OSF', 'OSF Registries'), new _shareSearch.ShareTermsFilter('registration_type', 'Foo', 'Foo'), new _shareSearch.ShareTermsFilter('registration_type', 'BAR', 'BAR')])
        }
    }, {
        // NOTE: Not currently validated :(
        name: 'Legacy Registration Types',
        params: { q: 'What', page: 10, provider: 'OSF', type: 'FooORBAR' },
        expected: {
            order: order,
            query: 'What',
            page: 10,
            filters: (0, _immutable.OrderedSet)([new _shareSearch.ShareTermsFilter('sources', 'OSF', 'OSF Registries'), new _shareSearch.ShareTermsFilter('registration_type', 'Foo', 'Foo'), new _shareSearch.ShareTermsFilter('registration_type', 'BAR', 'BAR')])
        }
    }];
    var AnalyticsTestCases = [{
        name: 'SHARE Logo Clicked',
        action: function () {
            var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                return _context.abrupt('return', (0, _testHelpers.click)('[data-test-share-logo]'));

                            case 1:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, undefined);
            }));

            function action() {
                return _ref.apply(this, arguments);
            }

            return action;
        }(),
        expected: {
            action: 'click',
            category: 'link',
            label: 'Discover - SHARE Logo'
        }
    }, {
        name: 'Sort by (Date Modified)',
        action: function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                _context2.next = 2;
                                return (0, _testHelpers.click)('[data-test-sort-dropdown]');

                            case 2:
                                _context2.next = 4;
                                return (0, _testHelpers.click)('[data-test-sort-option-id="2"]');

                            case 4:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, undefined);
            }));

            function action() {
                return _ref2.apply(this, arguments);
            }

            return action;
        }(),
        expected: {
            category: 'dropdown',
            action: 'select',
            label: 'Discover - Sort By: Modified Date (newest to oldest)'
        }
    }, {
        name: 'Sort by (Relevance)',
        action: function () {
            var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                _context3.next = 2;
                                return (0, _testHelpers.click)('[data-test-sort-dropdown]');

                            case 2:
                                _context3.next = 4;
                                return (0, _testHelpers.click)('[data-test-sort-option-id="0"]');

                            case 4:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, undefined);
            }));

            function action() {
                return _ref3.apply(this, arguments);
            }

            return action;
        }(),
        expected: {
            category: 'dropdown',
            action: 'select',
            label: 'Discover - Sort By: Relevance'
        }
    }, {
        name: 'Clear Filters',
        action: function () {
            var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                return _context4.abrupt('return', (0, _testHelpers.click)('[data-test-clear-filters]'));

                            case 1:
                            case 'end':
                                return _context4.stop();
                        }
                    }
                }, _callee4, undefined);
            }));

            function action() {
                return _ref4.apply(this, arguments);
            }

            return action;
        }(),
        expected: {
            category: 'button',
            action: 'click',
            label: 'Discover - Clear Filters'
        }
    }, {
        name: 'Check Source Filter (OSF)',
        action: function () {
            var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
                return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                        switch (_context5.prev = _context5.next) {
                            case 0:
                                return _context5.abrupt('return', (0, _testHelpers.click)('[data-test-source-filter-id="0"]'));

                            case 1:
                            case 'end':
                                return _context5.stop();
                        }
                    }
                }, _callee5, undefined);
            }));

            function action() {
                return _ref5.apply(this, arguments);
            }

            return action;
        }(),
        expected: {
            category: 'filter',
            action: 'add',
            label: 'Discover - providers OSF Registries'
        }
    }, {
        name: 'Check Source Filter (Clinical Trials)',
        action: function () {
            var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
                return regeneratorRuntime.wrap(function _callee6$(_context6) {
                    while (1) {
                        switch (_context6.prev = _context6.next) {
                            case 0:
                                return _context6.abrupt('return', (0, _testHelpers.click)('[data-test-source-filter-id="1"]'));

                            case 1:
                            case 'end':
                                return _context6.stop();
                        }
                    }
                }, _callee6, undefined);
            }));

            function action() {
                return _ref6.apply(this, arguments);
            }

            return action;
        }(),
        expected: {
            category: 'filter',
            action: 'add',
            label: 'Discover - providers ClinicalTrials.gov'
        }
    }, {
        name: 'Uncheck Source Filter (OSF)',
        action: function () {
            var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(stub) {
                return regeneratorRuntime.wrap(function _callee7$(_context7) {
                    while (1) {
                        switch (_context7.prev = _context7.next) {
                            case 0:
                                _context7.next = 2;
                                return (0, _testHelpers.click)('[data-test-source-filter-id="0"]');

                            case 2:
                                stub.reset();
                                _context7.next = 5;
                                return (0, _testHelpers.click)('[data-test-source-filter-id="0"]');

                            case 5:
                            case 'end':
                                return _context7.stop();
                        }
                    }
                }, _callee7, undefined);
            }));

            function action(_x) {
                return _ref7.apply(this, arguments);
            }

            return action;
        }(),
        expected: {
            category: 'filter',
            action: 'remove',
            label: 'Discover - providers OSF Registries'
        }
    }, {
        name: 'Uncheck Source Filter (Clinical Trials)',
        action: function () {
            var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(stub) {
                return regeneratorRuntime.wrap(function _callee8$(_context8) {
                    while (1) {
                        switch (_context8.prev = _context8.next) {
                            case 0:
                                _context8.next = 2;
                                return (0, _testHelpers.click)('[data-test-source-filter-id="1"]');

                            case 2:
                                stub.reset();
                                _context8.next = 5;
                                return (0, _testHelpers.click)('[data-test-source-filter-id="1"]');

                            case 5:
                            case 'end':
                                return _context8.stop();
                        }
                    }
                }, _callee8, undefined);
            }));

            function action(_x2) {
                return _ref8.apply(this, arguments);
            }

            return action;
        }(),
        expected: {
            category: 'filter',
            action: 'remove',
            label: 'Discover - providers ClinicalTrials.gov'
        }
    }, {
        name: 'Check Registration Type Filter (Open Ended)',
        action: function () {
            var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(stub) {
                return regeneratorRuntime.wrap(function _callee9$(_context9) {
                    while (1) {
                        switch (_context9.prev = _context9.next) {
                            case 0:
                                _context9.next = 2;
                                return (0, _testHelpers.click)('[data-test-source-filter-id="0"]');

                            case 2:
                                stub.reset();
                                _context9.next = 5;
                                return (0, _testHelpers.click)('[data-test-registration-type-filter-id="2"]');

                            case 5:
                            case 'end':
                                return _context9.stop();
                        }
                    }
                }, _callee9, undefined);
            }));

            function action(_x3) {
                return _ref9.apply(this, arguments);
            }

            return action;
        }(),
        expected: {
            category: 'filter',
            action: 'add',
            label: 'Discover - type Open Ended'
        }
    }, {
        name: 'Check Registration Type Filter (Close Fronted)',
        action: function () {
            var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(stub) {
                return regeneratorRuntime.wrap(function _callee10$(_context10) {
                    while (1) {
                        switch (_context10.prev = _context10.next) {
                            case 0:
                                _context10.next = 2;
                                return (0, _testHelpers.click)('[data-test-source-filter-id="0"]');

                            case 2:
                                stub.reset();
                                _context10.next = 5;
                                return (0, _testHelpers.click)('[data-test-registration-type-filter-id="0"]');

                            case 5:
                            case 'end':
                                return _context10.stop();
                        }
                    }
                }, _callee10, undefined);
            }));

            function action(_x4) {
                return _ref10.apply(this, arguments);
            }

            return action;
        }(),
        expected: {
            category: 'filter',
            action: 'add',
            label: 'Discover - type Close Fronted'
        }
    }, {
        name: 'Unheck Registration Type Filter (Open Ended)',
        action: function () {
            var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(stub) {
                return regeneratorRuntime.wrap(function _callee11$(_context11) {
                    while (1) {
                        switch (_context11.prev = _context11.next) {
                            case 0:
                                _context11.next = 2;
                                return (0, _testHelpers.click)('[data-test-source-filter-id="0"]');

                            case 2:
                                _context11.next = 4;
                                return (0, _testHelpers.click)('[data-test-registration-type-filter-id="2"]');

                            case 4:
                                stub.reset();
                                _context11.next = 7;
                                return (0, _testHelpers.click)('[data-test-registration-type-filter-id="2"]');

                            case 7:
                            case 'end':
                                return _context11.stop();
                        }
                    }
                }, _callee11, undefined);
            }));

            function action(_x5) {
                return _ref11.apply(this, arguments);
            }

            return action;
        }(),
        expected: {
            category: 'filter',
            action: 'remove',
            label: 'Discover - type Open Ended'
        }
    }, {
        name: 'Uncheck Registration Type Filter (Close Fronted)',
        action: function () {
            var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(stub) {
                return regeneratorRuntime.wrap(function _callee12$(_context12) {
                    while (1) {
                        switch (_context12.prev = _context12.next) {
                            case 0:
                                _context12.next = 2;
                                return (0, _testHelpers.click)('[data-test-source-filter-id="0"]');

                            case 2:
                                _context12.next = 4;
                                return (0, _testHelpers.click)('[data-test-registration-type-filter-id="0"]');

                            case 4:
                                stub.reset();
                                _context12.next = 7;
                                return (0, _testHelpers.click)('[data-test-registration-type-filter-id="0"]');

                            case 7:
                            case 'end':
                                return _context12.stop();
                        }
                    }
                }, _callee12, undefined);
            }));

            function action(_x6) {
                return _ref12.apply(this, arguments);
            }

            return action;
        }(),
        expected: {
            category: 'filter',
            action: 'remove',
            label: 'Discover - type Close Fronted'
        }
    }, {
        name: 'Click Result Title (id = 1)',
        action: function () {
            var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {
                return regeneratorRuntime.wrap(function _callee13$(_context13) {
                    while (1) {
                        switch (_context13.prev = _context13.next) {
                            case 0:
                                return _context13.abrupt('return', (0, _testHelpers.click)('[data-test-result-title-id="1"]'));

                            case 1:
                            case 'end':
                                return _context13.stop();
                        }
                    }
                }, _callee13, undefined);
            }));

            function action() {
                return _ref13.apply(this, arguments);
            }

            return action;
        }(),
        expected: {
            category: 'link',
            action: 'click',
            label: 'Discover - Result Title: https://example.com/cancer-potatoes',
            extra: '1'
        }
    }, {
        name: 'Click Result Title (id = 2)',
        action: function () {
            var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14() {
                return regeneratorRuntime.wrap(function _callee14$(_context14) {
                    while (1) {
                        switch (_context14.prev = _context14.next) {
                            case 0:
                                return _context14.abrupt('return', (0, _testHelpers.click)('[data-test-result-title-id="2"]'));

                            case 1:
                            case 'end':
                                return _context14.stop();
                        }
                    }
                }, _callee14, undefined);
            }));

            function action() {
                return _ref14.apply(this, arguments);
            }

            return action;
        }(),
        expected: {
            category: 'link',
            action: 'click',
            label: 'Discover - Result Title: https://example.com/super-potatoes',
            extra: '2'
        }
    }, {
        name: 'Click Result Link (id = 1)',
        action: function () {
            var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(stub) {
                return regeneratorRuntime.wrap(function _callee15$(_context15) {
                    while (1) {
                        switch (_context15.prev = _context15.next) {
                            case 0:
                                _context15.next = 2;
                                return (0, _testHelpers.click)('[data-test-result-toggle-id="1"]');

                            case 2:
                                stub.reset();
                                _context15.next = 5;
                                return (0, _testHelpers.click)('[data-test-result-hyperlink-id="1 - 0"]');

                            case 5:
                            case 'end':
                                return _context15.stop();
                        }
                    }
                }, _callee15, undefined);
            }));

            function action(_x7) {
                return _ref15.apply(this, arguments);
            }

            return action;
        }(),
        expected: {
            category: 'link',
            action: 'click',
            label: 'Discover - Result Hyperlink: https://reddit.com/r/cancer-potatoes',
            extra: '1'
        }
    }, {
        name: 'Click Result Link (id = 2)',
        action: function () {
            var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(stub) {
                return regeneratorRuntime.wrap(function _callee16$(_context16) {
                    while (1) {
                        switch (_context16.prev = _context16.next) {
                            case 0:
                                _context16.next = 2;
                                return (0, _testHelpers.click)('[data-test-result-toggle-id="2"]');

                            case 2:
                                stub.reset();
                                _context16.next = 5;
                                return (0, _testHelpers.click)('[data-test-result-hyperlink-id="2 - 0"]');

                            case 5:
                            case 'end':
                                return _context16.stop();
                        }
                    }
                }, _callee16, undefined);
            }));

            function action(_x8) {
                return _ref16.apply(this, arguments);
            }

            return action;
        }(),
        expected: {
            category: 'link',
            action: 'click',
            label: 'Discover - Result Hyperlink: https://reddit.com/r/super-potatoes',
            extra: '2'
        }
    }, {
        name: 'Collapse Result',
        action: function () {
            var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17() {
                return regeneratorRuntime.wrap(function _callee17$(_context17) {
                    while (1) {
                        switch (_context17.prev = _context17.next) {
                            case 0:
                                return _context17.abrupt('return', (0, _testHelpers.click)('[data-test-result-toggle-id="1"]'));

                            case 1:
                            case 'end':
                                return _context17.stop();
                        }
                    }
                }, _callee17, undefined);
            }));

            function action() {
                return _ref17.apply(this, arguments);
            }

            return action;
        }(),
        expected: {
            category: 'result',
            action: 'contract',
            label: 'Discover - Can Potatoes Cause Cancer?',
            extra: '1'
        }
    }, {
        name: 'Expand Result',
        action: function () {
            var _ref18 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18() {
                return regeneratorRuntime.wrap(function _callee18$(_context18) {
                    while (1) {
                        switch (_context18.prev = _context18.next) {
                            case 0:
                                return _context18.abrupt('return', (0, _testHelpers.click)('[data-test-result-toggle-id="1"]'));

                            case 1:
                            case 'end':
                                return _context18.stop();
                        }
                    }
                }, _callee18, undefined);
            }));

            function action() {
                return _ref18.apply(this, arguments);
            }

            return action;
        }(),
        expected: {
            category: 'result',
            action: 'expand',
            label: 'Discover - Can Potatoes Cause Cancer?',
            extra: '1'
        }
    }];
    (0, _qunit.module)('Registries | Integration | discover', function (hooks) {
        (0, _emberQunit.setupApplicationTest)(hooks);
        (0, _setupMirage.default)(hooks);
        hooks.beforeEach(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19() {
            var engine, shareSearch;
            return regeneratorRuntime.wrap(function _callee19$(_context19) {
                while (1) {
                    switch (_context19.prev = _context19.next) {
                        case 0:
                            server.create('root', { currentUser: null });
                            server.create('registration-schema', { name: 'Open Ended' });
                            server.create('registration-schema', { name: 'Close Fronted' });
                            _context19.next = 5;
                            return (0, _engines.loadEngine)('registries', 'registries');

                        case 5:
                            engine = _context19.sent;
                            shareSearch = new _shareSearch.default();

                            engine.register('service:share-search', shareSearch, { instantiate: false });
                            this.owner.register('service:share-search', shareSearch, { instantiate: false });

                        case 9:
                        case 'end':
                            return _context19.stop();
                    }
                }
            }, _callee19, this);
        })));
        (0, _qunit.test)('query parameters', function () {
            var _ref20 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20(assert) {
                var stub, _arr, _i, url, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, testCase;

                return regeneratorRuntime.wrap(function _callee20$(_context20) {
                    while (1) {
                        switch (_context20.prev = _context20.next) {
                            case 0:
                                assert.expect(2 + QueryParamTestCases.length * 6);
                                stub = _sinon.default.stub(this.owner.lookup('service:share-search'), 'registrations').returns(emptyResults);
                                // Initial load so we don't have to deal with the aggregations loading

                                _context20.next = 4;
                                return (0, _helpers.visit)('/registries/discover');

                            case 4:
                                _sinon.default.assert.calledTwice(stub);
                                // Aggregations on load
                                _sinon.default.assert.calledWith(stub, new _search.SearchOptions({
                                    size: 0,
                                    modifiers: (0, _immutable.OrderedSet)([new _shareSearch.ShareTermsAggregation('sources', 'sources')])
                                }));
                                _arr = ['/--registries/registries/discover', '/registries/discover'];
                                _i = 0;

                            case 8:
                                if (!(_i < _arr.length)) {
                                    _context20.next = 44;
                                    break;
                                }

                                url = _arr[_i];
                                _iteratorNormalCompletion = true;
                                _didIteratorError = false;
                                _iteratorError = undefined;
                                _context20.prev = 13;
                                _iterator = QueryParamTestCases[Symbol.iterator]();

                            case 15:
                                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                                    _context20.next = 27;
                                    break;
                                }

                                testCase = _step.value;

                                stub.reset();
                                stub.returns(emptyResults);
                                _context20.next = 21;
                                return (0, _helpers.visit)(url + '?' + (0, _param.default)(testCase.params));

                            case 21:
                                assert.ok(true, testCase.name);
                                _sinon.default.assert.calledOnce(stub);
                                _sinon.default.assert.calledWith(stub, new _search.SearchOptions(testCase.expected));

                            case 24:
                                _iteratorNormalCompletion = true;
                                _context20.next = 15;
                                break;

                            case 27:
                                _context20.next = 33;
                                break;

                            case 29:
                                _context20.prev = 29;
                                _context20.t0 = _context20['catch'](13);
                                _didIteratorError = true;
                                _iteratorError = _context20.t0;

                            case 33:
                                _context20.prev = 33;
                                _context20.prev = 34;

                                if (!_iteratorNormalCompletion && _iterator.return) {
                                    _iterator.return();
                                }

                            case 36:
                                _context20.prev = 36;

                                if (!_didIteratorError) {
                                    _context20.next = 39;
                                    break;
                                }

                                throw _iteratorError;

                            case 39:
                                return _context20.finish(36);

                            case 40:
                                return _context20.finish(33);

                            case 41:
                                _i++;
                                _context20.next = 8;
                                break;

                            case 44:
                            case 'end':
                                return _context20.stop();
                        }
                    }
                }, _callee20, this, [[13, 29, 33, 41], [34,, 36, 40]]);
            }));

            return function (_x9) {
                return _ref20.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('analytics', function () {
            var _ref21 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21(assert) {
                var engine, analytics, metrics, stub, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, testCase;

                return regeneratorRuntime.wrap(function _callee21$(_context21) {
                    while (1) {
                        switch (_context21.prev = _context21.next) {
                            case 0:
                                assert.expect(AnalyticsTestCases.length * 3);
                                engine = this.owner.lookup('-engine-instance:registries-registries');

                                _sinon.default.stub(engine.lookup('service:share-search'), 'registrations').returns({
                                    total: 420,
                                    results: [{
                                        id: '1',
                                        title: 'Can Potatoes Cause Cancer?',
                                        description: 'THEY CAN AND THEY WILL',
                                        mainLink: 'https://example.com/cancer-potatoes',
                                        contributors: [],
                                        hyperLinks: ['https://reddit.com/r/cancer-potatoes']
                                    }, {
                                        id: '2',
                                        title: 'Can Potatoes Cure Cancer?',
                                        description: 'THEY CAN AND THEY WILL',
                                        mainLink: 'https://example.com/super-potatoes',
                                        contributors: [],
                                        hyperLinks: ['https://reddit.com/r/super-potatoes']
                                    }],
                                    aggregations: {
                                        sources: {
                                            buckets: [{ key: 'ClinicalTrials.gov', doc_count: 25 }, { key: 'OSF', doc_count: 10 }]
                                        }
                                    }
                                });
                                analytics = engine.lookup('service:analytics');

                                analytics.actions.click = function () {
                                    var _ref22;

                                    this.click.apply(this, arguments);
                                    var event = (_ref22 = arguments.length - 1, arguments.length <= _ref22 ? undefined : arguments[_ref22]);
                                    // Prevent redirects from being followed
                                    if (!event.preventDefault) {
                                        return true;
                                    }
                                    event.preventDefault();
                                    return false;
                                };
                                metrics = this.owner.lookup('service:metrics');
                                stub = _sinon.default.stub(metrics, 'trackEvent');
                                _iteratorNormalCompletion2 = true;
                                _didIteratorError2 = false;
                                _iteratorError2 = undefined;
                                _context21.prev = 10;
                                _iterator2 = AnalyticsTestCases[Symbol.iterator]();

                            case 12:
                                if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                                    _context21.next = 25;
                                    break;
                                }

                                testCase = _step2.value;

                                stub.reset();
                                assert.ok(true, testCase.name);
                                _context21.next = 18;
                                return (0, _helpers.visit)('/--registries/registries/discover');

                            case 18:
                                _context21.next = 20;
                                return testCase.action(stub);

                            case 20:
                                _sinon.default.assert.calledOnce(stub);
                                _sinon.default.assert.calledWith(stub, Object.assign({ extra: undefined }, testCase.expected));

                            case 22:
                                _iteratorNormalCompletion2 = true;
                                _context21.next = 12;
                                break;

                            case 25:
                                _context21.next = 31;
                                break;

                            case 27:
                                _context21.prev = 27;
                                _context21.t0 = _context21['catch'](10);
                                _didIteratorError2 = true;
                                _iteratorError2 = _context21.t0;

                            case 31:
                                _context21.prev = 31;
                                _context21.prev = 32;

                                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                    _iterator2.return();
                                }

                            case 34:
                                _context21.prev = 34;

                                if (!_didIteratorError2) {
                                    _context21.next = 37;
                                    break;
                                }

                                throw _iteratorError2;

                            case 37:
                                return _context21.finish(34);

                            case 38:
                                return _context21.finish(31);

                            case 39:
                            case 'end':
                                return _context21.stop();
                        }
                    }
                }, _callee21, this, [[10, 27, 31, 39], [32,, 34, 38]]);
            }));

            return function (_x10) {
                return _ref21.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('page resets on filtering', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22() {
            var stub;
            return regeneratorRuntime.wrap(function _callee22$(_context22) {
                while (1) {
                    switch (_context22.prev = _context22.next) {
                        case 0:
                            stub = _sinon.default.stub(this.owner.lookup('service:share-search'), 'registrations').returns({
                                total: 0,
                                results: [],
                                aggregations: {
                                    sources: {
                                        buckets: [{ key: 'OSF', doc_count: 10 }]
                                    }
                                }
                            });
                            _context22.next = 3;
                            return (0, _helpers.visit)('/registries/discover?page=10');

                        case 3:
                            _sinon.default.assert.calledWith(stub, new _search.SearchOptions({
                                query: '',
                                page: 10,
                                order: new _search.SearchOrder({
                                    display: 'registries.discover.order.relevance',
                                    ascending: false,
                                    key: 'date_modified'
                                })
                            }));
                            _context22.next = 6;
                            return (0, _testHelpers.click)('[data-test-source-filter-id="0"]');

                        case 6:
                            _sinon.default.assert.calledWith(stub, new _search.SearchOptions({
                                query: '',
                                page: 1,
                                order: order,
                                filters: (0, _immutable.OrderedSet)([new _shareSearch.ShareTermsFilter('sources', 'OSF', 'OSF Registries')])
                            }));

                        case 7:
                        case 'end':
                            return _context22.stop();
                    }
                }
            }, _callee22, this);
        })));
        (0, _qunit.test)('page resets on sorting', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee23() {
            var stub;
            return regeneratorRuntime.wrap(function _callee23$(_context23) {
                while (1) {
                    switch (_context23.prev = _context23.next) {
                        case 0:
                            stub = _sinon.default.stub(this.owner.lookup('service:share-search'), 'registrations').returns({
                                total: 0,
                                results: [],
                                aggregations: {
                                    sources: {
                                        buckets: [{ key: 'OSF', doc_count: 10 }]
                                    }
                                }
                            });
                            _context23.next = 3;
                            return (0, _helpers.visit)('/registries/discover?page=10');

                        case 3:
                            _sinon.default.assert.calledWith(stub, new _search.SearchOptions({
                                query: '',
                                page: 10,
                                order: new _search.SearchOrder({
                                    display: 'registries.discover.order.relevance',
                                    ascending: false,
                                    key: 'date_modified'
                                })
                            }));
                            _context23.next = 6;
                            return (0, _testHelpers.click)('[data-test-sort-dropdown]');

                        case 6:
                            _context23.next = 8;
                            return (0, _testHelpers.click)('[data-test-sort-option-id="1"]');

                        case 8:
                            _sinon.default.assert.calledWith(stub, new _search.SearchOptions({
                                query: '',
                                page: 1,
                                order: new _search.SearchOrder({
                                    ascending: true,
                                    display: 'registries.discover.order.modified_ascending',
                                    key: 'date_updated'
                                })
                            }));

                        case 9:
                        case 'end':
                            return _context23.stop();
                    }
                }
            }, _callee23, this);
        })));
        (0, _qunit.test)('page resets on typing query', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee24() {
            var stub;
            return regeneratorRuntime.wrap(function _callee24$(_context24) {
                while (1) {
                    switch (_context24.prev = _context24.next) {
                        case 0:
                            stub = _sinon.default.stub(this.owner.lookup('service:share-search'), 'registrations').returns({
                                total: 0,
                                results: [],
                                aggregations: {
                                    sources: {
                                        buckets: [{ key: 'OSF', doc_count: 10 }]
                                    }
                                }
                            });
                            _context24.next = 3;
                            return (0, _helpers.visit)('/registries/discover?page=10');

                        case 3:
                            _sinon.default.assert.calledWith(stub, equals(new _search.SearchOptions({
                                query: '',
                                page: 10,
                                order: new _search.SearchOrder({
                                    display: 'registries.discover.order.relevance',
                                    ascending: false,
                                    key: 'date_modified'
                                })
                            })));
                            _context24.next = 6;
                            return (0, _testHelpers.fillIn)('[data-test-search-box]', 'Test Query');

                        case 6:
                            _sinon.default.assert.calledWith(stub, equals(new _search.SearchOptions({
                                query: 'Test Query',
                                page: 1,
                                order: new _search.SearchOrder({
                                    display: 'registries.discover.order.relevance',
                                    ascending: true,
                                    key: undefined
                                })
                            })));

                        case 7:
                        case 'end':
                            return _context24.stop();
                    }
                }
            }, _callee24, this);
        })));
        (0, _qunit.test)('page resets on clicking search', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee25() {
            var stub;
            return regeneratorRuntime.wrap(function _callee25$(_context25) {
                while (1) {
                    switch (_context25.prev = _context25.next) {
                        case 0:
                            _sinon.default.stub(this.owner.lookup('service:analytics'), 'click');
                            stub = _sinon.default.stub(this.owner.lookup('service:share-search'), 'registrations').returns({
                                total: 0,
                                results: [],
                                aggregations: {
                                    sources: {
                                        buckets: [{ key: 'OSF', doc_count: 10 }]
                                    }
                                }
                            });
                            _context25.next = 4;
                            return (0, _helpers.visit)('/registries/discover?page=10&q=Testing');

                        case 4:
                            _sinon.default.assert.calledWith(stub, equals(new _search.SearchOptions({
                                query: 'Testing',
                                page: 10,
                                order: new _search.SearchOrder({
                                    display: 'registries.discover.order.relevance',
                                    ascending: true,
                                    key: undefined
                                })
                            })));
                            _context25.next = 7;
                            return (0, _testHelpers.click)('[data-test-search-button]');

                        case 7:
                            _sinon.default.assert.calledWith(stub, equals(new _search.SearchOptions({
                                query: 'Testing',
                                page: 1,
                                order: new _search.SearchOrder({
                                    display: 'registries.discover.order.relevance',
                                    ascending: true,
                                    key: undefined
                                })
                            })));

                        case 8:
                        case 'end':
                            return _context25.stop();
                    }
                }
            }, _callee25, this);
        })));
        (0, _qunit.test)('scroll top on pagination', function () {
            var _ref27 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee26(assert) {
                var results, stub, resultsEl;
                return regeneratorRuntime.wrap(function _callee26$(_context26) {
                    while (1) {
                        switch (_context26.prev = _context26.next) {
                            case 0:
                                results = {
                                    total: 21,
                                    results: Array(21).fill({
                                        title: 'place holder',
                                        description: 'place holder',
                                        contributors: []
                                    }),
                                    aggregations: {
                                        sources: {
                                            buckets: []
                                        }
                                    }
                                };
                                stub = _sinon.default.stub(this.owner.lookup('service:share-search'), 'registrations').returns(results);
                                _context26.next = 4;
                                return (0, _helpers.visit)('/registries/discover');

                            case 4:
                                stub.reset();
                                stub.returns(results);
                                resultsEl = (0, _testHelpers.getRootElement)().querySelector('[data-test-results]');

                                assert.notEqual(resultsEl.offsetTop, 0);
                                _context26.next = 10;
                                return (0, _testHelpers.click)('[data-test-page="2"]');

                            case 10:
                                assert.equal(resultsEl.offsetTop, 0);
                                _sinon.default.assert.calledWith(stub, new _search.SearchOptions({
                                    query: '',
                                    page: 2,
                                    order: new _search.SearchOrder({
                                        display: 'registries.discover.order.relevance',
                                        ascending: false,
                                        key: 'date_modified'
                                    })
                                }));

                            case 12:
                            case 'end':
                                return _context26.stop();
                        }
                    }
                }, _callee26, this);
            }));

            return function (_x11) {
                return _ref27.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/engines/registries/integration/index/index-test', ['@ember/test-helpers', 'ember-cli-mirage/test-support/setup-mirage', 'ember-osf-web/tests/helpers', 'ember-osf-web/tests/helpers/engines', 'qunit', 'registries/components/registries-header/styles', 'registries/components/registries-services-list/styles', 'registries/services/share-search', 'sinon'], function (_testHelpers, _setupMirage, _helpers, _engines, _qunit, _styles, _styles2, _shareSearch, _sinon) {
    'use strict';

    function _toConsumableArray(arr) {
        if (Array.isArray(arr)) {
            for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                arr2[i] = arr[i];
            }

            return arr2;
        } else {
            return Array.from(arr);
        }
    }

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Registries | Integration | index', function (hooks) {
        (0, _engines.setupEngineApplicationTest)(hooks, 'registries');
        (0, _setupMirage.default)(hooks);
        hooks.beforeEach(function () {
            server.create('root', { currentUser: null });
            var engine = this.owner.lookup('-engine-instance:registries-registries');
            var shareSearch = new _shareSearch.default();
            engine.register('service:share-search', shareSearch, { instantiate: false });
            this.owner.register('service:share-search', shareSearch, { instantiate: false });
            _sinon.default.stub(shareSearch, 'registrations').returns({
                total: 420,
                results: [{
                    id: '1',
                    title: 'Can Potatoes Cause Cancer?',
                    description: 'THEY CAN AND THEY WILL',
                    mainLink: 'https://example.com/cancer-potatoes',
                    contributors: [],
                    hyperLinks: []
                }, {
                    id: '2',
                    title: 'Can Potatoes Cure Cancer?',
                    description: 'THEY CAN AND THEY WILL',
                    mainLink: 'https://example.com/super-potatoes',
                    contributors: [],
                    hyperLinks: []
                }],
                aggregations: {
                    sources: {
                        buckets: []
                    }
                }
            });
            var analytics = engine.lookup('service:analytics');
            analytics.set('click', _sinon.default.stub(analytics, 'click'));
            analytics.actions.click = analytics.click;
        });
        (0, _qunit.test)('analytics', function () {
            var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(assert) {
                var _this = this;

                var testCases, engine, stub, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _sinon$assert, testCase;

                return regeneratorRuntime.wrap(function _callee11$(_context11) {
                    while (1) {
                        switch (_context11.prev = _context11.next) {
                            case 0:
                                testCases = [{
                                    name: 'Search Button (Clicked)',
                                    action: function () {
                                        var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                                            return regeneratorRuntime.wrap(function _callee$(_context) {
                                                while (1) {
                                                    switch (_context.prev = _context.next) {
                                                        case 0:
                                                            return _context.abrupt('return', (0, _testHelpers.click)('button'));

                                                        case 1:
                                                        case 'end':
                                                            return _context.stop();
                                                    }
                                                }
                                            }, _callee, _this);
                                        }));

                                        function action() {
                                            return _ref2.apply(this, arguments);
                                        }

                                        return action;
                                    }(),
                                    expected: ['link', 'Index - Search', '']
                                }, {
                                    name: 'Search Button (Clicked, With query)',
                                    action: function () {
                                        var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                                            return regeneratorRuntime.wrap(function _callee2$(_context2) {
                                                while (1) {
                                                    switch (_context2.prev = _context2.next) {
                                                        case 0:
                                                            _context2.next = 2;
                                                            return (0, _testHelpers.fillIn)('[data-test-search-box]', 'My Query');

                                                        case 2:
                                                            _context2.next = 4;
                                                            return (0, _testHelpers.click)('[data-test-search-button]');

                                                        case 4:
                                                        case 'end':
                                                            return _context2.stop();
                                                    }
                                                }
                                            }, _callee2, _this);
                                        }));

                                        function action() {
                                            return _ref3.apply(this, arguments);
                                        }

                                        return action;
                                    }(),
                                    expected: ['link', 'Index - Search', 'My Query']
                                }, {
                                    name: 'Search Button (Submitted)',
                                    action: function () {
                                        var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                                            return regeneratorRuntime.wrap(function _callee3$(_context3) {
                                                while (1) {
                                                    switch (_context3.prev = _context3.next) {
                                                        case 0:
                                                            return _context3.abrupt('return', (0, _testHelpers.triggerKeyEvent)('[data-test-search-box]', 'keydown', 13));

                                                        case 1:
                                                        case 'end':
                                                            return _context3.stop();
                                                    }
                                                }
                                            }, _callee3, _this);
                                        }));

                                        function action() {
                                            return _ref4.apply(this, arguments);
                                        }

                                        return action;
                                    }(),
                                    expected: ['link', 'Index - Search', '']
                                }, {
                                    name: 'Search Button (Submitted, With query)',
                                    action: function () {
                                        var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
                                            return regeneratorRuntime.wrap(function _callee4$(_context4) {
                                                while (1) {
                                                    switch (_context4.prev = _context4.next) {
                                                        case 0:
                                                            _context4.next = 2;
                                                            return (0, _testHelpers.fillIn)('[data-test-search-box]', 'My Query');

                                                        case 2:
                                                            _context4.next = 4;
                                                            return (0, _testHelpers.triggerKeyEvent)('[data-test-search-box]', 'keydown', 13);

                                                        case 4:
                                                        case 'end':
                                                            return _context4.stop();
                                                    }
                                                }
                                            }, _callee4, _this);
                                        }));

                                        function action() {
                                            return _ref5.apply(this, arguments);
                                        }

                                        return action;
                                    }(),
                                    expected: ['link', 'Index - Search', 'My Query']
                                }, {
                                    name: 'See Example',
                                    action: function () {
                                        var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
                                            return regeneratorRuntime.wrap(function _callee5$(_context5) {
                                                while (1) {
                                                    switch (_context5.prev = _context5.next) {
                                                        case 0:
                                                            return _context5.abrupt('return', (0, _testHelpers.click)('.' + _styles.default.RegistriesHeader + ' a'));

                                                        case 1:
                                                        case 'end':
                                                            return _context5.stop();
                                                    }
                                                }
                                            }, _callee5, _this);
                                        }));

                                        function action() {
                                            return _ref6.apply(this, arguments);
                                        }

                                        return action;
                                    }(),
                                    expected: ['link', 'Index - See Example', 'https://osf.io/jsznk/register/565fb3678c5e4a66b5582f67', _sinon.default.match.any]
                                }, {
                                    name: 'Browse Recent (id = 1)',
                                    action: function () {
                                        var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
                                            return regeneratorRuntime.wrap(function _callee6$(_context6) {
                                                while (1) {
                                                    switch (_context6.prev = _context6.next) {
                                                        case 0:
                                                            return _context6.abrupt('return', (0, _testHelpers.click)('[data-test-recent-registration-id="1"]'));

                                                        case 1:
                                                        case 'end':
                                                            return _context6.stop();
                                                    }
                                                }
                                            }, _callee6, _this);
                                        }));

                                        function action() {
                                            return _ref7.apply(this, arguments);
                                        }

                                        return action;
                                    }(),
                                    expected: ['link', 'Index - Browse Recent: Can Potatoes Cause Cancer?', 'https://example.com/cancer-potatoes']
                                }, {
                                    name: 'Browse Recent (id = 2)',
                                    action: function () {
                                        var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
                                            return regeneratorRuntime.wrap(function _callee7$(_context7) {
                                                while (1) {
                                                    switch (_context7.prev = _context7.next) {
                                                        case 0:
                                                            return _context7.abrupt('return', (0, _testHelpers.click)('[data-test-recent-registration-id="2"]'));

                                                        case 1:
                                                        case 'end':
                                                            return _context7.stop();
                                                    }
                                                }
                                            }, _callee7, _this);
                                        }));

                                        function action() {
                                            return _ref8.apply(this, arguments);
                                        }

                                        return action;
                                    }(),
                                    expected: ['link', 'Index - Browse Recent: Can Potatoes Cure Cancer?', 'https://example.com/super-potatoes']
                                }, {
                                    name: 'GitHub Repo',
                                    action: function () {
                                        var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
                                            return regeneratorRuntime.wrap(function _callee8$(_context8) {
                                                while (1) {
                                                    switch (_context8.prev = _context8.next) {
                                                        case 0:
                                                            return _context8.abrupt('return', (0, _testHelpers.click)('a.' + _styles2.default.ServicesList__ExternalLink + ':first-child'));

                                                        case 1:
                                                        case 'end':
                                                            return _context8.stop();
                                                    }
                                                }
                                            }, _callee8, _this);
                                        }));

                                        function action() {
                                            return _ref9.apply(this, arguments);
                                        }

                                        return action;
                                    }(),
                                    expected: ['link', 'Index - GitHub Repo', 'https://github.com/CenterForOpenScience/ember-osf-registries', _sinon.default.match.any]
                                }, {
                                    name: 'Requirements and Roadmap',
                                    action: function () {
                                        var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
                                            return regeneratorRuntime.wrap(function _callee9$(_context9) {
                                                while (1) {
                                                    switch (_context9.prev = _context9.next) {
                                                        case 0:
                                                            return _context9.abrupt('return', (0, _testHelpers.click)('a.' + _styles2.default.ServicesList__ExternalLink + ':last-child'));

                                                        case 1:
                                                        case 'end':
                                                            return _context9.stop();
                                                    }
                                                }
                                            }, _callee9, _this);
                                        }));

                                        function action() {
                                            return _ref10.apply(this, arguments);
                                        }

                                        return action;
                                    }(),
                                    expected: ['link', 'Index - Requirements and Roadmap',
                                    // tslint:disable-next-line:max-line-length
                                    'https://docs.google.com/spreadsheets/d/1SocElbBjc_Nhme4-SJv2_zytBd1ys8R5aZDb3POe94c/edit#gid=331732182', _sinon.default.match.any]
                                }, {
                                    name: 'Contact Us',
                                    action: function () {
                                        var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
                                            return regeneratorRuntime.wrap(function _callee10$(_context10) {
                                                while (1) {
                                                    switch (_context10.prev = _context10.next) {
                                                        case 0:
                                                            return _context10.abrupt('return', (0, _testHelpers.click)('a.btn.btn-info.btn-lg'));

                                                        case 1:
                                                        case 'end':
                                                            return _context10.stop();
                                                    }
                                                }
                                            }, _callee10, _this);
                                        }));

                                        function action() {
                                            return _ref11.apply(this, arguments);
                                        }

                                        return action;
                                    }(),
                                    expected: ['link', 'Index - Contact', _sinon.default.match.any]
                                }];

                                assert.expect(testCases.length * 3);
                                engine = this.owner.lookup('-engine-instance:registries-registries');
                                stub = engine.lookup('service:analytics').click;
                                _iteratorNormalCompletion = true;
                                _didIteratorError = false;
                                _iteratorError = undefined;
                                _context11.prev = 7;
                                _iterator = testCases[Symbol.iterator]();

                            case 9:
                                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                                    _context11.next = 23;
                                    break;
                                }

                                testCase = _step.value;

                                stub.reset();
                                stub.callsFake(function () {
                                    var _ref12;

                                    var event = (_ref12 = arguments.length - 1, arguments.length <= _ref12 ? undefined : arguments[_ref12]);
                                    // Prevent redirects from being followed
                                    if (!event.preventDefault) {
                                        return true;
                                    }
                                    event.preventDefault();
                                    return false;
                                });
                                _context11.next = 15;
                                return (0, _helpers.visit)('/registries');

                            case 15:
                                _context11.next = 17;
                                return testCase.action();

                            case 17:
                                assert.ok(true, testCase.name);
                                _sinon.default.assert.calledOnce(stub);
                                (_sinon$assert = _sinon.default.assert).calledWith.apply(_sinon$assert, [stub].concat(_toConsumableArray(testCase.expected)));

                            case 20:
                                _iteratorNormalCompletion = true;
                                _context11.next = 9;
                                break;

                            case 23:
                                _context11.next = 29;
                                break;

                            case 25:
                                _context11.prev = 25;
                                _context11.t0 = _context11['catch'](7);
                                _didIteratorError = true;
                                _iteratorError = _context11.t0;

                            case 29:
                                _context11.prev = 29;
                                _context11.prev = 30;

                                if (!_iteratorNormalCompletion && _iterator.return) {
                                    _iterator.return();
                                }

                            case 32:
                                _context11.prev = 32;

                                if (!_didIteratorError) {
                                    _context11.next = 35;
                                    break;
                                }

                                throw _iteratorError;

                            case 35:
                                return _context11.finish(32);

                            case 36:
                                return _context11.finish(29);

                            case 37:
                            case 'end':
                                return _context11.stop();
                        }
                    }
                }, _callee11, this, [[7, 25, 29, 37], [30,, 32, 36]]);
            }));

            return function (_x) {
                return _ref.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/engines/registries/unit/services/search-test', ['ember-osf-web/tests/helpers/engines', 'immutable', 'qunit', 'registries/services/search'], function (_engines, _immutable, _qunit, _search) {
    'use strict';

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    var _createClass = function () {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }

        return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    var TestSearchFilter = function (_SearchFilter) {
        _inherits(TestSearchFilter, _SearchFilter);

        function TestSearchFilter(display, key, value) {
            _classCallCheck(this, TestSearchFilter);

            return _possibleConstructorReturn(this, (TestSearchFilter.__proto__ || Object.getPrototypeOf(TestSearchFilter)).call(this, {
                key: key,
                value: value,
                display: display,
                type: TestSearchFilter.TYPE
            }));
        }

        _createClass(TestSearchFilter, [{
            key: 'apply',
            value: function apply(query) {
                return query;
            }
        }]);

        return TestSearchFilter;
    }(_search.SearchFilter);

    TestSearchFilter.TYPE = Symbol('TEST-FILTER');
    (0, _qunit.module)('Registries | Unit | Service | search', function (hooks) {
        (0, _engines.setupEngineTest)(hooks, 'registries');
        // Replace this with your real tests.
        (0, _qunit.test)('it exists', function (assert) {
            var service = this.owner.lookup('service:search');
            assert.ok(service);
        });
        (0, _qunit.test)('SearchOptions immutable', function (assert) {
            var options = new _search.SearchOptions({ page: 10 });
            var changed = options.set('page', 420);
            assert.equal(options.page, 10);
            assert.equal(changed.page, 420);
        });
        (0, _qunit.test)('SearchOptions equality', function (assert) {
            assert.ok((0, _immutable.is)(new _search.SearchOptions({ query: 'Foo Bar' }), new _search.SearchOptions({ query: 'Foo Bar' })));
            assert.notOk((0, _immutable.is)(new _search.SearchOptions({ query: 'Foo Bar' }), new _search.SearchOptions({ query: 'Foo bar' })));
            assert.ok((0, _immutable.is)(new _search.SearchOptions({
                filters: (0, _immutable.OrderedSet)([new TestSearchFilter('Foo', 'foo', 43)])
            }), new _search.SearchOptions({
                filters: (0, _immutable.OrderedSet)([new TestSearchFilter('Foo', 'foo', 43)])
            })));
            assert.ok((0, _immutable.is)(new _search.SearchOptions({
                filters: (0, _immutable.OrderedSet)([new TestSearchFilter('Foo', 'foo', 43)])
            }), new _search.SearchOptions({
                filters: (0, _immutable.OrderedSet)([new TestSearchFilter('Foo', 'foo', 43), new TestSearchFilter('Foo', 'foo', 43)])
            })));
        });
    });
});

define('ember-osf-web/tests/engines/registries/unit/services/share-search-test', ['ember-osf-web/tests/helpers/engines', 'qunit'], function (_engines, _qunit) {
    'use strict';

    var ES_RESPONSE = {
        hits: {
            hits: [{
                _index: 'share_customtax_1',
                _type: 'creativeworks',
                _id: '46218-570-0DA',
                _score: null,
                _source: {
                    id: '46218-570-0DA',
                    type: 'registration',
                    title: 'Pod Assignment &amp;',
                    description: '&lt;&gt;&lt;',
                    language: null,
                    date_created: '2018-10-04T18:37:42.820512+00:00',
                    date_modified: '2018-10-04T18:37:42.82049+00:00',
                    date_updated: null,
                    date_published: '2018-10-04T16:22:11.995933+00:00',
                    registration_type: 'AsPredicted Preregistration',
                    withdrawn: false,
                    justification: null,
                    tags: ['&amp;', 'Foo'],
                    identifiers: ['http://osf.io/w4yhb/'],
                    sources: ['OSF'],
                    subjects: [],
                    subject_synonyms: [],
                    lists: {
                        contributors: [{
                            id: '6402D-242-421',
                            type: 'person',
                            name: 'Graham &gt; Berlin',
                            given_name: 'Graham',
                            family_name: 'Berlin',
                            identifiers: ['http://osf.io/6j8ub/'],
                            order_cited: 0,
                            cited_as: 'Graham Berlin',
                            affiliations: [],
                            awards: [],
                            relation: 'creator'
                        }, {
                            id: '6415A-84F-065',
                            type: 'person',
                            name: 'Nicole &lt; Grant',
                            given_name: 'Nicole',
                            family_name: 'Grant',
                            identifiers: ['http://osf.io/8zrkb/'],
                            order_cited: 4,
                            cited_as: 'Nicole Grant',
                            affiliations: [],
                            relation: 'creator'
                        }]
                    }
                }
            }]
        }
    };
    (0, _qunit.module)('Registries | Unit | Service | share-search', function (hooks) {
        (0, _engines.setupEngineTest)(hooks, 'registries');
        // Replace this with your real tests.
        (0, _qunit.test)('it exists', function (assert) {
            var service = this.owner.lookup('service:share-search');
            assert.ok(service);
        });
        (0, _qunit.test)('_postProcessRegistrations', function (assert) {
            var service = this.owner.lookup('service:share-search');
            var registrations = service._postProcessRegistrations(ES_RESPONSE);
            assert.equal(registrations.length, 1);
            assert.equal(registrations[0].title, 'Pod Assignment &');
            assert.equal(registrations[0].description, '<><');
            assert.equal(registrations[0].tags[0], '&');
            assert.equal(registrations[0].contributors[0].name, 'Graham > Berlin');
            assert.equal(registrations[0].contributors[1].name, 'Nicole < Grant');
        });
    });
});

define('ember-osf-web/tests/factories/citation', ['ember-data-factory-guy', 'faker'], function (_emberDataFactoryGuy, _faker) {
    'use strict';

    _emberDataFactoryGuy.default.define('citation', {
        default: {
            citation: function citation() {
                return _faker.default.lorem.words(10);
            }
        }
    });
});

define('ember-osf-web/tests/factories/collection', ['ember-data-factory-guy', 'faker'], function (_emberDataFactoryGuy, _faker) {
    'use strict';

    _emberDataFactoryGuy.default.define('collection', {
        default: {
            title: function title() {
                return _faker.default.lorem.words(3);
            },
            dateCreated: function dateCreated() {
                return _faker.default.date.past(1);
            },
            dateModified: function dateModified() {
                return _faker.default.date.recent(1);
            },
            bookmarks: false
        },
        traits: {
            hasNodes: {
                linkedNodes: _emberDataFactoryGuy.default.hasMany('node', 3)
            },
            hasRegistrations: {
                linkedRegistrations: _emberDataFactoryGuy.default.hasMany('registration', 3)
            },
            isBookmark: {
                bookmarks: true
            }
        }
    });
});

define('ember-osf-web/tests/factories/comment-report', ['ember-data-factory-guy', 'faker'], function (_emberDataFactoryGuy, _faker) {
    'use strict';

    _emberDataFactoryGuy.default.define('comment-report', {
        default: {
            category: function category() {
                return _faker.default.random.arrayElement(['hate', 'spam', 'violence']);
            },
            text: _emberDataFactoryGuy.default.belongsTo('comment')
        }
    });
});

define('ember-osf-web/tests/factories/comment', ['ember-data-factory-guy', 'faker'], function (_emberDataFactoryGuy, _faker) {
    'use strict';

    _emberDataFactoryGuy.default.define('comment', {
        default: {
            content: function content() {
                return _faker.default.lorem.sentence();
            },
            dateCreated: function dateCreated() {
                return _faker.default.date.past(1);
            },
            dateModified: function dateModified() {
                return _faker.default.date.recent(1);
            },
            modified: true,
            deleted: false,
            isAbuse: false,
            hasChildren: false,
            canEdit: true
        },
        traits: {
            // List of possible "page" values h/t Saman- must be one of these values. Mutually exclusive.
            isWiki: {
                page: 'wiki'
            },
            isNode: {
                page: 'node'
            },
            isFile: {
                page: 'files'
            },
            // TODO: Add a hasReplies trait in the future to support replies- can we make reply page type match the
            // specified parent type?
            // Not sure if reply needs to have same page type for hasReplies to be useful. Can always make manual
            // replies with relevant type
            hasReplies: {
                replies: _emberDataFactoryGuy.default.hasMany('comment', 3)
            }
        }
    });
});

define('ember-osf-web/tests/factories/contributor', ['ember-data-factory-guy', 'faker'], function (_emberDataFactoryGuy, _faker) {
    'use strict';

    _emberDataFactoryGuy.default.define('contributor', {
        default: {
            bibliographic: function bibliographic() {
                return _faker.default.random.boolean();
            },
            permission: function permission() {
                return _faker.default.random.arrayElement(['read', 'write', 'admin']);
            },
            // nodeID: // TODO: Field not defined in serializer. Find out meaning and add to factory.
            users: _emberDataFactoryGuy.default.belongsTo('user'),
            index: function index() {
                return _faker.default.random.number();
            },
            fullName: function fullName() {
                return _faker.default.lorem.words(2);
            },
            email: function email() {
                return _faker.default.internet.email();
            },
            node: _emberDataFactoryGuy.default.belongsTo('node')
        }
    });
});

define('ember-osf-web/tests/factories/draft-registration', ['ember-data-factory-guy', 'faker'], function (_emberDataFactoryGuy, _faker) {
    'use strict';

    _emberDataFactoryGuy.default.define('draft-registration', {
        default: {
            registrationSupplement: function registrationSupplement() {
                return _faker.default.lorem.words(1);
            },
            datetimeInitiated: function datetimeInitiated() {
                return _faker.default.date.past(1);
            },
            datetimeUpdated: function datetimeUpdated() {
                return _faker.default.date.recent();
            },
            branchedFrom: _emberDataFactoryGuy.default.belongsTo('node'),
            initiator: _emberDataFactoryGuy.default.belongsTo('user'),
            registrationSchema: _emberDataFactoryGuy.default.belongsTo('registration-schema')
        }
    });
});

define('ember-osf-web/tests/factories/file-provider', ['ember-data-factory-guy'], function (_emberDataFactoryGuy) {
    'use strict';

    _emberDataFactoryGuy.default.define('file-provider', {
        default: {
            name: 'osfstorage',
            kind: 'folder',
            path: '/',
            provider: 'osfstorage',
            node: _emberDataFactoryGuy.default.belongsTo('node')
        },
        traits: {
            hasFiles: {
                files: function files() {
                    return _emberDataFactoryGuy.default.hasMany('file', 3);
                }
            }
        }
    });
});

define('ember-osf-web/tests/factories/file-version', ['ember-data-factory-guy', 'faker'], function (_emberDataFactoryGuy, _faker) {
    'use strict';

    _emberDataFactoryGuy.default.define('file-version', {
        default: {
            size: function size() {
                return _faker.default.random.number();
            },
            contentType: 'text/plain'
        }
    });
});

define('ember-osf-web/tests/factories/file', ['ember-data-factory-guy', 'faker'], function (_emberDataFactoryGuy, _faker) {
    'use strict';

    _emberDataFactoryGuy.default.define('file', {
        default: {
            name: function name() {
                return _faker.default.lorem.words(1) + '.txt';
            },
            kind: 'file',
            path: '/1234567890',
            size: function size() {
                return _faker.default.random.number();
            },
            provider: 'osfstorage',
            materializedPath: function materializedPath() {
                return '/' + _faker.default.lorem.words(1) + '.png';
            },
            lastTouched: null,
            dateModified: function dateModified() {
                return _faker.default.date.recent(1);
            },
            dateCreated: function dateCreated() {
                return _faker.default.date.past(1);
            },
            isProvider: false,
            checkout: null,
            links: {
                upload: '/this/is/an/upload/url',
                download: '/this/is/a/download/url',
                move: '/this/is/a/move/url',
                delete: '/this/is/a/delete/url',
                new_folder: '/this/is/a/new_folder/url'
            }
        },
        traits: {
            // Folder specific
            isFolder: {
                kind: 'folder',
                materializedPath: function materializedPath() {
                    return '/' + _faker.default.lorem.words(1);
                },
                files: function files() {
                    return _emberDataFactoryGuy.default.hasMany('file', 3);
                }
            },
            // File specific
            hasVersions: {
                kind: 'file',
                versions: function versions() {
                    return _emberDataFactoryGuy.default.hasMany('file-version', 3);
                }
            },
            hasComments: {
                kind: 'file',
                comments: function comments() {
                    return _emberDataFactoryGuy.default.hasMany('comment', 3);
                }
            },
            hasTags: {
                kind: 'file',
                tags: function tags() {
                    return [_faker.default.lorem.words(1), _faker.default.lorem.words(1), _faker.default.lorem.words(1)];
                }
            }
        }
    });
});

define('ember-osf-web/tests/factories/institution', ['ember-data-factory-guy', 'faker'], function (_emberDataFactoryGuy, _faker) {
    'use strict';

    _emberDataFactoryGuy.default.define('institution', {
        default: {
            name: function name() {
                return _faker.default.lorem.words(3);
            },
            description: function description() {
                return _faker.default.lorem.sentences(3);
            },
            logoPath: '/img.jpg',
            authUrl: function authUrl() {
                return _faker.default.internet.url();
            }
        },
        traits: {
            // TODO: Add children relations, if that field turns out to be needed after all (henrique)
            hasNodes: {
                nodes: function nodes() {
                    return _emberDataFactoryGuy.default.hasMany('node', 3);
                }
            },
            hasRegistrations: {
                registrations: function registrations() {
                    return _emberDataFactoryGuy.default.hasMany('registration', 3);
                }
            }
        }
    });
});

define('ember-osf-web/tests/factories/license', ['ember-data-factory-guy', 'faker'], function (_emberDataFactoryGuy, _faker) {
    'use strict';

    _emberDataFactoryGuy.default.define('license', {
        default: {
            name: function name() {
                return _faker.default.lorem.words(1);
            },
            text: function text() {
                return _faker.default.lorem.words(15);
            }
        }
    });
});

define('ember-osf-web/tests/factories/log', ['ember-data-factory-guy', 'faker'], function (_emberDataFactoryGuy, _faker) {
    'use strict';

    _emberDataFactoryGuy.default.define('log', {
        default: {
            date: function date() {
                return _faker.default.date.past(1);
            },
            // Extracted from Nodelog.actions as of May 24, 2016
            action: function action() {
                return _faker.default.random.arrayElement(['checked_in', 'checked_out', 'file_tag_removed', 'file_tag_added', 'created_from', 'project_created', 'project_registered', 'project_deleted', 'node_created', 'node_forked', 'node_removed', 'pointer_created', 'pointer_forked', 'pointer_removed', 'wiki_updated', 'wiki_deleted', 'wiki_renamed', 'made_wiki_public', 'made_wiki_private', 'contributor_added', 'contributor_removed', 'contributors_reordered', 'permissions_updated', 'made_private', 'made_public', 'tag_added', 'tag_removed', 'edit_title', 'edit_description', 'updated_fields', 'addon_file_moved', 'addon_file_copied', 'folder_created', 'file_added', 'file_updated', 'file_removed', 'file_restored', 'addon_added', 'addon_removed', 'comment_added', 'comment_removed', 'comment_updated', 'made_contributor_visible', 'made_contributor_invisible', 'external_ids_added', 'embargo_approved', 'embargo_cancelled', 'embargo_completed', 'embargo_initiated', 'retraction_approved', 'retraction_cancelled', 'retraction_initiated', 'registration_cancelled', 'registration_initiated', 'registration_approved', 'prereg_registration_initiated', 'citation_added', 'citation_edited', 'citation_removed', 'primary_institution_changed', 'primary_institution_removed']);
            },
            params: {}
        }
    });
});

define('ember-osf-web/tests/factories/node-link', ['ember-data-factory-guy'], function (_emberDataFactoryGuy) {
    'use strict';

    _emberDataFactoryGuy.default.define('node-link', {
        default: {
            targetNode: _emberDataFactoryGuy.default.belongsTo('node')
        }
    });
});

define('ember-osf-web/tests/factories/node', ['ember-data-factory-guy', 'faker'], function (_emberDataFactoryGuy, _faker) {
    'use strict';

    _emberDataFactoryGuy.default.define('node', {
        default: {
            title: function title() {
                return _faker.default.lorem.words(4);
            },
            description: function description() {
                return _faker.default.lorem.paragraphs(2, '\n');
            },
            // Extracted from Node model CATEGORY_MAP as of May 24, 2016
            category: function category() {
                return _faker.default.random.arrayElement(['analysis', 'communication', 'data', 'hypothesis', 'instrumentation', 'methods and measures', 'procedure', 'project', 'software', 'other', '']);
            },
            currentUserPermissions: function currentUserPermissions() {
                return _faker.default.random.arrayElement(['read', 'write', 'admin']);
            },
            fork: false,
            collection: false,
            registration: false,
            public: function _public() {
                return _faker.default.random.boolean();
            },
            dateCreated: function dateCreated() {
                return _faker.default.date.past(1);
            },
            dateModified: function dateModified() {
                return _faker.default.date.recent(1);
            }
        },
        traits: {
            hasParent: {
                parent: function parent() {
                    return _emberDataFactoryGuy.default.belongsTo('node');
                }
            },
            hasChildren: {
                children: _emberDataFactoryGuy.default.hasMany('node', 3)
            },
            hasInstitution: {
                affiliatedInstitutions: _emberDataFactoryGuy.default.hasMany('institution', 1)
            },
            hasComments: {
                comments: _emberDataFactoryGuy.default.hasMany('comment', 3)
            },
            hasContributors: {
                contributors: _emberDataFactoryGuy.default.hasMany('contributor', 3)
            },
            hasFiles: {
                files: _emberDataFactoryGuy.default.hasMany('file-provider', 3, 'hasFiles')
            },
            hasRegistrations: {
                registrations: _emberDataFactoryGuy.default.hasMany('registration', 1)
            },
            hasLogs: {
                logs: _emberDataFactoryGuy.default.hasMany('log', 5)
            },
            hasTags: {
                tags: function tags() {
                    return [_faker.default.lorem.words(1), _faker.default.lorem.words(1), _faker.default.lorem.words(1)];
                }
            }
        }
    });
});

define('ember-osf-web/tests/factories/preprint-provider', ['ember-data-factory-guy', 'faker'], function (_emberDataFactoryGuy, _faker) {
    'use strict';

    _emberDataFactoryGuy.default.define('preprint-provider', {
        default: {
            name: function name() {
                return _faker.default.lorem.words(1);
            },
            logoPath: function logoPath() {
                return '/static/img/preprint_providers/' + _faker.default.lorem.words(1) + '.png';
            },
            bannerPath: function bannerPath() {
                return '/static/img/preprint_providers/' + _faker.default.lorem.words(1) + '.png';
            },
            description: function description() {
                return _faker.default.lorem.words(3);
            },
            advisoryBoard: function advisoryBoard() {
                return _faker.default.lorem.paragraphs(2);
            },
            emailContact: 'contact+fake@osf.io',
            emailSupport: 'support+fake@osf.io',
            headerText: function headerText() {
                return _faker.default.lorem.words(3);
            },
            taxonomy: _emberDataFactoryGuy.default.hasMany('taxonomy', 20)
        },
        traits: {
            isOSF: {
                id: 'osf'
            },
            hasPreprints: {
                preprints: _emberDataFactoryGuy.default.hasMany('preprint', 5)
            },
            hasLicenses: {
                licensesAcceptable: _emberDataFactoryGuy.default.hasMany('license', 3)
            }
        }
    });
});

define('ember-osf-web/tests/factories/preprint', ['ember-data-factory-guy', 'faker'], function (_emberDataFactoryGuy, _faker) {
    'use strict';

    _emberDataFactoryGuy.default.define('preprint', {
        default: {
            dateCreated: function dateCreated() {
                return _faker.default.date.past(2);
            },
            datePublished: function datePublished() {
                return _faker.default.date.past(1);
            },
            dateModified: function dateModified() {
                return _faker.default.date.recent();
            },
            doi: function doi() {
                return '10.1000/' + String(_faker.default.random.number());
            },
            node: _emberDataFactoryGuy.default.belongsTo('node'),
            license: _emberDataFactoryGuy.default.belongsTo('license'),
            primaryFile: _emberDataFactoryGuy.default.belongsTo('file'),
            provider: _emberDataFactoryGuy.default.belongsTo('preprint-provider'),
            isPublished: false,
            isPreprintOrphan: false
        },
        traits: {
            hasBeenPublished: {
                isPublished: true
            }
        }
    });
});

define('ember-osf-web/tests/factories/registration-schema', ['ember-data-factory-guy', 'faker'], function (_emberDataFactoryGuy, _faker) {
    'use strict';

    _emberDataFactoryGuy.default.define('registration-schema', {
        default: {
            name: function name() {
                return _faker.default.lorem.words(1);
            },
            schemaVersion: function schemaVersion() {
                return _faker.default.random.number();
            },
            schema: {}
        }
    });
});

define('ember-osf-web/tests/factories/registration', ['ember-data-factory-guy', 'faker'], function (_emberDataFactoryGuy, _faker) {
    'use strict';

    _emberDataFactoryGuy.default.define('registration', {
        default: {
            dateRegistered: function dateRegistered() {
                return _faker.default.date.past(1);
            },
            pendingRegistrationApproval: false,
            embargoEndDate: function embargoEndDate() {
                return _faker.default.date.future(1);
            },
            pendingEmbargoApproval: false,
            withdrawn: false,
            pendingWithdrawal: false,
            // TODO: Implement with sample data for faker, possibly traits for different reg types
            registrationSupplement: null,
            registeredMeta: null,
            registeredFrom: function registeredFrom() {
                return _emberDataFactoryGuy.default.belongsTo('node');
            },
            registeredBy: function registeredBy() {
                return _emberDataFactoryGuy.default.belongsTo('user');
            },
            contributors: function contributors() {
                return _emberDataFactoryGuy.default.hasMany('contributor', 3);
            }
        },
        traits: {
            hasComments: {
                comments: function comments() {
                    return _emberDataFactoryGuy.default.hasMany('comment', 3);
                }
            }
        }
    });
});

define('ember-osf-web/tests/factories/taxonomy', ['ember-data-factory-guy', 'faker'], function (_emberDataFactoryGuy, _faker) {
    'use strict';

    _emberDataFactoryGuy.default.define('taxonomy', {
        default: {
            text: function text() {
                return _faker.default.lorem.words(2);
            },
            childCount: function childCount() {
                return _faker.default.random.number();
            },
            parents: null
        },
        traits: {
            hasParents: {
                parents: function parents() {
                    return [String(_faker.default.random.number())];
                }
            }
        }
    });
});

define('ember-osf-web/tests/factories/user', ['ember-data-factory-guy', 'faker'], function (_emberDataFactoryGuy, _faker) {
    'use strict';

    _emberDataFactoryGuy.default.define('user', {
        default: {
            fullName: function fullName() {
                return _faker.default.name.findName();
            },
            givenName: function givenName() {
                return _faker.default.name.firstName();
            },
            familyName: function familyName() {
                return _faker.default.name.lastName();
            },
            dateRegistered: function dateRegistered() {
                return _faker.default.date.past(1);
            }
        },
        traits: {
            // TODO: Consider writing tests that would force pagination of relationships (!)
            hasProjects: {
                nodes: function nodes() {
                    return _emberDataFactoryGuy.default.hasMany('node', 3);
                }
            },
            hasRegistrations: {
                registrations: function registrations() {
                    return _emberDataFactoryGuy.default.hasMany('registration', 3);
                }
            },
            hasInstitutions: {
                affiliatedInstitutions: function affiliatedInstitutions() {
                    return _emberDataFactoryGuy.default.hasMany('institution', 2);
                }
            }
        }
    });
});

define('ember-osf-web/tests/factories/wiki', ['ember-data-factory-guy', 'faker'], function (_emberDataFactoryGuy, _faker) {
    'use strict';

    _emberDataFactoryGuy.default.define('wiki', {
        defaults: {
            kind: 'file',
            name: function name() {
                return _faker.default.lorem.words(2);
            },
            dateModified: function dateModified() {
                return _faker.default.date.recent();
            },
            contentType: 'text/markdown',
            path: function path() {
                return '/' + _faker.default.lorem.words(1);
            },
            currentUserCanComment: function currentUserCanComment() {
                return _faker.default.random.boolean();
            },
            materializedPath: function materializedPath() {
                return '/' + _faker.default.lorem.words(1);
            },
            size: function size() {
                return _faker.default.random.number();
            },
            node: _emberDataFactoryGuy.default.belongsTo('node')
        }
    });
});

define('ember-osf-web/tests/fixtures/specialChars', ['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = [['a regular string', 'a regular string'], ['multiple &amp; sequences all become &amp;', 'multiple & sequences all become &'], ['also the brackets &lt; and &gt; are changed', 'also the brackets < and > are changed'], ['', ''], ['for now, intentionally limit which characters are fixed &amp; &lt; &gt;', 'for now, intentionally limit which characters are fixed & < >'], ['&Amp; ingore casing because usability &gT; correctness', '& ingore casing because usability > correctness']];
});

define('ember-osf-web/tests/helpers/ember-cli-clipboard', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.triggerSuccess = triggerSuccess;
  exports.triggerError = triggerError;

  exports.default = function () {
    Ember.Test.registerAsyncHelper('triggerCopySuccess', function (app) {
      var selector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '.copy-btn';

      fireComponentActionFromApp(app, selector, 'success');
    });

    Ember.Test.registerAsyncHelper('triggerCopyError', function (app) {
      var selector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '.copy-btn';

      fireComponentActionFromApp(app, selector, 'error');
    });
  };

  /* === Integration Test Helpers === */

  /**
   * Fires `success` action for an instance of a copy-button component
   * @function triggerSuccess
   * @param {Object} context - integration test’s this context
   * @param {String|Element} selector - selector of the copy-button instance
   * @returns {Void}
   */
  function triggerSuccess(context, selector) {
    fireComponentAction(context, selector, 'success');
  }

  /**
   * Fires `error` action for an instance of a copy-button component
   * @function triggerError
   * @param {Object} context - integration test’s this context
   * @param {String|Element} selector - selector of the copy-button instance
   * @returns {Void}
   */
  function triggerError(context, selector) {
    fireComponentAction(context, selector, 'error');
  }

  /* === Acceptance Test Helpers === */

  /**
   * Default export is a function that registers acceptance test helpers
   */


  /* === Private Functions === */

  /**
   * Fires named action for an instance of a copy-button component in an app
   * @function fireComponentActionFromApp
   * @param {Object} app - Ember application
   * @param {String|Element} selector - selector of the copy-button instance
   * @param {String} actionName - name of action
   * @returns {Void}
   */
  function fireComponentActionFromApp(app, selector, actionName) {
    fireComponentAction({
      container: app.__container__,
      $: app.$
    }, selector, actionName);
  }

  /**
   * Fires named action for an instance of a copy-button component
   * @function fireComponentAction
   * @param {Object} context - test context
   * @param {String|Element} selector - selector of the copy-button instance
   * @param {String} actionName - name of action
   * @returns {Void}
   */
  function fireComponentAction(context, selector, actionName) {
    var component = getComponentBySelector(context, selector);
    fireActionByName(component, actionName);
  }

  /**
   * Fetches component reference for a given context and selector
   * @function getComponentBySelector
   * @param {Object} context - test context
   * @param {String|Element} selector - selector of the copy-button instance
   * @returns {Object} component object
   */
  function getComponentBySelector(context) {
    var selector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '.copy-btn';

    var emberId = context.$(selector).attr('id');
    return context.container.lookup('-view-registry:main')[emberId];
  }

  /**
   * Fires a component's action given an action name
   * @function fireActionByName
   * @param {Ember.Component} component - component to fire action from
   * @param {String} actionName - name of action
   * @returns {Void}
   */
  function fireActionByName(component, actionName) {
    var action = component[actionName];

    Ember.run(function () {
      if (typeof action === 'string') {
        component.sendAction(action);
      } else {
        action();
      }
    });
  }
});

define('ember-osf-web/tests/helpers/ember-i18n/test-helpers', ['ember-i18n/test-support/-private/t'], function (_t2) {
  'use strict';

  // example usage: find(`.header:contains(${t('welcome_message')})`)
  /* globals QUnit, expect */

  Ember.Test.registerHelper('t', function (app, key, interpolations) {
    return (0, _t2.default)(app.__container__, key, interpolations);
  });

  // example usage: expectTranslation('.header', 'welcome_message');
  Ember.Test.registerHelper('expectTranslation', function (app, element, key, interpolations) {
    var text = app.testHelpers.t(key, interpolations);

    assertTranslation(element, key, text);
  });

  var assertTranslation = function () {
    if (typeof QUnit !== 'undefined' && typeof QUnit.assert.ok === 'function') {
      return function (element, key, text) {
        QUnit.assert.ok(find(element + ':contains(' + text + ')').length, 'Found translation key ' + key + ' in ' + element);
      };
    } else if (typeof expect === 'function') {
      return function (element, key, text) {
        var found = !!find(element + ':contains(' + text + ')').length;
        expect(found).to.equal(true);
      };
    } else {
      return function () {
        throw new Error("ember-i18n could not find a compatible test framework");
      };
    }
  }();
});

define('ember-osf-web/tests/helpers/ember-keyboard/register-test-helpers', ['exports', 'ember-keyboard', 'ember-keyboard/fixtures/modifiers-array', 'ember-keyboard/fixtures/mouse-buttons-array', 'ember-keyboard/utils/get-cmd-key'], function (exports, _emberKeyboard, _modifiersArray, _mouseButtonsArray, _getCmdKey) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.default = function () {
    Ember.Test.registerAsyncHelper('keyDown', function (app, attributes, element) {
      return keyEvent(app, attributes, 'keydown', element);
    });

    Ember.Test.registerAsyncHelper('keyUp', function (app, attributes, element) {
      return keyEvent(app, attributes, 'keyup', element);
    });

    Ember.Test.registerAsyncHelper('keyPress', function (app, attributes, element) {
      return keyEvent(app, attributes, 'keypress', element);
    });

    Ember.Test.registerAsyncHelper('mouseDown', function (app, attributes, element) {
      return keyEvent(app, attributes, 'mousedown', element);
    });

    Ember.Test.registerAsyncHelper('mouseUp', function (app, attributes, element) {
      return keyEvent(app, attributes, 'mouseup', element);
    });

    Ember.Test.registerAsyncHelper('touchStart', function (app, attributes, element) {
      return keyEvent(app, attributes, 'touchstart', element);
    });

    Ember.Test.registerAsyncHelper('touchEnd', function (app, attributes, element) {
      return keyEvent(app, attributes, 'touchend', element);
    });
  };

  var keyEvent = function keyEvent(app, attributes, type, element) {
    var event = (attributes || '').split('+').reduce(function (event, attribute) {
      if (_modifiersArray.default.indexOf(attribute) > -1) {
        attribute = attribute === 'cmd' ? (0, _getCmdKey.default)() : attribute;
        event[attribute + 'Key'] = true;
      } else if (_mouseButtonsArray.default.indexOf(attribute) > -1) {
        event.button = (0, _emberKeyboard.getMouseCode)(attribute);
      } else {
        event.keyCode = (0, _emberKeyboard.getKeyCode)(attribute);
      }

      return event;
    }, {});

    return app.testHelpers.triggerEvent(element || document.body, type, event);
  };
});

define('ember-osf-web/tests/helpers/ember-power-select', ['exports', 'ember-power-select/test-support/helpers'], function (exports, _helpers) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.selectChoose = exports.touchTrigger = exports.nativeTouch = exports.clickTrigger = exports.typeInSearch = exports.triggerKeydown = exports.nativeMouseUp = exports.nativeMouseDown = exports.findContains = undefined;
  exports.default = deprecatedRegisterHelpers;


  function deprecateHelper(fn, name) {
    return function () {
      (true && !(false) && Ember.deprecate('DEPRECATED `import { ' + name + ' } from \'../../tests/helpers/ember-power-select\';` is deprecated. Please, replace it with `import { ' + name + ' } from \'ember-power-select/test-support/helpers\';`', false, { until: '1.11.0', id: 'ember-power-select-test-support-' + name }));

      return fn.apply(undefined, arguments);
    };
  }

  var findContains = deprecateHelper(_helpers.findContains, 'findContains');
  var nativeMouseDown = deprecateHelper(_helpers.nativeMouseDown, 'nativeMouseDown');
  var nativeMouseUp = deprecateHelper(_helpers.nativeMouseUp, 'nativeMouseUp');
  var triggerKeydown = deprecateHelper(_helpers.triggerKeydown, 'triggerKeydown');
  var typeInSearch = deprecateHelper(_helpers.typeInSearch, 'typeInSearch');
  var clickTrigger = deprecateHelper(_helpers.clickTrigger, 'clickTrigger');
  var nativeTouch = deprecateHelper(_helpers.nativeTouch, 'nativeTouch');
  var touchTrigger = deprecateHelper(_helpers.touchTrigger, 'touchTrigger');
  var selectChoose = deprecateHelper(_helpers.selectChoose, 'selectChoose');

  function deprecatedRegisterHelpers() {
    (true && !(false) && Ember.deprecate("DEPRECATED `import registerPowerSelectHelpers from '../../tests/helpers/ember-power-select';` is deprecated. Please, replace it with `import registerPowerSelectHelpers from 'ember-power-select/test-support/helpers';`", false, { until: '1.11.0', id: 'ember-power-select-test-support-register-helpers' }));

    return (0, _helpers.default)();
  }

  exports.findContains = findContains;
  exports.nativeMouseDown = nativeMouseDown;
  exports.nativeMouseUp = nativeMouseUp;
  exports.triggerKeydown = triggerKeydown;
  exports.typeInSearch = typeInSearch;
  exports.clickTrigger = clickTrigger;
  exports.nativeTouch = nativeTouch;
  exports.touchTrigger = touchTrigger;
  exports.selectChoose = selectChoose;
});

define('ember-osf-web/tests/helpers/ember-simple-auth', ['exports', 'ember-simple-auth/authenticators/test'], function (exports, _test) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.authenticateSession = authenticateSession;
  exports.currentSession = currentSession;
  exports.invalidateSession = invalidateSession;


  var TEST_CONTAINER_KEY = 'authenticator:test';

  function ensureAuthenticator(app, container) {
    var authenticator = container.lookup(TEST_CONTAINER_KEY);
    if (!authenticator) {
      app.register(TEST_CONTAINER_KEY, _test.default);
    }
  }

  function authenticateSession(app, sessionData) {
    var container = app.__container__;

    var session = container.lookup('service:session');
    ensureAuthenticator(app, container);
    session.authenticate(TEST_CONTAINER_KEY, sessionData);
    return app.testHelpers.wait();
  }

  function currentSession(app) {
    return app.__container__.lookup('service:session');
  }

  function invalidateSession(app) {
    var session = app.__container__.lookup('service:session');
    if (session.get('isAuthenticated')) {
      session.invalidate();
    }
    return app.testHelpers.wait();
  }
});

define('ember-osf-web/tests/helpers/ember-sortable/test-helpers', ['ember-sortable/helpers/drag', 'ember-sortable/helpers/reorder'], function () {
  'use strict';
});

define('ember-osf-web/tests/helpers/ember-tag-input', ['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.typeInInput = typeInInput;
  exports.typeCharacterInInput = typeCharacterInInput;
  function typeInInput(selector, text) {
    text.split('').forEach(function (character) {
      typeCharacterInInput(selector, character);
    });
  }

  function typeCharacterInInput(selector, character) {
    var eventType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'keydown';

    var input = Ember.$(selector),
        currentVal = input.val();

    input.val(currentVal + character);

    var e = Ember.$.Event(eventType);
    e.which = character.charCodeAt(0);
    input.trigger(e);
  }
});

define('ember-osf-web/tests/helpers/engines', ['exports', '@ember/test-helpers/setup-context', 'ember-engines/test-support/engine-resolver-for', 'ember-osf-web/breakpoints', 'ember-osf-web/locales/en/config', 'ember-osf-web/locales/en/translations', 'ember-qunit'], function (exports, _setupContext, _engineResolverFor, _breakpoints, _config, _translations, _emberQunit) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.loadEngine = undefined;
    exports.setupEngineTest = setupEngineTest;
    exports.setupEngineRenderingTest = setupEngineRenderingTest;
    exports.setupEngineApplicationTest = setupEngineApplicationTest;

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    function setupEngineFixtures(hooks) {
        hooks.beforeEach(function () {
            // Register constants that injected services use to simulate the same
            // behavior as the actual app/engine
            this.owner.register('breakpoints:main', _breakpoints.default, { instantiate: false });
            this.owner.register('locale:en/config', _config.default);
            this.owner.register('locale:en/translations', _translations.default, { instantiate: false });
        });
    }
    function setupEngineTest(hooks, engine) {
        (0, _emberQunit.setupTest)(hooks, { resolver: (0, _engineResolverFor.default)(engine) });
        setupEngineFixtures(hooks);
    }
    function setupEngineRenderingTest(hooks, engine) {
        (0, _emberQunit.setupRenderingTest)(hooks, { resolver: (0, _engineResolverFor.default)(engine) });
        setupEngineFixtures(hooks);
    }

    var loadEngine = exports.loadEngine = function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(engine, mountPoint) {
            var _getContext, owner, router, instance;

            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            _getContext = (0, _setupContext.getContext)(), owner = _getContext.owner;
                            // Engine construction happens in/on the router of the application
                            // Engines use the application registry as a fallback, which means
                            // any mocked services, etc that are injected won't get picked up.

                            router = owner.lookup('router:main');
                            // Idempotent router setup, would otherwise be triggered by calling `visit()`

                            router.setupRouter();
                            // Create the engine instance using the engineInfo loaded by calling `setupRouter`
                            _context.next = 5;
                            return router._loadEngineInstance(router._engineInfoByRoute[mountPoint]);

                        case 5:
                            instance = _context.sent;
                            _context.next = 8;
                            return instance.boot();

                        case 8:
                            // Add the engine to the application registry for later use
                            owner.register('-engine-instance:' + engine + '-' + mountPoint, instance, { instantiate: false });
                            return _context.abrupt('return', instance);

                        case 10:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this);
        }));

        return function loadEngine(_x, _x2) {
            return _ref.apply(this, arguments);
        };
    }();

    function setupEngineApplicationTest(hooks, engine, mountPoint) {
        (0, _emberQunit.setupApplicationTest)(hooks);
        setupEngineFixtures(hooks);
        hooks.beforeEach(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
            return regeneratorRuntime.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            _context2.next = 2;
                            return loadEngine(engine, mountPoint || engine);

                        case 2:
                        case 'end':
                            return _context2.stop();
                    }
                }
            }, _callee2, this);
        })));
    }
});

define('ember-osf-web/tests/helpers/index', ['exports', '@ember/test-helpers', '@ember/test-helpers/setup-context'], function (exports, _testHelpers, _setupContext) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.visit = undefined;
    exports.currentURL = currentURL;

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    var visit = exports.visit = function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(url) {
            var context;
            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            _context.prev = 0;
                            _context.next = 3;
                            return (0, _testHelpers.visit)(url);

                        case 3:
                            _context.next = 11;
                            break;

                        case 5:
                            _context.prev = 5;
                            _context.t0 = _context['catch'](0);

                            if (!(_context.t0.message !== 'TransitionAborted')) {
                                _context.next = 9;
                                break;
                            }

                            throw _context.t0;

                        case 9:
                            // Set this.element for application tests as the original
                            // visit's attempt to do so was interupted by an exception
                            context = (0, _setupContext.getContext)();

                            context.element = document.querySelector('#ember-testing');

                        case 11:
                            _context.next = 13;
                            return (0, _testHelpers.settled)();

                        case 13:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, this, [[0, 5]]);
        }));

        return function visit(_x) {
            return _ref.apply(this, arguments);
        };
    }();

    // The current implementation of currentURL pulls
    // the url from the router itself. This ignores any transforms
    // that may have happen to the URL from the location implementation.
    // To allow existing tests to work well, delegate to location.
    // eslint-disable-next-line max-len
    // https://github.com/emberjs/ember-test-helpers/blob/47b094d516ec8c320879ea5d0eb1b4944cd136a4/addon-test-support/%40ember/test-helpers/setup-application-context.js#L52
    function currentURL() {
        var _getContext = (0, _setupContext.getContext)(),
            owner = _getContext.owner;

        var router = owner.lookup('router:main');
        return router.get('location').getURL();
    }
});

define('ember-osf-web/tests/helpers/percy/register-helpers', ['ember-percy'], function (_emberPercy) {
  'use strict';

  Ember.Test.registerAsyncHelper('percySnapshot', function (app, name, options) {
    // eslint-disable-line
    (0, _emberPercy.percySnapshot)(name, options);
  });
});

define('ember-osf-web/tests/helpers/require-auth', ['exports', 'ember-osf-web/services/current-user'], function (exports, _currentUser) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.CurrentUserStub = undefined;

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    var CurrentUserStub = exports.CurrentUserStub = function (_CurrentUser$extend) {
        _inherits(CurrentUserStub, _CurrentUser$extend);

        function CurrentUserStub() {
            _classCallCheck(this, CurrentUserStub);

            return _possibleConstructorReturn(this, (CurrentUserStub.__proto__ || Object.getPrototypeOf(CurrentUserStub)).apply(this, arguments));
        }

        return CurrentUserStub;
    }(_currentUser.default.extend({
        urlCalled: '',
        login: function () {
            var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(nextUrl) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                this.urlCalled = nextUrl !== undefined ? nextUrl : '';

                            case 1:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function login(_x) {
                return _ref.apply(this, arguments);
            }

            return login;
        }()
    }));
});

define('ember-osf-web/tests/integration/components/contributor-list/component-test', ['@ember/test-helpers', 'ember-qunit', 'qunit'], function (_testHelpers, _emberQunit, _qunit) {
    'use strict';

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    var i18nStub = Ember.Service.extend({
        translations: Ember.Object.create({
            list: {
                two_item: {
                    delimiter: ' and '
                },
                many_item: {
                    first_delimiter: ', ',
                    each_delimiter: ', ',
                    last_delimiter: ', and '
                }
            }
        }),
        t: function t(key, options) {
            if (key === 'contributor_list.and_x_more') {
                return options.get('x') + ' more';
            }
            // @ts-ignore
            return this.get('translations').get(key);
        }
    });
    (0, _qunit.module)('Integration | Component | contributor-list', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        hooks.beforeEach(function () {
            this.owner.register('service:i18n', i18nStub);
            this.i18n = this.owner.lookup('service:i18n');
        });
        function nameToUsersFamilyNames(familyName) {
            return Ember.Object.create({
                users: Ember.Object.create({
                    familyName: familyName
                })
            });
        }
        (0, _qunit.test)('it renders', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                var _this = this;

                var testCases, _loop, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _ref3, _ref4, input, expected;

                return regeneratorRuntime.wrap(function _callee$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                testCases = [[[], ''], [['Doe'], 'Doe'], [['Doe', 'Smith'], 'Doe and Smith'], [['Doe', 'Smith', 'Johnson'], 'Doe, Smith, and Johnson'], [['Doe', 'Smith', 'Johnson', 'Green'], 'Doe, Smith, Johnson, and 1 more'], [['Doe', 'Smith', 'Johnson', 'Green', 'Thompson'], 'Doe, Smith, Johnson, and 2 more']];

                                assert.expect(testCases.length);
                                _loop = /*#__PURE__*/regeneratorRuntime.mark(function _loop(input, expected) {
                                    var contributors;
                                    return regeneratorRuntime.wrap(function _loop$(_context) {
                                        while (1) {
                                            switch (_context.prev = _context.next) {
                                                case 0:
                                                    contributors = {
                                                        toArray: function toArray() {
                                                            return Ember.A(input.map(nameToUsersFamilyNames));
                                                        },
                                                        meta: {
                                                            total: input.length
                                                        }
                                                    };

                                                    _this.set('contributors', contributors);
                                                    _context.next = 4;
                                                    return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                                        "id": "qwgXTifL",
                                                        "block": "{\"symbols\":[],\"statements\":[[1,[27,\"contributor-list\",null,[[\"contributors\"],[[23,[\"contributors\"]]]]],false]],\"hasEval\":false}",
                                                        "meta": {}
                                                    }));

                                                case 4:
                                                    assert.dom(_this.element).hasText(expected);

                                                case 5:
                                                case 'end':
                                                    return _context.stop();
                                            }
                                        }
                                    }, _loop, _this);
                                });
                                _iteratorNormalCompletion = true;
                                _didIteratorError = false;
                                _iteratorError = undefined;
                                _context2.prev = 6;
                                _iterator = testCases[Symbol.iterator]();

                            case 8:
                                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                                    _context2.next = 17;
                                    break;
                                }

                                _ref3 = _step.value;
                                _ref4 = _slicedToArray(_ref3, 2);
                                input = _ref4[0];
                                expected = _ref4[1];
                                return _context2.delegateYield(_loop(input, expected), 't0', 14);

                            case 14:
                                _iteratorNormalCompletion = true;
                                _context2.next = 8;
                                break;

                            case 17:
                                _context2.next = 23;
                                break;

                            case 19:
                                _context2.prev = 19;
                                _context2.t1 = _context2['catch'](6);
                                _didIteratorError = true;
                                _iteratorError = _context2.t1;

                            case 23:
                                _context2.prev = 23;
                                _context2.prev = 24;

                                if (!_iteratorNormalCompletion && _iterator.return) {
                                    _iterator.return();
                                }

                            case 26:
                                _context2.prev = 26;

                                if (!_didIteratorError) {
                                    _context2.next = 29;
                                    break;
                                }

                                throw _iteratorError;

                            case 29:
                                return _context2.finish(26);

                            case 30:
                                return _context2.finish(23);

                            case 31:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee, this, [[6, 19, 23, 31], [24,, 26, 30]]);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/integration/components/contributor-list/contributor/component-test', ['@ember/test-helpers', 'ember-qunit', 'qunit'], function (_testHelpers, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Integration | Component | contributor-list/contributor', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        (0, _qunit.test)('it renders', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "K9iGXMze",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[21,\"contributor-list/contributor\"],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                assert.dom(this.element).hasText('');

                            case 3:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/integration/components/cookie-banner/component-test', ['@ember/test-helpers', 'ember-qunit', 'qunit'], function (_testHelpers, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Integration | Component | cookie-banner', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        (0, _qunit.test)('it renders', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "SNf4NrvO",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[21,\"cookie-banner\"],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                assert.dom(this.element).hasText('This website relies on cookies to help provide a better user experience. ' + 'By clicking Accept or continuing to use the site, you agree. ' + 'For more information, see our Privacy Policy and information on cookie use. Accept');

                            case 3:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/integration/components/copyable-text/component-test', ['@ember/test-helpers', 'ember-qunit', 'qunit'], function (_testHelpers, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Integration | Component | copyable-text', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        (0, _qunit.test)('it renders', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "JLBF5b2/",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"copyable-text\",null,[[\"text\"],[\"foo\"]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                assert.dom('input', this.element).hasValue('foo');

                            case 3:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/integration/components/dashboard-item/component-test', ['@ember/test-helpers', 'ember-qunit', 'qunit'], function (_testHelpers, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Integration | Component | dashboard-item', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        (0, _qunit.test)('it renders', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "G+430kx0",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[21,\"dashboard-item\"],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                assert.dom('div.ember-view > a  > div[class*="_DashboardItem_"]').exists();

                            case 3:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, undefined);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/integration/components/delete-node-modal/component-test', ['@ember/test-helpers', 'ember-qunit', 'qunit'], function (_testHelpers, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Integration | Component | delete-node-modal', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        hooks.beforeEach(function () {
            this.set('delete', function () {
                return true;
            });
            this.set('closeModal', function () {
                return true;
            });
        });
        (0, _qunit.test)('hidden by default', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "KhRCN+Gq",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"delete-node-modal\",null,[[\"closeModal\",\"delete\"],[[23,[\"closeModal\"]],[23,[\"delete\"]]]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                assert.dom(this.element).hasText('');

                            case 3:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('shown when openModal=true', function () {
            var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                _context2.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "WnYQUGju",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"delete-node-modal\",null,[[\"closeModal\",\"delete\",\"openModal\"],[[23,[\"closeModal\"]],[23,[\"delete\"]],true]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                assert.dom(this.element).includesText('Are you sure you want to delete this project?');

                            case 3:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            return function (_x2) {
                return _ref3.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/integration/components/draft-registration-card/component-test', ['@ember/test-helpers', 'ember-qunit', 'qunit'], function (_testHelpers, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Integration | Component | draft-registration-card', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        (0, _qunit.test)('it renders', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "4zRNPiE5",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[21,\"draft-registration-card\"],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                assert.dom(this.element).hasText('Edit Delete Register');

                            case 3:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/integration/components/dropzone-widget/component-test', ['@ember/test-helpers', 'ember-qunit', 'qunit'], function (_testHelpers, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Integration | Component | dropzone-widget', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        (0, _qunit.test)('it renders', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "epxXNWN6",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[21,\"dropzone-widget\"],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                assert.dom('div.dz-message').hasText('Drop files here to upload');

                            case 3:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, undefined);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/integration/components/file-browser-item/component-test', ['@ember/test-helpers', 'ember-qunit', 'qunit'], function (_testHelpers, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Integration | Component | file-browser-item', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        hooks.beforeEach(function () {
            var item = Ember.Object.create({
                itemName: 'An item',
                size: 1000,
                dateModified: 'Tue Aug 08 2017 13:59:47 GMT-0400 (EDT)',
                path: '/where_this_item_lives',
                currentVersion: 2,
                extra: {
                    downloads: 192830
                }
            });
            this.set('item', item);
        });
        var base = 'div[class*="file-browser-item"]';
        // TEST DISPLAY
        (0, _qunit.test)('it renders with all default columns', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "31zwhWLi",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"file-browser-item\",null,[[\"item\"],[[23,[\"item\"]]]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                assert.dom('div.flash-message').doesNotExist('Flash message not shown.');
                                assert.dom(base + ' > div:nth-child(1)').includesText('An item', 'Name of the item shown.');
                                assert.dom(base + ' > div:nth-child(2)').includesText('kB', 'Size shown.');
                                assert.dom(base + ' > div:nth-child(3) > a[class*="version-link"]').exists('Version of item shown.');
                                assert.dom(base + ' > div:nth-child(4)').includesText('192830', 'Download count shown.');
                                assert.dom(base + ' > time:nth-child(5)').includesText('2017', 'Modified date shown.');

                            case 8:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, undefined);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
        // TEST FLASH message (at some point look at testing its dissapearnace)
        (0, _qunit.test)('flash appears, replaces everything else', function () {
            var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
                var item;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                item = this.get('item');

                                item.flash = {
                                    message: 'Welp',
                                    type: 'danger'
                                };
                                this.set('item', item);
                                _context2.next = 5;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "31zwhWLi",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"file-browser-item\",null,[[\"item\"],[[23,[\"item\"]]]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 5:
                                assert.dom(base + ' > div.alert-danger > div.flash-message').exists('Danger flash message shown.');
                                assert.dom(this.element).doesNotIncludeText('An item', 'Name of the item not shown.');
                                assert.dom(this.element).doesNotIncludeText('kB', 'Size not shown.');
                                assert.dom('a[class*="version-link"]').doesNotExist('Version of item not shown.');
                                assert.dom(this.element).doesNotIncludeText('192830', 'Download count not shown.');
                                assert.dom(this.element).doesNotIncludeText('2017', 'Modified date not shown.');

                            case 11:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            return function (_x2) {
                return _ref3.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/integration/components/file-browser/component-test', ['@ember/test-helpers', 'ember-data-factory-guy', 'ember-qunit', 'qunit'], function (_testHelpers, _emberDataFactoryGuy, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Integration | Component | file-browser', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        hooks.beforeEach(function () {
            (0, _emberDataFactoryGuy.manualSetup)(this);
        });
        (0, _qunit.test)('test name\'s column width', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                this.set('user', _emberDataFactoryGuy.default.make('user'));
                                this.set('display', ['header']);
                                _context.next = 4;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "M7wf7LLs",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"file-browser\",null,[[\"user\",\"display\"],[[23,[\"user\"]],[23,[\"display\"]]]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 4:
                                assert.dom('div[class*="column-labels-header"] > div:nth-child(1)').hasClass('col-xs-12');

                            case 5:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
        (0, _qunit.skip)('test name\'s column width (share-link-column)', function () {
            var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                this.set('user', _emberDataFactoryGuy.default.make('user'));
                                this.set('display', ['header', 'share-link-column']);
                                _context2.next = 4;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "M7wf7LLs",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"file-browser\",null,[[\"user\",\"display\"],[[23,[\"user\"]],[23,[\"display\"]]]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 4:
                                assert.equal(this.$('div:contains("Name")').html().split('col-xs-')[1].split(' ')[0], '11');

                            case 5:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            return function (_x2) {
                return _ref3.apply(this, arguments);
            };
        }());
        (0, _qunit.skip)('test name\'s column width (default)', function () {
            var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                // Test default behavior
                                this.set('user', _emberDataFactoryGuy.default.make('user'));
                                _context3.next = 3;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "Ly7BfElv",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"file-browser\",null,[[\"user\"],[[23,[\"user\"]]]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 3:
                                assert.equal(this.$('div:contains("Name")').html().split('col-xs-')[1].split(' ')[0], '6');

                            case 4:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            return function (_x3) {
                return _ref4.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/integration/components/file-editor/component-test', ['@ember/test-helpers', 'ember-ace', 'ember-qunit', 'qunit'], function (_testHelpers, _emberAce, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Integration | Component | file-editor', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        (0, _qunit.test)('it renders', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                var editor;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "favaMc0q",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[21,\"file-editor\"],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                editor = _emberAce.default.edit(document.querySelector('[data-ember-ace]'));

                                assert.equal(editor.getSession().getValue(), '');

                            case 4:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, undefined);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('it renders with text', function () {
            var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
                var editor;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                _context2.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "cA2dPuSD",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"file-editor\",null,[[\"fileText\"],[\"Test text\"]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                editor = _emberAce.default.edit(document.querySelector('[data-ember-ace]'));

                                assert.equal(editor.getSession().getValue(), 'Test text');

                            case 4:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, undefined);
            }));

            return function (_x2) {
                return _ref3.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('revert button reverts the text to its original value', function () {
            var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
                var editor;
                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                _context3.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "cA2dPuSD",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"file-editor\",null,[[\"fileText\"],[\"Test text\"]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                editor = _emberAce.default.edit(document.querySelector('[data-ember-ace]'));

                                assert.equal(editor.getSession().getValue(), 'Test text');
                                editor.getSession().setValue('Just a test');
                                assert.equal(editor.getSession().getValue(), 'Just a test');
                                _context3.next = 8;
                                return (0, _testHelpers.click)('#btnRevertEditor');

                            case 8:
                                assert.equal(editor.getSession().getValue(), 'Test text');

                            case 9:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, undefined);
            }));

            return function (_x3) {
                return _ref4.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('save button calls save action', function () {
            var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
                var editor;
                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                this.set('externalSaveAction', function (actual) {
                                    var expected = 'Test to save this new text!';
                                    assert.equal(actual, expected, 'Save function properly passes new value');
                                });
                                _context4.next = 3;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "lEmfWxO/",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"file-editor\",null,[[\"save\"],[[27,\"action\",[[22,0,[]],[23,[\"externalSaveAction\"]]],null]]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 3:
                                editor = _emberAce.default.edit(document.querySelector('[data-ember-ace]'));

                                editor.getSession().setValue('Test to save this new text!');
                                assert.expect(1);
                                _context4.next = 8;
                                return (0, _testHelpers.click)('#btnSaveEditor');

                            case 8:
                            case 'end':
                                return _context4.stop();
                        }
                    }
                }, _callee4, this);
            }));

            return function (_x4) {
                return _ref5.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/integration/components/file-icon/component-test', ['@ember/test-helpers', 'ember-qunit', 'qunit'], function (_testHelpers, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Integration | Component | file-icon', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        (0, _qunit.test)('default file icon', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                this.set('item', Ember.Object.create({}));
                                _context.next = 3;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "Nsw0EVEX",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"file-icon\",null,[[\"item\"],[[23,[\"item\"]]]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 3:
                                assert.dom('i').hasClass('fa-file-o');

                            case 4:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('file type not found uses default', function () {
            var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
                var file;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                file = Ember.Object.create({ itemName: 'file.notafiletype' });

                                this.set('item', file);
                                _context2.next = 4;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "Nsw0EVEX",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"file-icon\",null,[[\"item\"],[[23,[\"item\"]]]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 4:
                                assert.dom('i').hasClass('fa-file-o');

                            case 5:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            return function (_x2) {
                return _ref3.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('file doesnt have a type, uses default', function () {
            var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
                var file;
                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                file = Ember.Object.create({ itemName: 'doesntevenhaveatypelikewow' });

                                this.set('item', file);
                                _context3.next = 4;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "Nsw0EVEX",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"file-icon\",null,[[\"item\"],[[23,[\"item\"]]]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 4:
                                assert.dom('i').hasClass('fa-file-o');

                            case 5:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            return function (_x3) {
                return _ref4.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('file gets the right icon for type', function () {
            var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
                var file;
                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                file = Ember.Object.create({ itemName: 'normalfilefornormalpeople.c' });

                                this.set('item', file);
                                _context4.next = 4;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "Nsw0EVEX",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"file-icon\",null,[[\"item\"],[[23,[\"item\"]]]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 4:
                                assert.dom('i').hasClass('fa-file-code-o');
                                assert.dom('i').doesNotHaveClass('fa-file-o');

                            case 6:
                            case 'end':
                                return _context4.stop();
                        }
                    }
                }, _callee4, this);
            }));

            return function (_x4) {
                return _ref5.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/integration/components/file-list-item/component-test', ['@ember/test-helpers', 'ember-qunit', 'qunit'], function (_testHelpers, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Integration | Component | file-list-item', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        (0, _qunit.test)('it renders', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                var itemName;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                // Set any properties with this.set('myProperty', 'value');
                                // Handle any actions with this.set('myAction', function(val) { ... });
                                itemName = 'file.txt';

                                this.set('item', Ember.Object.create({ itemName: itemName }));
                                _context.next = 4;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "KllOe31a",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"file-list-item\",null,[[\"item\"],[[23,[\"item\"]]]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 4:
                                assert.ok(this.element.textContent.includes(itemName));

                            case 5:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/integration/components/file-list/component-test', ['@ember/test-helpers', 'ember-qunit', 'qunit'], function (_testHelpers, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Integration | Component | file-list', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        (0, _qunit.test)('it renders', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "7vAQ6FcC",
                                    "block": "{\"symbols\":[],\"statements\":[[0,\"\\n\"],[4,\"file-list\",null,null,{\"statements\":[[0,\"                template block text\\n\"]],\"parameters\":[]},null],[0,\"        \"]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                assert.ok(this.element.textContent.trim());

                            case 3:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/integration/components/file-renderer/component-test', ['@ember/test-helpers', 'ember-get-config', 'ember-qunit', 'qunit'], function (_testHelpers, _emberGetConfig, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    var renderUrl = _emberGetConfig.default.OSF.renderUrl;

    (0, _qunit.module)('Integration | Component | file-renderer', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        (0, _qunit.test)('file rendering defaults', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                var download, iframe;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                download = this.set('download', 'someTruthyValue');
                                _context.next = 3;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "u8ALKnvM",
                                    "block": "{\"symbols\":[],\"statements\":[[0,\"\\n            \"],[1,[27,\"file-renderer\",null,[[\"download\"],[[23,[\"download\"]]]]],false],[0,\"\\n        \"]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 3:
                                iframe = this.element.querySelector('iframe');

                                iframe.dispatchEvent(new Event('load'));
                                _context.next = 7;
                                return (0, _testHelpers.settled)();

                            case 7:
                                assert.equal(iframe.getAttribute('height'), '100%');
                                assert.equal(iframe.getAttribute('width'), '100%');
                                assert.equal(iframe.getAttribute('src'), renderUrl + '?url=' + encodeURIComponent(download + '?direct=&mode=render'));

                            case 10:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('specify file rendering parameters', function () {
            var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
                var iframe;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                this.setProperties({
                                    download: 'http://cos.io/',
                                    height: 500,
                                    width: 500
                                });
                                _context2.next = 3;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "gGCBt24W",
                                    "block": "{\"symbols\":[],\"statements\":[[0,\"\\n            \"],[1,[27,\"file-renderer\",null,[[\"download\",\"height\",\"width\"],[[23,[\"download\"]],[23,[\"height\"]],[23,[\"width\"]]]]],false],[0,\"\\n        \"]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 3:
                                iframe = this.element.querySelector('iframe');

                                iframe.dispatchEvent(new Event('load'));
                                _context2.next = 7;
                                return (0, _testHelpers.settled)();

                            case 7:
                                assert.equal(iframe.getAttribute('height'), '500');
                                assert.equal(iframe.getAttribute('width'), '500');
                                assert.equal(iframe.getAttribute('src'), renderUrl + '?url=' + encodeURIComponent('http://cos.io/?direct=&mode=render'));

                            case 10:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            return function (_x2) {
                return _ref3.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/integration/components/file-share-button/component-test', ['@ember/test-helpers', 'ember-qunit', 'qunit'], function (_testHelpers, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Integration | Component | file-share-button', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        (0, _qunit.test)('it renders', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "OtZ8JppF",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[21,\"file-share-button\"],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                assert.dom('button').hasText('Share');

                            case 3:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, undefined);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/integration/components/file-version/component-test', ['@ember/test-helpers', 'ember-qunit', 'qunit'], function (_testHelpers, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Integration | Component | file-version', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        (0, _qunit.test)('it renders', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                var version;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                // Tests that the file-version table renders when given the right data
                                version = {
                                    id: 1,
                                    attributes: {
                                        modified_utc: '2017-10-06T18:23:50+00:00',
                                        extra: {
                                            downloads: 10
                                        }
                                    }
                                };

                                this.set('version', version);
                                _context.next = 4;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "I1hoIBlp",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"file-version\",null,[[\"version\"],[[23,[\"version\"]]]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 4:
                                assert.dom('.file-version > :nth-child(1)').hasText('1', 'The first list element displays the id.');
                                assert.dom('.file-version > :nth-child(2)').includesText('2017-10-06', 'The second list element displays the file date.');
                                assert.dom('.file-version > :nth-child(3)').hasText('10', 'The third list element displays the download count.');

                            case 7:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/integration/components/hyper-link/component-test', ['@ember/test-helpers', 'ember-osf-web/services/analytics', 'ember-qunit', 'ember-sinon-qunit/test-support/test', 'qunit', 'sinon'], function (_testHelpers, _analytics, _emberQunit, _test, _qunit, _sinon) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Integration | Component | hyper-link', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        (0, _qunit.test)('it renders ember routes', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "xIPWIOFx",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"hyper-link\",[[23,[\"foo\"]]],null],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                assert.dom('a').exists();

                            case 3:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('it renders external hrefs', function () {
            var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                _context2.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "t9CbV0gA",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"hyper-link\",[\"http://example.com\"],null],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                assert.dom('a[href="http://example.com"]').exists();

                            case 3:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            return function (_x2) {
                return _ref3.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('it renders internal hrefs', function () {
            var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                _context3.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "WToQM1/u",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"hyper-link\",[\"/\"],null],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                assert.dom('a[href="/"]').exists();

                            case 3:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            return function (_x3) {
                return _ref4.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('it does not render when hidden=true', function () {
            var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                this.set('isHidden', true);
                                _context4.next = 3;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "Pk37z7Pt",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"hyper-link\",null,[[\"hidden\"],[[23,[\"isHidden\"]]]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 3:
                                assert.dom('a').doesNotExist();
                                this.set('isHidden', false);
                                assert.dom('a').exists();
                                this.set('isHidden', true);
                                assert.dom('a').doesNotExist();

                            case 8:
                            case 'end':
                                return _context4.stop();
                        }
                    }
                }, _callee4, this);
            }));

            return function (_x4) {
                return _ref5.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('it renders `text`', function () {
            var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
                return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                        switch (_context5.prev = _context5.next) {
                            case 0:
                                _context5.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "g/gGUE9E",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"hyper-link\",null,[[\"text\"],[\"This is my text\"]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                assert.dom('a').hasText('This is my text');

                            case 3:
                            case 'end':
                                return _context5.stop();
                        }
                    }
                }, _callee5, this);
            }));

            return function (_x5) {
                return _ref6.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('it renders yields', function () {
            var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
                return regeneratorRuntime.wrap(function _callee6$(_context6) {
                    while (1) {
                        switch (_context6.prev = _context6.next) {
                            case 0:
                                _context6.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "R8Q9vDyk",
                                    "block": "{\"symbols\":[],\"statements\":[[0,\"\\n\"],[4,\"hyper-link\",null,[[\"text\"],[\"This is my text\"]],{\"statements\":[[0,\"                This is not my text\\n\"]],\"parameters\":[]},null],[0,\"        \"]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                assert.dom('a').hasText('This is not my text');

                            case 3:
                            case 'end':
                                return _context6.stop();
                        }
                    }
                }, _callee6, this);
            }));

            return function (_x6) {
                return _ref7.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('it allows overriding route when curried', function () {
            var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
                return regeneratorRuntime.wrap(function _callee7$(_context7) {
                    while (1) {
                        switch (_context7.prev = _context7.next) {
                            case 0:
                                _context7.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "DuNJslm+",
                                    "block": "{\"symbols\":[\"ctx\"],\"statements\":[[0,\"\\n\"],[4,\"let\",[[27,\"hash\",null,[[\"link\"],[[27,\"component\",[\"hyper-link\",\"http://example.com/#override-me\"],[[\"text\"],[\"Override Me\"]]]]]]],null,{\"statements\":[[0,\"                \"],[1,[27,\"component\",[[22,1,[\"link\"]]],[[\"route\",\"text\"],[\"http://example.com/#overridden\",\"Overridden\"]]],false],[0,\"\\n\"]],\"parameters\":[1]},null],[0,\"        \"]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                assert.dom('a').hasText('Overridden');
                                assert.dom('a[href="http://example.com/#overridden"]').exists();

                            case 4:
                            case 'end':
                                return _context7.stop();
                        }
                    }
                }, _callee7, this);
            }));

            return function (_x7) {
                return _ref8.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('it calls analytics on non-ember routes', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
            var analytics;
            return regeneratorRuntime.wrap(function _callee8$(_context8) {
                while (1) {
                    switch (_context8.prev = _context8.next) {
                        case 0:
                            analytics = _sinon.default.createStubInstance(_analytics.default);

                            this.owner.register('service:analytics', analytics, { instantiate: false });
                            // Prevent Redirects
                            analytics.click.callsFake(function () {
                                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                    args[_key] = arguments[_key];
                                }

                                var _iteratorNormalCompletion = true;
                                var _didIteratorError = false;
                                var _iteratorError = undefined;

                                try {
                                    for (var _iterator = args[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                        var arg = _step.value;

                                        if (arg.preventDefault) {
                                            arg.preventDefault();
                                        }
                                    }
                                } catch (err) {
                                    _didIteratorError = true;
                                    _iteratorError = err;
                                } finally {
                                    try {
                                        if (!_iteratorNormalCompletion && _iterator.return) {
                                            _iterator.return();
                                        }
                                    } finally {
                                        if (_didIteratorError) {
                                            throw _iteratorError;
                                        }
                                    }
                                }
                            });
                            _context8.next = 5;
                            return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                "id": "VRDAwcrW",
                                "block": "{\"symbols\":[],\"statements\":[[0,\"\\n            \"],[1,[27,\"hyper-link\",[\"/bar\"],[[\"analyticsLabel\"],[\"This is a test\"]]],false],[0,\"\\n        \"]],\"hasEval\":false}",
                                "meta": {}
                            }));

                        case 5:
                            _context8.next = 7;
                            return (0, _testHelpers.click)('a');

                        case 7:
                            _sinon.default.assert.calledOnce(analytics.click);
                            _sinon.default.assert.calledWith(analytics.click, 'link', 'This is a test');

                        case 9:
                        case 'end':
                            return _context8.stop();
                    }
                }
            }, _callee8, this);
        })));
        (0, _test.default)('it calls analytics on ember routes', _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
            var routing, analytics;
            return regeneratorRuntime.wrap(function _callee9$(_context9) {
                while (1) {
                    switch (_context9.prev = _context9.next) {
                        case 0:
                            routing = this.owner.lookup('service:-routing');
                            analytics = this.sandbox.createStubInstance(_analytics.default);

                            this.stub(routing, 'transitionTo');
                            this.owner.register('service:analytics', analytics, { instantiate: false });
                            // Prevent Redirects
                            analytics.click.callsFake(function () {
                                for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                                    args[_key2] = arguments[_key2];
                                }

                                var _iteratorNormalCompletion2 = true;
                                var _didIteratorError2 = false;
                                var _iteratorError2 = undefined;

                                try {
                                    for (var _iterator2 = args[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                                        var arg = _step2.value;

                                        if (arg.preventDefault) {
                                            arg.preventDefault();
                                        }
                                    }
                                } catch (err) {
                                    _didIteratorError2 = true;
                                    _iteratorError2 = err;
                                } finally {
                                    try {
                                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                            _iterator2.return();
                                        }
                                    } finally {
                                        if (_didIteratorError2) {
                                            throw _iteratorError2;
                                        }
                                    }
                                }
                            });
                            _context9.next = 7;
                            return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                "id": "H43CS2dR",
                                "block": "{\"symbols\":[],\"statements\":[[0,\"\\n            \"],[1,[27,\"hyper-link\",[\"foo\"],[[\"analyticsLabel\"],[\"This is a second test\"]]],false],[0,\"\\n        \"]],\"hasEval\":false}",
                                "meta": {}
                            }));

                        case 7:
                            _context9.next = 9;
                            return (0, _testHelpers.click)('a');

                        case 9:
                            this.sandbox.assert.calledOnce(analytics.click);
                            this.sandbox.assert.calledOnce(routing.transitionTo);
                            this.sandbox.assert.calledWith(analytics.click, 'link', 'This is a second test');

                        case 12:
                        case 'end':
                            return _context9.stop();
                    }
                }
            }, _callee9, this);
        })));
    });
});

define('ember-osf-web/tests/integration/components/inline-list/component-test', ['@ember/test-helpers', 'ember-qunit', 'qunit'], function (_testHelpers, _emberQunit, _qunit) {
    'use strict';

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    var i18nStub = Ember.Service.extend({
        translations: Ember.Object.create({
            list: {
                two_item: {
                    delimiter: ' and '
                },
                many_item: {
                    first_delimiter: ', ',
                    each_delimiter: ', ',
                    last_delimiter: ', and '
                }
            }
        }),
        t: function t(key) {
            // @ts-ignore
            return this.get('translations').get(key);
        }
    });
    (0, _qunit.module)('Integration | Component | inline-list', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        hooks.beforeEach(function () {
            this.owner.register('service:i18n', i18nStub);
        });
        (0, _qunit.test)('it renders without truncate', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                var testCases, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _ref3, _ref4, input, expected;

                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                testCases = [[[], ''], [['Doe'], 'Doe'], [['Doe', 'Smith'], 'Doe and Smith'], [['Doe', 'Smith', 'Johnson'], 'Doe, Smith, and Johnson'], [['Doe', 'Smith', 'Johnson', 'Green'], 'Doe, Smith, Johnson, and Green'], [['Doe', 'Smith', 'Johnson', 'Green', 'Thompson'], 'Doe, Smith, Johnson, Green, and Thompson']];
                                _iteratorNormalCompletion = true;
                                _didIteratorError = false;
                                _iteratorError = undefined;
                                _context.prev = 4;
                                _iterator = testCases[Symbol.iterator]();

                            case 6:
                                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                                    _context.next = 18;
                                    break;
                                }

                                _ref3 = _step.value;
                                _ref4 = _slicedToArray(_ref3, 2);
                                input = _ref4[0];
                                expected = _ref4[1];

                                this.set('list', input);
                                _context.next = 14;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "HAuyFuD6",
                                    "block": "{\"symbols\":[\"l\"],\"statements\":[[0,\"\\n\"],[4,\"inline-list\",null,[[\"items\"],[[23,[\"list\"]]]],{\"statements\":[[1,[22,1,[\"item\"]],false]],\"parameters\":[1]},null],[0,\"            \"]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 14:
                                assert.dom(this.element).hasText(expected);

                            case 15:
                                _iteratorNormalCompletion = true;
                                _context.next = 6;
                                break;

                            case 18:
                                _context.next = 24;
                                break;

                            case 20:
                                _context.prev = 20;
                                _context.t0 = _context['catch'](4);
                                _didIteratorError = true;
                                _iteratorError = _context.t0;

                            case 24:
                                _context.prev = 24;
                                _context.prev = 25;

                                if (!_iteratorNormalCompletion && _iterator.return) {
                                    _iterator.return();
                                }

                            case 27:
                                _context.prev = 27;

                                if (!_didIteratorError) {
                                    _context.next = 30;
                                    break;
                                }

                                throw _iteratorError;

                            case 30:
                                return _context.finish(27);

                            case 31:
                                return _context.finish(24);

                            case 32:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this, [[4, 20, 24, 32], [25,, 27, 31]]);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('it renders with truncate', function () {
            var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
                var testCases, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _ref6, _ref7, input, expected;

                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                testCases = [[[], ''], [['Doe'], 'Doe'], [['Doe', 'Smith'], 'Doe and Smith'], [['Doe', 'Smith', 'Johnson'], 'Doe, Smith, and Johnson'], [['Doe', 'Smith', 'Johnson', 'Green'], 'Doe, Smith, Johnson, and more']];
                                _iteratorNormalCompletion2 = true;
                                _didIteratorError2 = false;
                                _iteratorError2 = undefined;
                                _context2.prev = 4;
                                _iterator2 = testCases[Symbol.iterator]();

                            case 6:
                                if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                                    _context2.next = 18;
                                    break;
                                }

                                _ref6 = _step2.value;
                                _ref7 = _slicedToArray(_ref6, 2);
                                input = _ref7[0];
                                expected = _ref7[1];

                                this.set('list', input);
                                _context2.next = 14;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "j1DCPYul",
                                    "block": "{\"symbols\":[\"l\"],\"statements\":[[0,\"\\n\"],[4,\"inline-list\",null,[[\"items\",\"truncate\"],[[23,[\"list\"]],3]],{\"statements\":[[4,\"if\",[[22,1,[\"truncate\"]]],null,{\"statements\":[[7,\"span\"],[9],[0,\"more\"],[10],[0,\"\\n\"]],\"parameters\":[]},{\"statements\":[[1,[22,1,[\"item\"]],false]],\"parameters\":[]}]],\"parameters\":[1]},null],[0,\"            \"]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 14:
                                assert.dom(this.element).hasText(expected);

                            case 15:
                                _iteratorNormalCompletion2 = true;
                                _context2.next = 6;
                                break;

                            case 18:
                                _context2.next = 24;
                                break;

                            case 20:
                                _context2.prev = 20;
                                _context2.t0 = _context2['catch'](4);
                                _didIteratorError2 = true;
                                _iteratorError2 = _context2.t0;

                            case 24:
                                _context2.prev = 24;
                                _context2.prev = 25;

                                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                    _iterator2.return();
                                }

                            case 27:
                                _context2.prev = 27;

                                if (!_didIteratorError2) {
                                    _context2.next = 30;
                                    break;
                                }

                                throw _iteratorError2;

                            case 30:
                                return _context2.finish(27);

                            case 31:
                                return _context2.finish(24);

                            case 32:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this, [[4, 20, 24, 32], [25,, 27, 31]]);
            }));

            return function (_x2) {
                return _ref5.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/integration/components/institution-carousel/component-test', ['@ember/test-helpers', 'ember-qunit', 'qunit'], function (_testHelpers, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Integration | Component | institution-carousel', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        (0, _qunit.test)('it renders', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "nyeuMYk+",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[21,\"institution-carousel\"],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                assert.dom(this.element).hasText('');

                            case 3:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/integration/components/join-osf-banner/component-test', ['@ember/test-helpers', 'ember-qunit', 'qunit'], function (_testHelpers, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Integration | Component | join-osf-banner', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        (0, _qunit.test)('it renders', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "0FrnhxCW",
                                    "block": "{\"symbols\":[],\"statements\":[[0,\"\\n\"],[4,\"join-osf-banner\",null,null,{\"statements\":[],\"parameters\":[]},null],[0,\"    \"]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                assert.equal(true, true);

                            case 3:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, undefined);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/integration/components/link-to/component-test', ['@ember/test-helpers', 'ember-qunit', 'qunit'], function (_testHelpers, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    var routerStub = Ember.Service.extend({
        transitionTo: function transitionTo() {
            return null;
        },
        generateURL: function generateURL() {
            return 'url!';
        }
    });
    (0, _qunit.module)('Integration | Component | link-to', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        hooks.beforeEach(function () {
            // The default link-to uses a super-secret private router service, not the public one
            this.owner.register('service:-routing', routerStub);
        });
        (0, _qunit.test)('includes aria-label', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                var linkText, ariaLabel, _element, firstChild, textContent;

                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                linkText = 'This is a link!';
                                ariaLabel = 'This is an aria label!';
                                _context.next = 4;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "Rnr7Z7s9",
                                    "block": "{\"symbols\":[],\"statements\":[[4,\"link-to\",[\"foo\"],[[\"__HTML_ATTRIBUTES__\"],[[27,\"hash\",null,[[\"aria-label\"],[\"This is an aria label!\"]]]]],{\"statements\":[[0,\"                This is a link!\\n\"]],\"parameters\":[]},null],[0,\"        \"]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 4:
                                _element = this.element, firstChild = _element.firstChild, textContent = _element.textContent;

                                assert.equal(textContent.trim(), linkText);
                                assert.equal(firstChild.getAttribute('aria-label'), ariaLabel);

                            case 7:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('clickAction fires', function () {
            var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                assert.expect(1);
                                this.set('actions', {
                                    clickAction: function clickAction() {
                                        assert.ok(true);
                                    }
                                });
                                _context2.next = 4;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "Pfsa4hG9",
                                    "block": "{\"symbols\":[],\"statements\":[[4,\"link-to\",[\"foo\"],[[\"click\"],[[27,\"action\",[[22,0,[]],\"clickAction\"],null]]],{\"statements\":[[0,\"This is a link!\"]],\"parameters\":[]},null]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 4:
                                _context2.next = 6;
                                return (0, _testHelpers.click)(this.element.firstChild);

                            case 6:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            return function (_x2) {
                return _ref3.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/integration/components/loading-indicator/component-test', ['@ember/test-helpers', 'ember-qunit', 'qunit'], function (_testHelpers, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Integration | Component | loading-indicator', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        (0, _qunit.test)('light', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "NcXojtl0",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[21,\"loading-indicator\"],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                assert.dom(this.element).hasText('');
                                assert.dom(this.element.querySelector('div.ball-scale')).hasClass('ball-light');

                            case 4:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('dark', function () {
            var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                _context2.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "HIKNrquJ",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"loading-indicator\",null,[[\"dark\"],[true]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                assert.dom(this.element).hasText('');
                                assert.dom(this.element.querySelector('div.ball-scale')).hasClass('ball-dark');

                            case 4:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            return function (_x2) {
                return _ref3.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('inline light', function () {
            var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                _context3.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "KgOD5DUI",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"loading-indicator\",null,[[\"inline\"],[true]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                assert.dom(this.element).hasText('');
                                assert.dom(this.element.querySelector('div.ball-pulse')).hasClass('ball-light');

                            case 4:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            return function (_x3) {
                return _ref4.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('inline dark', function () {
            var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                _context4.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "1a+phnsM",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"loading-indicator\",null,[[\"dark\",\"inline\"],[true,true]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                assert.dom(this.element).hasText('');
                                assert.dom(this.element.querySelector('div.ball-pulse')).hasClass('ball-dark');

                            case 4:
                            case 'end':
                                return _context4.stop();
                        }
                    }
                }, _callee4, this);
            }));

            return function (_x4) {
                return _ref5.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/integration/components/maintenance-banner/component-test', ['@ember/test-helpers', 'ember-qunit', 'ember-sinon-qunit/test-support/test', 'qunit'], function (_testHelpers, _emberQunit, _test, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Integration | Component | maintenance-banner', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        (0, _test.default)('it renders no maintenance', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                this.stub(Ember.$, 'ajax').callsFake(function () {
                                    return {
                                        maintenance: null
                                    };
                                });
                                _context.next = 3;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "yQymsluA",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[21,\"maintenance-banner\"],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 3:
                                assert.dom('.alert').doesNotExist();

                            case 4:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
        (0, _test.default)('it renders maintenance message', function () {
            var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                this.stub(Ember.$, 'ajax').callsFake(function () {
                                    return {
                                        maintenance: {
                                            message: 'longstringy',
                                            level: 1
                                        }
                                    };
                                });
                                _context2.next = 3;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "yQymsluA",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[21,\"maintenance-banner\"],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 3:
                                assert.dom('.alert').includesText('longstringy');

                            case 4:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            return function (_x2) {
                return _ref3.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/integration/components/new-project-modal/component-test', ['@ember/test-helpers', 'ember-qunit', 'qunit'], function (_testHelpers, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    var currentUserStub = Ember.Service.extend({
        user: Object.freeze({
            institutions: Ember.A([])
        })
    });
    (0, _qunit.module)('Integration | Component | new-project-modal', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        hooks.beforeEach(function (assert) {
            this.owner.register('service:current-user', currentUserStub);
            this.setProperties({
                closeModal: function closeModal() {
                    return assert.ok(true);
                },
                create: function create() {
                    return assert.ok(true);
                },
                search: function search() {
                    return assert.ok(true);
                },
                newNode: null
            });
        });
        (0, _qunit.test)('it renders', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "IcEBWGHO",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"new-project-modal\",null,[[\"searchNodes\",\"createProject\",\"closeModal\"],[[23,[\"search\"]],[23,[\"create\"]],[23,[\"closeModal\"]]]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                assert.dom('.modal').exists();
                                assert.dom('.modal-title').hasText('Create new project');

                            case 4:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, undefined);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/integration/components/new-project-navigation-modal/component-test', ['@ember/test-helpers', 'ember-qunit', 'qunit'], function (_testHelpers, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Integration | Component | new-project-navigation-modal', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        hooks.beforeEach(function (assert) {
            this.setProperties({
                closeModal: function closeModal() {
                    var reload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
                    return assert.ok(reload, 'Reload should have been true');
                },
                theNode: {
                    links: {
                        html: '/linkValue/'
                    }
                }
            });
        });
        (0, _qunit.test)('it renders', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "7yLXVLgY",
                                    "block": "{\"symbols\":[],\"statements\":[[5,\"new-project-navigation-modal\",[],[[\"@node\",\"@closeModal\",\"@title\"],[[21,\"theNode\"],[27,\"action\",[[22,0,[]],[23,[\"closeModal\"]],true],null],\"New project created successfully!\"]]]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                assert.dom(this.element).hasText('New project created successfully! Keep working here Go to new project', 'Contents were correct');
                                assert.dom('[data-test-go-to-new][href="/linkValue/"]').exists('Navigation link was correct');
                                _context.next = 6;
                                return (0, _testHelpers.click)('[data-test-stay-here]');

                            case 6:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x2) {
                return _ref2.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/integration/components/node-card/component-test', ['@ember/test-helpers', 'ember-qunit', 'qunit'], function (_testHelpers, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Integration | Component | node-card', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        (0, _qunit.test)('it renders', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                this.set('contributors', []);
                                this.set('node', { queryHasMany: function queryHasMany() {
                                        return [];
                                    }, get: function get() {
                                        return 'it\'s a date';
                                    } });
                                this.set('delete', function () {
                                    return [];
                                });
                                _context.next = 5;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "W3V2+LBc",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"node-card\",null,[[\"contributors\",\"node\",\"delete\"],[[23,[\"contributors\"]],[23,[\"node\"]],[23,[\"delete\"]]]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 5:
                                assert.ok(this.element.textContent.trim());

                            case 6:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/integration/components/node-card/node-icon/component-test', ['@ember/test-helpers', 'ember-qunit', 'qunit'], function (_testHelpers, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Integration | Component | node-card/node-icon', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        (0, _qunit.test)('renders an icon', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "pCAqnIlE",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"node-card/node-icon\",null,[[\"category\"],[\"hypothesis\"]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                assert.ok(this.element.innerHTML.includes('lightbulb'));

                            case 3:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('render nothing when not a matching category', function () {
            var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                _context2.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "emciNuUS",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"node-card/node-icon\",null,[[\"category\"],[\"not-a-real-category\"]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                assert.ok(!this.element.innerHTML.includes('fa-icon'));

                            case 3:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            return function (_x2) {
                return _ref3.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('renders text-muted when needed', function () {
            var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                _context3.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "pCAqnIlE",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"node-card/node-icon\",null,[[\"category\"],[\"hypothesis\"]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                assert.ok(!this.element.innerHTML.includes('text-muted'));
                                _context3.next = 5;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "Cc8LKzYj",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"node-card/node-icon\",null,[[\"category\"],[\"registration\"]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 5:
                                assert.ok(this.element.innerHTML.includes('text-muted'));

                            case 6:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            return function (_x3) {
                return _ref4.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/integration/components/node-navbar/component-test', ['exports', '@ember/test-helpers', 'ember-qunit', 'faker', 'qunit'], function (exports, _testHelpers, _emberQunit, _faker, _qunit) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.FakeNode = undefined;

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    var _createClass = function () {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }

        return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();

    var NavCondition;
    (function (NavCondition) {
        NavCondition[NavCondition["HasParent"] = 0] = "HasParent";
        NavCondition["IsRegistration"] = "isRegistration";
        NavCondition["IsPublic"] = "public";
        NavCondition["UserCanRead"] = "userHasReadPermission";
        NavCondition["UserCanWrite"] = "userHasWritePermission";
        NavCondition["UserIsContributor"] = "currentUserIsContributor";
        NavCondition["WikiEnabled"] = "wikiEnabled";
    })(NavCondition || (NavCondition = {}));
    var NavLink;
    (function (NavLink) {
        NavLink[NavLink["ParentNode"] = 0] = "ParentNode";
        NavLink[NavLink["ThisNode"] = 1] = "ThisNode";
        NavLink["Files"] = "files";
        NavLink["Wiki"] = "wiki";
        NavLink["Analytics"] = "analytics";
        NavLink["Registrations"] = "registrations";
        NavLink["Contributors"] = "contributors";
        NavLink["Addons"] = "addons";
        NavLink["Settings"] = "settings";
    })(NavLink || (NavLink = {}));

    var FakeNode = exports.FakeNode = function () {
        function FakeNode() {
            var conditions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

            _classCallCheck(this, FakeNode);

            this.id = _faker.default.random.uuid();
            this.title = _faker.default.lorem.sentence();
            this.public = false;
            this.isRegistration = false;
            this.wikiEnabled = false;
            this.currentUserIsContributor = false;
            this.userHasWritePermission = false;
            this.userHasReadPermission = false;
            this.parentId = null;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = conditions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var condition = _step.value;

                    if (condition === NavCondition.HasParent) {
                        this.parentId = _faker.default.random.uuid();
                    } else {
                        this[condition] = true;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }

        _createClass(FakeNode, [{
            key: 'belongsTo',
            value: function belongsTo() {
                var _this = this;

                return { id: function id() {
                        return _this.parentId;
                    } };
            }
        }]);

        return FakeNode;
    }();

    (0, _qunit.module)('Integration | Component | node-navbar', function () {
        (0, _qunit.module)('basic rendering', function (hooks) {
            (0, _emberQunit.setupRenderingTest)(hooks);
            (0, _qunit.test)('it renders', function () {
                var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                    var routerStub;
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                                case 0:
                                    routerStub = Ember.Service.extend({
                                        isActive: function isActive() {
                                            return false;
                                        }
                                    });

                                    this.owner.register('service:router', routerStub);
                                    this.set('node', new FakeNode());
                                    _context.next = 5;
                                    return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                        "id": "VXs70lGJ",
                                        "block": "{\"symbols\":[],\"statements\":[[1,[27,\"node-navbar\",null,[[\"node\",\"renderInPlace\"],[[22,0,[\"node\"]],true]]],false]],\"hasEval\":false}",
                                        "meta": {}
                                    }));

                                case 5:
                                    assert.ok(this.element.textContent.trim());

                                case 6:
                                case 'end':
                                    return _context.stop();
                            }
                        }
                    }, _callee, this);
                }));

                return function (_x2) {
                    return _ref2.apply(this, arguments);
                };
            }());
            (0, _qunit.test)('it renders active tab when in proper route', function () {
                var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
                    var routerStub, assertActiveLink;
                    return regeneratorRuntime.wrap(function _callee2$(_context2) {
                        while (1) {
                            switch (_context2.prev = _context2.next) {
                                case 0:
                                    routerStub = Ember.Service.extend({
                                        isActive: function isActive(routeName) {
                                            return routeName.includes('guid-node.wiki');
                                        }
                                    });

                                    this.owner.register('service:router', routerStub);
                                    this.set('node', new FakeNode([NavCondition.WikiEnabled]));
                                    _context2.next = 5;
                                    return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                        "id": "VXs70lGJ",
                                        "block": "{\"symbols\":[],\"statements\":[[1,[27,\"node-navbar\",null,[[\"node\",\"renderInPlace\"],[[22,0,[\"node\"]],true]]],false]],\"hasEval\":false}",
                                        "meta": {}
                                    }));

                                case 5:
                                    assert.dom('[data-test-node-navbar-link]').exists();
                                    assertActiveLink = assert.dom('[data-test-node-navbar-links] .active');

                                    assertActiveLink.exists({ count: 1 });
                                    assertActiveLink.containsText('Wiki');

                                case 9:
                                case 'end':
                                    return _context2.stop();
                            }
                        }
                    }, _callee2, this);
                }));

                return function (_x3) {
                    return _ref3.apply(this, arguments);
                };
            }());
            (0, _qunit.test)('it renders no active tabs', function () {
                var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
                    var routerStub;
                    return regeneratorRuntime.wrap(function _callee3$(_context3) {
                        while (1) {
                            switch (_context3.prev = _context3.next) {
                                case 0:
                                    routerStub = Ember.Service.extend({
                                        isActive: function isActive(routeName) {
                                            return routeName.includes('guid-node.forks');
                                        }
                                    });

                                    this.owner.register('service:router', routerStub);
                                    this.set('node', new FakeNode());
                                    _context3.next = 5;
                                    return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                        "id": "VXs70lGJ",
                                        "block": "{\"symbols\":[],\"statements\":[[1,[27,\"node-navbar\",null,[[\"node\",\"renderInPlace\"],[[22,0,[\"node\"]],true]]],false]],\"hasEval\":false}",
                                        "meta": {}
                                    }));

                                case 5:
                                    assert.dom('[data-test-node-navbar-links] .active').doesNotExist();

                                case 6:
                                case 'end':
                                    return _context3.stop();
                            }
                        }
                    }, _callee3, this);
                }));

                return function (_x4) {
                    return _ref4.apply(this, arguments);
                };
            }());
        });
        (0, _qunit.module)('renders the correct links', function (hooks) {
            (0, _emberQunit.setupRenderingTest)(hooks);
            var testCases = [{
                conditions: [],
                links: [NavLink.ThisNode, NavLink.Files, NavLink.Registrations]
            }, {
                conditions: [NavCondition.IsRegistration],
                links: [NavLink.ThisNode, NavLink.Files]
            }, {
                conditions: [NavCondition.HasParent],
                links: [NavLink.ParentNode, NavLink.ThisNode, NavLink.Files, NavLink.Registrations]
            }, {
                conditions: [NavCondition.IsPublic],
                links: [NavLink.ThisNode, NavLink.Files, NavLink.Analytics, NavLink.Registrations]
            }, {
                conditions: [NavCondition.HasParent, NavCondition.IsPublic],
                links: [NavLink.ParentNode, NavLink.ThisNode, NavLink.Files, NavLink.Analytics, NavLink.Registrations]
            }, {
                conditions: [NavCondition.UserIsContributor, NavCondition.UserCanRead, NavCondition.UserCanWrite],
                links: [NavLink.ThisNode, NavLink.Files, NavLink.Analytics, NavLink.Registrations, NavLink.Contributors, NavLink.Addons, NavLink.Settings]
            }, {
                conditions: [NavCondition.UserIsContributor, NavCondition.UserCanRead],
                links: [NavLink.ThisNode, NavLink.Files, NavLink.Analytics, NavLink.Registrations, NavLink.Contributors, NavLink.Settings]
            }, {
                conditions: [NavCondition.HasParent, NavCondition.UserIsContributor, NavCondition.UserCanRead, NavCondition.UserCanWrite, NavCondition.WikiEnabled],
                links: [NavLink.ParentNode, NavLink.ThisNode, NavLink.Files, NavLink.Wiki, NavLink.Analytics, NavLink.Registrations, NavLink.Contributors, NavLink.Addons, NavLink.Settings]
            }, {
                conditions: [NavCondition.IsRegistration, NavCondition.UserIsContributor, NavCondition.UserCanRead, NavCondition.WikiEnabled],
                links: [NavLink.ThisNode, NavLink.Files, NavLink.Wiki, NavLink.Analytics, NavLink.Contributors]
            }, {
                conditions: [NavCondition.IsRegistration, NavCondition.UserIsContributor, NavCondition.UserCanRead, NavCondition.UserCanWrite, NavCondition.WikiEnabled],
                links: [NavLink.ThisNode, NavLink.Files, NavLink.Wiki, NavLink.Analytics, NavLink.Contributors, NavLink.Settings]
            }, {
                conditions: [NavCondition.HasParent, NavCondition.UserCanRead, NavCondition.WikiEnabled],
                links: [NavLink.ParentNode, NavLink.ThisNode, NavLink.Files, NavLink.Wiki, NavLink.Registrations, NavLink.Settings]
            }, {
                conditions: [NavCondition.HasParent, NavCondition.IsRegistration, NavCondition.IsPublic, NavCondition.WikiEnabled],
                links: [NavLink.ParentNode, NavLink.ThisNode, NavLink.Files, NavLink.Wiki, NavLink.Analytics]
            }];
            testCases.forEach(function (testCase, i) {
                (0, _qunit.test)('it renders the correct links (' + i + ')', function () {
                    var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
                        var routerStub, node, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, link, key;

                        return regeneratorRuntime.wrap(function _callee4$(_context4) {
                            while (1) {
                                switch (_context4.prev = _context4.next) {
                                    case 0:
                                        routerStub = Ember.Service.extend({
                                            isActive: function isActive() {
                                                return false;
                                            }
                                        });

                                        this.owner.register('service:router', routerStub);
                                        node = new FakeNode(testCase.conditions);

                                        this.set('node', node);
                                        _context4.next = 6;
                                        return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                            "id": "VXs70lGJ",
                                            "block": "{\"symbols\":[],\"statements\":[[1,[27,\"node-navbar\",null,[[\"node\",\"renderInPlace\"],[[22,0,[\"node\"]],true]]],false]],\"hasEval\":false}",
                                            "meta": {}
                                        }));

                                    case 6:
                                        assert.dom('[data-test-node-navbar-link]').exists({ count: testCase.links.length });
                                        _iteratorNormalCompletion2 = true;
                                        _didIteratorError2 = false;
                                        _iteratorError2 = undefined;
                                        _context4.prev = 10;
                                        for (_iterator2 = testCase.links[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                                            link = _step2.value;
                                            key = void 0;

                                            if (link === NavLink.ParentNode && node.parentId) {
                                                key = node.parentId;
                                            } else if (link === NavLink.ThisNode) {
                                                key = node.id;
                                            } else {
                                                key = link.toString();
                                            }
                                            assert.dom('[data-test-node-navbar-link="' + key + '"]').exists({ count: 1 });
                                        }
                                        _context4.next = 18;
                                        break;

                                    case 14:
                                        _context4.prev = 14;
                                        _context4.t0 = _context4['catch'](10);
                                        _didIteratorError2 = true;
                                        _iteratorError2 = _context4.t0;

                                    case 18:
                                        _context4.prev = 18;
                                        _context4.prev = 19;

                                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                            _iterator2.return();
                                        }

                                    case 21:
                                        _context4.prev = 21;

                                        if (!_didIteratorError2) {
                                            _context4.next = 24;
                                            break;
                                        }

                                        throw _iteratorError2;

                                    case 24:
                                        return _context4.finish(21);

                                    case 25:
                                        return _context4.finish(18);

                                    case 26:
                                    case 'end':
                                        return _context4.stop();
                                }
                            }
                        }, _callee4, this, [[10, 14, 18, 26], [19,, 21, 25]]);
                    }));

                    return function (_x5) {
                        return _ref5.apply(this, arguments);
                    };
                }());
            });
        });
    });
});

define('ember-osf-web/tests/integration/components/node-navbar/link/component-test', ['@ember/test-helpers', 'ember-qunit', 'qunit', 'ember-osf-web/tests/integration/components/node-navbar/component-test'], function (_testHelpers, _emberQunit, _qunit, _componentTest) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Integration | Component | node-navbar/link', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        (0, _qunit.test)('destination', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                var routerStub;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                routerStub = Ember.Service.extend({
                                    isActive: function isActive() {
                                        return false;
                                    }
                                });

                                this.owner.register('service:router', routerStub);
                                this.set('node', new _componentTest.FakeNode());
                                _context.next = 5;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "7j6duLLR",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"node-navbar/link\",null,[[\"node\",\"destination\"],[[22,0,[\"node\"]],\"registrations\"]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 5:
                                assert.dom(this.element).hasText('Registrations');

                            case 6:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('block', function () {
            var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
                var routerStub;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                routerStub = Ember.Service.extend({
                                    isActive: function isActive() {
                                        return false;
                                    }
                                });

                                this.owner.register('service:router', routerStub);
                                this.set('node', new _componentTest.FakeNode());
                                _context2.next = 5;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "LQonHczd",
                                    "block": "{\"symbols\":[],\"statements\":[[0,\"\\n\"],[4,\"node-navbar/link\",null,[[\"node\"],[[22,0,[\"node\"]]]],{\"statements\":[[0,\"                template block text\\n\"]],\"parameters\":[]},null],[0,\"        \"]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 5:
                                assert.dom(this.element).hasText('template block text');

                            case 6:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            return function (_x2) {
                return _ref3.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/integration/components/noteworthy-and-popular-project/component-test', ['@ember/test-helpers', 'ember-data-factory-guy', 'ember-qunit', 'qunit'], function (_testHelpers, _emberDataFactoryGuy, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Integration | Component | noteworthy-and-popular-project', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        hooks.beforeEach(function () {
            (0, _emberDataFactoryGuy.manualSetup)(this);
        });
        (0, _qunit.test)('it renders', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                this.set('project', _emberDataFactoryGuy.default.make('node'));
                                _context.next = 3;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "xpyeK6gT",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"noteworthy-and-popular-project\",null,[[\"project\"],[[23,[\"project\"]]]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 3:
                                assert.dom('[class*="NoteworthyProject"]').exists();

                            case 4:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/integration/components/osf-footer/component-test', ['@ember/test-helpers', 'ember-qunit', 'qunit'], function (_testHelpers, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Integration | Component | osf-footer', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        (0, _qunit.test)('it renders', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "Z3DV3Vu/",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[21,\"osf-footer\"],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                assert.ok(this.element.textContent.trim());

                            case 3:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/integration/components/osf-logo/component-test', ['@ember/test-helpers', 'ember-qunit', 'qunit'], function (_testHelpers, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Integration | Component | osf-logo', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        (0, _qunit.test)('it renders', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "IEPmnsAf",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[21,\"osf-logo\"],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                assert.dom(this.element).hasText('');

                            case 3:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/integration/components/osf-navbar/auth-dropdown/component-test', ['@ember/test-helpers', 'ember-qunit', 'qunit'], function (_testHelpers, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    var sessionStub = Ember.Service.extend({
        isAuthenticated: false,
        on: function on() {}
    });
    var routingStub = Ember.Service.extend({
        transitionTo: function transitionTo() {
            return null;
        },
        generateURL: function generateURL() {
            return 'url!';
        }
    });
    var routerStub = Ember.Service.extend({
        currentURL: ''
    });
    (0, _qunit.module)('Integration | Component | osf-navbar/auth-dropdown', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        hooks.beforeEach(function () {
            var _this = this;

            this.owner.register('service:session', sessionStub);
            // Prevent trying to actually transition
            this.owner.register('service:-routing', routingStub);
            // Make sure currentURL is always a string
            this.owner.register('service:router', routerStub);
            this.setProperties({
                onLinkClickedCalled: false,
                actions: {
                    onLinkClicked: function onLinkClicked() {
                        _this.set('onLinkClickedCalled', true);
                    }
                }
            });
        });
        (0, _qunit.test)('login called', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                this.owner.register('service:currentUser', Ember.Service.extend({
                                    loginCalled: false,
                                    login: function login() {
                                        this.set('loginCalled', true);
                                    }
                                }));
                                _context.next = 3;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "sYmd5bv6",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[21,\"osf-navbar/auth-dropdown\"],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 3:
                                assert.ok(!this.owner.lookup('service:currentUser').loginCalled, 'login has not been called');
                                _context.next = 6;
                                return (0, _testHelpers.click)('[data-test-sign-in-button]');

                            case 6:
                                assert.ok(this.owner.lookup('service:currentUser').loginCalled, 'login was called');

                            case 7:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('onLinkClicked called', function () {
            var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                this.owner.lookup('service:session').set('isAuthenticated', true);
                                this.owner.register('service:analytics', Ember.Service.extend({
                                    clickCalled: false,
                                    click: function click() {
                                        this.set('clickCalled', true);
                                    }
                                }));
                                _context2.next = 4;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "sYmd5bv6",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[21,\"osf-navbar/auth-dropdown\"],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 4:
                                assert.ok(!this.owner.lookup('service:analytics').clickCalled);
                                _context2.next = 7;
                                return (0, _testHelpers.click)('.fa-life-ring');

                            case 7:
                                assert.ok(this.owner.lookup('service:analytics').clickCalled);

                            case 8:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            return function (_x2) {
                return _ref3.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/integration/components/osf-navbar/component-test', ['@ember/test-helpers', 'ember-qunit', 'qunit'], function (_testHelpers, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    var routerStub = Ember.Service.extend({
        currentURL: ''
    });
    (0, _qunit.module)('Integration | Component | osf-navbar', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        hooks.beforeEach(function () {
            // Make sure currentURL is always a string
            this.owner.register('service:router', routerStub);
        });
        (0, _qunit.test)('it renders', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                this.set('loginAction', function () {});
                                _context.next = 3;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "tZiKWx8X",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"osf-navbar\",null,[[\"loginAction\"],[[23,[\"loginAction\"]]]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 3:
                                assert.dom('.service-name').includesText('OSF');
                                assert.dom('.current-service').hasText('HOME');

                            case 5:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/integration/components/paginated-list/all/component-test', ['@ember/test-helpers', 'ember-qunit', 'qunit', 'ember-osf-web/initializers/ember-cli-mirage'], function (_testHelpers, _emberQunit, _qunit, _emberCliMirage) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Integration | Component | paginated-list/all', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        hooks.beforeEach(function () {
            this.server = (0, _emberCliMirage.startMirage)();
        });
        hooks.afterEach(function () {
            this.server.shutdown();
        });
        (0, _qunit.test)('it renders', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                this.server.createList('node', 10);
                                _context.next = 3;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "N2YKfjiq",
                                    "block": "{\"symbols\":[\"list\",\"node\"],\"statements\":[[0,\"\\n\"],[4,\"paginated-list/all\",null,[[\"modelName\"],[\"node\"]],{\"statements\":[[4,\"component\",[[22,1,[\"item\"]]],null,{\"statements\":[[0,\"                    \"],[7,\"span\"],[11,\"data-test-foo-item\",\"\"],[9],[1,[22,2,[\"id\"]],false],[10],[0,\"\\n\"]],\"parameters\":[2]},null]],\"parameters\":[1]},null],[0,\"        \"]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 3:
                                assert.dom('[data-test-foo-item]', this.element).exists({ count: 10 });

                            case 4:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/integration/components/paginated-list/x-item/component-test', ['@ember/test-helpers', 'ember-qunit', 'qunit'], function (_testHelpers, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Integration | Component | paginated-list/x-item', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        (0, _qunit.test)('it renders', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "qTz0OvUu",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[21,\"paginated-list/x-item\"],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                assert.dom(this.element).hasText('');
                                // Template block usage:
                                _context.next = 5;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "PzFkY/MJ",
                                    "block": "{\"symbols\":[],\"statements\":[[0,\"\\n\"],[4,\"paginated-list/x-item\",null,null,{\"statements\":[[0,\"                template block text\\n\"]],\"parameters\":[]},null],[0,\"        \"]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 5:
                                assert.dom(this.element).hasText('template block text');

                            case 6:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/integration/components/paginated-list/x-render/component-test', ['@ember/test-helpers', 'ember-qunit', 'qunit'], function (_testHelpers, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Integration | Component | paginated-list/x-render', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        (0, _qunit.test)('it renders', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "JKE1zzZ/",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[21,\"paginated-list/x-render\"],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                assert.dom(this.element).hasText('');
                                // Template block usage:
                                _context.next = 5;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "5PObd4oK",
                                    "block": "{\"symbols\":[],\"statements\":[[0,\"\\n\"],[4,\"paginated-list/x-render\",null,null,{\"statements\":[[0,\"                template block text\\n\"]],\"parameters\":[]},null],[0,\"        \"]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 5:
                                assert.dom(this.element).hasText('template block text');

                            case 6:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/integration/components/panel/component-test', ['@ember/test-helpers', 'ember-qunit', 'qunit'], function (_testHelpers, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    var attrTitle = 'This is a title from an attribute';
    var attrBody = 'This is some body text from an attribute';
    var attrFooter = 'This is some footer text from an attribute';
    var blockTitle = 'This is a title from a block';
    var blockBody = 'This is some body text from a block';
    var blockFooter = 'This is some footer text from a block';
    (0, _qunit.module)('Integration | Component | panel', function () {
        (0, _qunit.module)('invoked using attributes', function (hooks) {
            (0, _emberQunit.setupRenderingTest)(hooks);
            hooks.beforeEach(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                this.setProperties({ attrTitle: attrTitle, attrBody: attrBody, attrFooter: attrFooter });
                                _context.next = 3;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "oeU24IFM",
                                    "block": "{\"symbols\":[\"panel\"],\"statements\":[[0,\"\\n                \"],[5,\"panel\",[],[[],[]],{\"statements\":[[0,\"\\n                    \"],[6,[22,1,[\"heading\"]],[],[[\"@title\"],[[22,0,[\"attrTitle\"]]]]],[0,\"\\n                    \"],[6,[22,1,[\"body\"]],[],[[\"@text\"],[[22,0,[\"attrBody\"]]]]],[0,\"\\n                    \"],[6,[22,1,[\"footer\"]],[],[[\"@text\"],[[22,0,[\"attrFooter\"]]]]],[0,\"\\n                \"]],\"parameters\":[1]}],[0,\"\\n            \"]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 3:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            })));
            (0, _qunit.test)('panel', function (assert) {
                assert.dom('[data-test-panel]').exists('Panel renders');
            });
            (0, _qunit.test)('heading', function (assert) {
                assert.dom('[data-test-panel-heading]').exists('Panel heading section renders');
                assert.dom('[data-test-panel-heading] [data-test-panel-title]').exists('Panel title section renders inside panel heading section');
                assert.dom('[data-test-panel-title]').hasText(attrTitle, 'Panel title section contains title text');
            });
            (0, _qunit.test)('body', function (assert) {
                assert.dom('[data-test-panel-body]').exists('Panel body section renders');
                assert.dom('[data-test-panel-body]').hasText(attrBody, 'Panel body section contains body text');
            });
            (0, _qunit.test)('footer', function (assert) {
                assert.dom('[data-test-panel-footer]').exists('Panel footer section renders');
                assert.dom('[data-test-panel-footer]').hasText(attrFooter, 'Panel footer section contains footer text');
            });
        });
        (0, _qunit.module)('invoked using blocks', function (hooks) {
            (0, _emberQunit.setupRenderingTest)(hooks);
            hooks.beforeEach(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                this.setProperties({ blockTitle: blockTitle, blockBody: blockBody, blockFooter: blockFooter });
                                _context2.next = 3;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "cEbQClB8",
                                    "block": "{\"symbols\":[\"panel\"],\"statements\":[[0,\"\\n                \"],[5,\"panel\",[],[[],[]],{\"statements\":[[0,\"\\n                    \"],[6,[22,1,[\"heading\"]],[],[[],[]],{\"statements\":[[0,\"\\n                        \"],[1,[22,0,[\"blockTitle\"]],false],[0,\"\\n                    \"]],\"parameters\":[]}],[0,\"\\n                    \"],[6,[22,1,[\"body\"]],[],[[],[]],{\"statements\":[[0,\"\\n                        \"],[1,[22,0,[\"blockBody\"]],false],[0,\"\\n                    \"]],\"parameters\":[]}],[0,\"\\n                    \"],[6,[22,1,[\"footer\"]],[],[[],[]],{\"statements\":[[0,\"\\n                        \"],[1,[22,0,[\"blockFooter\"]],false],[0,\"\\n                    \"]],\"parameters\":[]}],[0,\"\\n                \"]],\"parameters\":[1]}],[0,\"\\n            \"]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 3:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            })));
            (0, _qunit.test)('panel', function (assert) {
                assert.dom('[data-test-panel]').exists('Panel renders');
            });
            (0, _qunit.test)('heading', function (assert) {
                assert.dom('[data-test-panel-heading]').exists('Panel heading section renders');
                assert.dom('[data-test-panel-title]').doesNotExist('Panel title section does not render');
                assert.dom('[data-test-panel-heading]').hasText(blockTitle, 'Panel heading section contains title text');
            });
            (0, _qunit.test)('body', function (assert) {
                assert.dom('[data-test-panel-body]').exists('Panel body section renders');
                assert.dom('[data-test-panel-body]').hasText(blockBody, 'Panel body section contains body text');
            });
            (0, _qunit.test)('footer', function (assert) {
                assert.dom('[data-test-panel-footer]').exists('Panel footer section renders');
                assert.dom('[data-test-panel-footer]').hasText(blockFooter, 'Panel footer section contains footer text');
            });
        });
        (0, _qunit.module)('invoked using both attributes and blocks', function (hooks) {
            (0, _emberQunit.setupRenderingTest)(hooks);
            hooks.beforeEach(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                this.setProperties({ attrTitle: attrTitle, attrBody: attrBody, attrFooter: attrFooter, blockTitle: blockTitle, blockBody: blockBody, blockFooter: blockFooter });
                                _context3.next = 3;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "q910cFMO",
                                    "block": "{\"symbols\":[\"panel\"],\"statements\":[[0,\"\\n                \"],[5,\"panel\",[],[[],[]],{\"statements\":[[0,\"\\n                    \"],[6,[22,1,[\"heading\"]],[],[[\"@title\"],[[22,0,[\"attrTitle\"]]]],{\"statements\":[[0,\"\\n                        \"],[1,[22,0,[\"blockTitle\"]],false],[0,\"\\n                    \"]],\"parameters\":[]}],[0,\"\\n                    \"],[6,[22,1,[\"body\"]],[],[[\"@text\"],[[22,0,[\"attrBody\"]]]],{\"statements\":[[0,\"\\n                        \"],[1,[22,0,[\"blockBody\"]],false],[0,\"\\n                    \"]],\"parameters\":[]}],[0,\"\\n                    \"],[6,[22,1,[\"footer\"]],[],[[\"@text\"],[[22,0,[\"attrFooter\"]]]],{\"statements\":[[0,\"\\n                        \"],[1,[22,0,[\"blockFooter\"]],false],[0,\"\\n                    \"]],\"parameters\":[]}],[0,\"\\n                \"]],\"parameters\":[1]}],[0,\"\\n            \"]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 3:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            })));
            (0, _qunit.test)('panel', function (assert) {
                assert.dom('[data-test-panel]').exists('Panel renders');
            });
            (0, _qunit.test)('heading', function (assert) {
                assert.dom('[data-test-panel-heading]').exists('Panel heading section renders');
                assert.dom('[data-test-panel-heading] [data-test-panel-title]').exists('Panel title section renders inside panel heading section');
                assert.dom('[data-test-panel-heading]').hasText(attrTitle + ' ' + blockTitle, 'Panel heading section contains title text');
            });
            (0, _qunit.test)('body', function (assert) {
                assert.dom('[data-test-panel-body]').exists('Panel body section renders');
                assert.dom('[data-test-panel-body]').hasText(attrBody + ' ' + blockBody, 'Panel body section contains body text');
            });
            (0, _qunit.test)('footer', function (assert) {
                assert.dom('[data-test-panel-footer]').exists('Panel footer section renders');
                assert.dom('[data-test-panel-footer]').hasText(attrFooter + ' ' + blockFooter, 'Panel footer section contains footer text');
            });
        });
    });
});

define('ember-osf-web/tests/integration/components/quickfile-nav/component-test', ['@ember/test-helpers', 'ember-data-factory-guy', 'ember-qunit', 'qunit'], function (_testHelpers, _emberDataFactoryGuy, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Integration | Component | quickfile-nav', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        (0, _emberDataFactoryGuy.setupFactoryGuy)(hooks);
        (0, _qunit.test)('it renders', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                this.set('user', (0, _emberDataFactoryGuy.make)('user'));
                                _context.next = 3;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "cilFU7XS",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"quickfile-nav\",null,[[\"user\"],[[23,[\"user\"]]]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 3:
                                assert.ok(this.element.textContent.trim());

                            case 4:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/integration/components/sign-up-form/component-test', ['@ember/test-helpers', 'ember-qunit', 'qunit'], function (_testHelpers, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Integration | Component | sign-up-form', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        (0, _qunit.test)('it renders', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                this.set('submit', function () {
                                    assert.ok(true);
                                });
                                _context.next = 3;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "3CQ9l05j",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"sign-up-form\",null,[[\"submit\"],[[23,[\"submit\"]]]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 3:
                                assert.dom(this.element).includesText('I have read and agree to the Terms of Use and Privacy Policy.');

                            case 4:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/integration/components/sign-up-policy/component-test', ['@ember/test-helpers', 'ember-qunit', 'qunit'], function (_testHelpers, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Integration | Component | sign-up-policy', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        (0, _qunit.test)('it renders', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "51+f/4cA",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[21,\"sign-up-policy\"],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                assert.dom(this.element).hasText('I have read and agree to the Terms of Use and Privacy Policy.');

                            case 3:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/integration/components/simple-paginator/component-test', ['@ember/test-helpers', 'ember-qunit', 'qunit'], function (_testHelpers, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Integration | Component | simple-paginator', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        hooks.beforeEach(function () {
            this.set('stubAction', function () {
                return [];
            });
        });
        (0, _qunit.test)('it renders', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "WeuCp58e",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"simple-paginator\",null,[[\"nextPage\",\"previousPage\",\"maxPage\",\"curPage\"],[[23,[\"stubAction\"]],[23,[\"stubAction\"]],3,2]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                assert.dom(this.element).hasText('< Page 2 of 3 >');

                            case 3:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('if no more than 1 page, don\'t show paginator at all', function () {
            var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                _context2.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "OFw0LqYL",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"simple-paginator\",null,[[\"nextPage\",\"previousPage\",\"maxPage\",\"curPage\"],[[23,[\"stubAction\"]],[23,[\"stubAction\"]],1,1]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                assert.dom(this.element).hasText('');

                            case 3:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            return function (_x2) {
                return _ref3.apply(this, arguments);
            };
        }());
        (0, _qunit.module)('pagination button disabling', function () {
            (0, _qunit.test)('first page', function () {
                var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
                    return regeneratorRuntime.wrap(function _callee3$(_context3) {
                        while (1) {
                            switch (_context3.prev = _context3.next) {
                                case 0:
                                    _context3.next = 2;
                                    return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                        "id": "fjk9jcR7",
                                        "block": "{\"symbols\":[],\"statements\":[[1,[27,\"simple-paginator\",null,[[\"nextPage\",\"previousPage\",\"maxPage\",\"curPage\"],[[23,[\"stubAction\"]],[23,[\"stubAction\"]],3,1]]],false]],\"hasEval\":false}",
                                        "meta": {}
                                    }));

                                case 2:
                                    assert.dom('[class*="SimplePaginator__element"]:first-child button').isDisabled('Previous page button disabled.');
                                    assert.dom('[class*="SimplePaginator__element"]:last-child button').isNotDisabled('Next page button not disabled.');

                                case 4:
                                case 'end':
                                    return _context3.stop();
                            }
                        }
                    }, _callee3, undefined);
                }));

                return function (_x3) {
                    return _ref4.apply(this, arguments);
                };
            }());
            (0, _qunit.test)('middle page', function () {
                var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
                    return regeneratorRuntime.wrap(function _callee4$(_context4) {
                        while (1) {
                            switch (_context4.prev = _context4.next) {
                                case 0:
                                    _context4.next = 2;
                                    return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                        "id": "WeuCp58e",
                                        "block": "{\"symbols\":[],\"statements\":[[1,[27,\"simple-paginator\",null,[[\"nextPage\",\"previousPage\",\"maxPage\",\"curPage\"],[[23,[\"stubAction\"]],[23,[\"stubAction\"]],3,2]]],false]],\"hasEval\":false}",
                                        "meta": {}
                                    }));

                                case 2:
                                    assert.dom('[class*="SimplePaginator__element"]:first-child button').isNotDisabled('Previous page button not disabled.');
                                    assert.dom('[class*="SimplePaginator__element"]:last-child button').isNotDisabled('Next page button not disabled.');

                                case 4:
                                case 'end':
                                    return _context4.stop();
                            }
                        }
                    }, _callee4, undefined);
                }));

                return function (_x4) {
                    return _ref5.apply(this, arguments);
                };
            }());
            (0, _qunit.test)('last page', function () {
                var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
                    return regeneratorRuntime.wrap(function _callee5$(_context5) {
                        while (1) {
                            switch (_context5.prev = _context5.next) {
                                case 0:
                                    _context5.next = 2;
                                    return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                        "id": "RUSX+DUb",
                                        "block": "{\"symbols\":[],\"statements\":[[1,[27,\"simple-paginator\",null,[[\"nextPage\",\"previousPage\",\"maxPage\",\"curPage\"],[[23,[\"stubAction\"]],[23,[\"stubAction\"]],3,3]]],false]],\"hasEval\":false}",
                                        "meta": {}
                                    }));

                                case 2:
                                    assert.dom('[class*="SimplePaginator__element"]:first-child button').isNotDisabled('Previous page button not disabled.');
                                    assert.dom('[class*="SimplePaginator__element"]:last-child button').isDisabled('Next page button disabled.');

                                case 4:
                                case 'end':
                                    return _context5.stop();
                            }
                        }
                    }, _callee5, undefined);
                }));

                return function (_x5) {
                    return _ref6.apply(this, arguments);
                };
            }());
        });
    });
});

define('ember-osf-web/tests/integration/components/sort-button/component-test', ['@ember/test-helpers', 'ember-qunit', 'qunit'], function (_testHelpers, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Integration | Component | sort-button', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        hooks.beforeEach(function (assert) {
            this.set('sortAction', function () {
                return assert.ok(true);
            });
        });
        (0, _qunit.test)('selected works with sortBy', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "n4e1VJ1T",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"sort-button\",null,[[\"sortAction\",\"sortBy\",\"sort\"],[[23,[\"sortAction\"]],\"kindness\",\"-kindndess\"]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                assert.equal((0, _testHelpers.findAll)('button').length, 2, 'Two buttons found.');
                                assert.dom('button[title="Sort ascending"][class*="not-selected"]').exists('Sort ascending button is not selected.');
                                assert.dom('button[title="Sort descending"][class*="not-selected"]').exists('Sort descending button is not selected.');

                            case 5:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, undefined);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/integration/components/status-banner/component-test', ['@ember/test-helpers', 'ember-qunit', 'qunit'], function (_testHelpers, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Integration | Component | status-banner', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        (0, _qunit.test)('it renders', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "wdcDzT+g",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[21,\"status-banner\"],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                assert.dom(this.element).hasText('');

                            case 3:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/integration/components/tags-widget/component-test', ['@ember/test-helpers', 'ember-qunit', 'qunit'], function (_testHelpers, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Integration | Component | tags-widget', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        (0, _qunit.test)('it renders passed-in tags', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                var tags;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                tags = ['foo', 'bar', 'baz'];

                                this.set('tags', tags);
                                this.set('addTag', function (_) {
                                    return undefined;
                                });
                                this.set('removeTag', function (_) {
                                    return undefined;
                                });
                                this.set('showAdd', false);
                                _context.next = 7;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "XxLepnNG",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"tags-widget\",null,[[\"tags\",\"analyticsScope\",\"addTag\",\"removeTag\",\"showAdd\"],[[22,0,[\"tags\"]],\"test\",[27,\"action\",[[22,0,[]],[22,0,[\"addTag\"]]],null],[27,\"action\",[[22,0,[]],[22,0,[\"removeTag\"]]],null],[22,0,[\"showAdd\"]]]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 7:
                                assert.dom('[data-test-tags-widget-tag-input]').exists();
                                tags.forEach(function (tag) {
                                    return assert.dom('[data-test-tags-widget-tag="' + tag + '"]').exists();
                                });
                                assert.dom('[data-test-tags-widget-tag-input] input').isNotVisible();
                                this.set('showAdd', true);
                                assert.dom('[data-test-tags-widget-tag-input] input').isVisible();

                            case 12:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('it renders passed-in tags (read only)', function () {
            var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
                var tags;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                tags = ['foo', 'bar', 'baz'];

                                this.set('tags', tags);
                                _context2.next = 4;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "RWOX811s",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"tags-widget\",null,[[\"tags\",\"analyticsScope\",\"readOnly\"],[[22,0,[\"tags\"]],\"test\",true]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 4:
                                assert.dom('[data-test-tags-widget-tag-input]').exists();
                                tags.forEach(function (tag) {
                                    return assert.dom('[data-test-tags-widget-tag="' + tag + '"]').exists();
                                });
                                assert.dom('[data-test-tags-widget-tag-input] input').isNotVisible();

                            case 7:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            return function (_x2) {
                return _ref3.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('it renders passed-in tags (read only, inline)', function () {
            var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
                var tags;
                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                tags = ['foo', 'bar', 'baz'];

                                this.set('tags', tags);
                                _context3.next = 4;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "b5NNWKeD",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"tags-widget\",null,[[\"tags\",\"analyticsScope\",\"readOnly\",\"inline\"],[[22,0,[\"tags\"]],\"test\",true,true]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 4:
                                assert.dom('[data-test-tags-widget-tag-input]').exists();
                                tags.forEach(function (tag) {
                                    return assert.dom('[data-test-tags-widget-tag="' + tag + '"]').exists();
                                });
                                assert.dom('[data-test-tags-widget-tag-input] input').isNotVisible();
                                assert.equal((0, _testHelpers.find)('[data-test-tags-widget-tag-input]').parentElement.className.split(' ').filter(function (cssClass) {
                                    return (/^_inline_/.test(cssClass)
                                    );
                                }).length, 1, 'Contains inline class');

                            case 8:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            return function (_x3) {
                return _ref4.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('it can add tags', function () {
            var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
                var newTag;
                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                // TODO: enable this if we can figure out a way to make keyboard events always fire
                                // assert.expect(2);
                                newTag = 'new tag';

                                this.set('tags', []);
                                this.set('addTag', function (tag) {
                                    assert.equal(tag, newTag, 'addTag action was triggered for new tag');
                                });
                                this.set('removeTag', function (_) {
                                    return undefined;
                                });
                                _context4.next = 6;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "REd2NQDA",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"tags-widget\",null,[[\"tags\",\"analyticsScope\",\"addTag\",\"removeTag\",\"showAdd\"],[[22,0,[\"tags\"]],\"test\",[27,\"action\",[[22,0,[]],[22,0,[\"addTag\"]]],null],[27,\"action\",[[22,0,[]],[22,0,[\"removeTag\"]]],null],true]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 6:
                                assert.dom('[data-test-tags-widget-tag-input]').exists();
                                _context4.next = 9;
                                return (0, _testHelpers.fillIn)('[data-test-tags-widget-tag-input] input', newTag);

                            case 9:
                                _context4.next = 11;
                                return (0, _testHelpers.triggerKeyEvent)('[data-test-tags-widget-tag-input] input', 'keypress', 'Enter');

                            case 11:
                            case 'end':
                                return _context4.stop();
                        }
                    }
                }, _callee4, this);
            }));

            return function (_x4) {
                return _ref5.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('it can remove tags', function () {
            var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
                var removeTag;
                return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                        switch (_context5.prev = _context5.next) {
                            case 0:
                                assert.expect(2);
                                removeTag = 'remove me';

                                this.set('tags', [removeTag]);
                                this.set('addTag', function (_) {
                                    return undefined;
                                });
                                this.set('removeTag', function (index) {
                                    assert.equal(index, 0, 'removeTag called for first tag');
                                });
                                _context5.next = 7;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "REd2NQDA",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"tags-widget\",null,[[\"tags\",\"analyticsScope\",\"addTag\",\"removeTag\",\"showAdd\"],[[22,0,[\"tags\"]],\"test\",[27,\"action\",[[22,0,[]],[22,0,[\"addTag\"]]],null],[27,\"action\",[[22,0,[]],[22,0,[\"removeTag\"]]],null],true]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 7:
                                assert.dom('[data-test-tags-widget-tag-input]').exists();
                                _context5.next = 10;
                                return (0, _testHelpers.click)('[data-test-tags-widget-tag="' + removeTag + '"] + a');

                            case 10:
                            case 'end':
                                return _context5.stop();
                        }
                    }
                }, _callee5, this);
            }));

            return function (_x5) {
                return _ref6.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/integration/components/tos-consent-banner/component-test', ['@ember/test-helpers', 'ember-data-factory-guy', 'ember-qunit', 'qunit'], function (_testHelpers, _emberDataFactoryGuy, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Integration | Component | tos-consent-banner', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        (0, _emberDataFactoryGuy.setupFactoryGuy)(hooks);
        (0, _qunit.test)('hidden when no user is logged in', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "RKvT4Gkb",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[21,\"tos-consent-banner\"],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                assert.dom(this.element).hasText('');

                            case 3:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('shown when current user has not accepted ToS', function () {
            var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
                var _this = this;

                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                _context3.next = 2;
                                return Ember.run(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                                    var session, user;
                                    return regeneratorRuntime.wrap(function _callee2$(_context2) {
                                        while (1) {
                                            switch (_context2.prev = _context2.next) {
                                                case 0:
                                                    session = _this.owner.lookup('service:session');

                                                    session.set('isAuthenticated', true);
                                                    session.set('data', { authenticated: { id: '1' } });
                                                    user = (0, _emberDataFactoryGuy.make)('user', { id: '1', acceptedTermsOfService: null });

                                                    (0, _emberDataFactoryGuy.mockFindRecord)('user').returns({ model: user });
                                                    _context2.next = 7;
                                                    return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                                        "id": "RKvT4Gkb",
                                                        "block": "{\"symbols\":[],\"statements\":[[1,[21,\"tos-consent-banner\"],false]],\"hasEval\":false}",
                                                        "meta": {}
                                                    }));

                                                case 7:
                                                    assert.dom(_this.element).includesText('We\'ve updated our Terms of Use and Privacy Policy. Please read them carefully.', 'Displays expected text.');
                                                    assert.dom(_this.element).doesNotIncludeText('You must read and agree to the Terms of Use and Privacy Policy.', 'Does not display validation error message.');
                                                    _context2.next = 11;
                                                    return (0, _testHelpers.click)('[class*="TosConsentBanner"] button[type="submit"]');

                                                case 11:
                                                    assert.dom(_this.element).includesText('You must read and agree to the Terms of Use and Privacy Policy.', 'Displays validation error message after clicking continue.');

                                                case 12:
                                                case 'end':
                                                    return _context2.stop();
                                            }
                                        }
                                    }, _callee2, _this);
                                })));

                            case 2:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            return function (_x2) {
                return _ref3.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('hidden when current user has accepted ToS', function () {
            var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
                var _this2 = this;

                return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                        switch (_context5.prev = _context5.next) {
                            case 0:
                                _context5.next = 2;
                                return Ember.run(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
                                    var session, user;
                                    return regeneratorRuntime.wrap(function _callee4$(_context4) {
                                        while (1) {
                                            switch (_context4.prev = _context4.next) {
                                                case 0:
                                                    session = _this2.owner.lookup('service:session');

                                                    session.set('isAuthenticated', true);
                                                    session.set('data', { authenticated: { id: '1' } });
                                                    user = (0, _emberDataFactoryGuy.make)('user', { id: '1', acceptedTermsOfService: true });

                                                    (0, _emberDataFactoryGuy.mockFindRecord)('user').returns({ model: user });
                                                    _context4.next = 7;
                                                    return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                                        "id": "RKvT4Gkb",
                                                        "block": "{\"symbols\":[],\"statements\":[[1,[21,\"tos-consent-banner\"],false]],\"hasEval\":false}",
                                                        "meta": {}
                                                    }));

                                                case 7:
                                                    assert.dom(_this2.element).hasText('');

                                                case 8:
                                                case 'end':
                                                    return _context4.stop();
                                            }
                                        }
                                    }, _callee4, _this2);
                                })));

                            case 2:
                            case 'end':
                                return _context5.stop();
                        }
                    }
                }, _callee5, this);
            }));

            return function (_x3) {
                return _ref5.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/integration/components/validated-input/component-test', ['@ember/test-helpers', 'ember-cp-validations', 'ember-qunit', 'qunit'], function (_testHelpers, _emberCpValidations, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    var Validations = (0, _emberCpValidations.buildValidations)({
        name: [(0, _emberCpValidations.validator)('presence', {
            presence: true
        }), (0, _emberCpValidations.validator)('length', {
            min: 3,
            isWarning: true
        })]
    });
    var TestModel = Ember.Object.extend(Validations);
    function createModel(testContext, attrs) {
        return TestModel.create(testContext.owner.ownerInjection(), attrs);
    }
    (0, _qunit.module)('Integration | Component | validated-input', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        (0, _qunit.test)('it renders', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                this.set('model', createModel(this, {}));
                                _context.next = 3;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "kwx3giai",
                                    "block": "{\"symbols\":[],\"statements\":[[0,\" \"],[1,[27,\"validated-input/text\",null,[[\"model\",\"valuePath\",\"shouldShowMessages\"],[[22,0,[\"model\"]],\"name\",false]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 3:
                                assert.dom('input[type="text"]', this.element).hasNoValue();
                                assert.dom('.has-success', this.element).doesNotExist();
                                assert.dom('.has-error', this.element).doesNotExist();
                                assert.dom('.has-warning', this.element).doesNotExist();

                            case 7:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('render invalid', function () {
            var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                this.set('model', createModel(this, {}));
                                _context2.next = 3;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "DOFACJOt",
                                    "block": "{\"symbols\":[],\"statements\":[[0,\" \"],[1,[27,\"validated-input/text\",null,[[\"model\",\"valuePath\"],[[22,0,[\"model\"]],\"name\"]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 3:
                                assert.dom('input[type="text"]', this.element).hasNoValue();
                                assert.dom('.has-success', this.element).doesNotExist();
                                assert.dom('.has-error', this.element).exists();
                                assert.dom('.has-warning', this.element).doesNotExist();

                            case 7:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            return function (_x2) {
                return _ref3.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('render valid', function () {
            var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
                var model;
                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                model = this.set('model', createModel(this, { name: 'foo' }));
                                _context3.next = 3;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "DOFACJOt",
                                    "block": "{\"symbols\":[],\"statements\":[[0,\" \"],[1,[27,\"validated-input/text\",null,[[\"model\",\"valuePath\"],[[22,0,[\"model\"]],\"name\"]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 3:
                                assert.dom('input[type="text"]', this.element).hasValue(model.name);
                                assert.dom('.has-success', this.element).exists();
                                assert.dom('.has-error', this.element).doesNotExist();
                                assert.dom('.has-warning', this.element).doesNotExist();

                            case 7:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            return function (_x3) {
                return _ref4.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('render warning message', function () {
            var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
                var model;
                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                model = this.set('model', createModel(this, { name: 'fo' }));
                                _context4.next = 3;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "DOFACJOt",
                                    "block": "{\"symbols\":[],\"statements\":[[0,\" \"],[1,[27,\"validated-input/text\",null,[[\"model\",\"valuePath\"],[[22,0,[\"model\"]],\"name\"]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 3:
                                assert.dom('input[type="text"]', this.element).hasValue(model.name);
                                assert.dom('.has-success', this.element).doesNotExist();
                                assert.dom('.has-error', this.element).doesNotExist();
                                assert.dom('.has-warning', this.element).exists();

                            case 7:
                            case 'end':
                                return _context4.stop();
                        }
                    }
                }, _callee4, this);
            }));

            return function (_x4) {
                return _ref5.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/integration/components/validated-model-form/component-test', ['@ember/test-helpers', 'ember-qunit', 'qunit'], function (_testHelpers, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Integration | Component | validated-model-form', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        (0, _qunit.test)('it renders', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "Yg7cCoKV",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[21,\"validated-model-form\"],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                assert.dom(this.element).hasText('');
                                // Template block usage:
                                _context.next = 5;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "Xwpc9Yc8",
                                    "block": "{\"symbols\":[],\"statements\":[[0,\"\\n\"],[4,\"validated-model-form\",null,null,{\"statements\":[[0,\"                template block text\\n\"]],\"parameters\":[]},null],[0,\"        \"]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 5:
                                assert.dom(this.element).hasText('template block text');

                            case 6:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/integration/helpers/range-test', ['@ember/test-helpers', 'ember-qunit', 'qunit'], function (_testHelpers, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Integration | Helper | range', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        (0, _qunit.test)('it renders', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "gh1docvQ",
                                    "block": "{\"symbols\":[\"i\"],\"statements\":[[4,\"each\",[[27,\"range\",[1,5],null]],null,{\"statements\":[[1,[22,1,[]],false]],\"parameters\":[1]},null]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 2:
                                assert.dom(this.element).hasText('12345');

                            case 3:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/integration/routes/settings/profile/name/-components/citation-preview-test', ['@ember/test-helpers', 'ember-qunit', 'qunit', 'ember-osf-web/initializers/ember-cli-mirage'], function (_testHelpers, _emberQunit, _qunit, _emberCliMirage) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Integration | routes | settings | profile | name | -components | citation-preview', function (hooks) {
        (0, _emberQunit.setupRenderingTest)(hooks);
        hooks.beforeEach(function () {
            this.server = (0, _emberCliMirage.startMirage)();
        });
        hooks.afterEach(function () {
            this.server.shutdown();
        });
        var citationAssertions = function citationAssertions(context, assert, expected) {
            assert.dom('[data-test-citation-container]', context.element).exists();
            assert.dom('[data-test-apa-citation]', context.element).containsText(expected.apa);
            assert.dom('[data-test-mla-citation]', context.element).containsText(expected.mla);
        };
        (0, _qunit.test)('Everything, two middle names, no period after suffix', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                var user, expected;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                assert.expect(3);
                                user = server.create('user', {
                                    givenName: 'Peggy',
                                    middleNames: 'Herbert Gavin',
                                    familyName: 'Doyle',
                                    suffix: 'DDS'
                                });
                                expected = {
                                    apa: 'Doyle, P. H. G., DDS.',
                                    mla: 'Doyle, Peggy H. G., DDS.'
                                };

                                this.set('user', user);
                                _context.next = 6;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "XYHNtSDm",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"settings/profile/name/-components/citation-preview\",null,[[\"user\"],[[23,[\"user\"]]]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 6:
                                citationAssertions(this, assert, expected);

                            case 7:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('Everything, two middle names, period after suffix', function () {
            var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
                var user, expected;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                assert.expect(3);
                                user = server.create('user', {
                                    givenName: 'Peggy',
                                    middleNames: 'Herbert Gavin',
                                    familyName: 'Doyle',
                                    suffix: 'DDS.'
                                });
                                expected = {
                                    apa: 'Doyle, P. H. G., DDS.',
                                    mla: 'Doyle, Peggy H. G., DDS.'
                                };

                                this.set('user', user);
                                _context2.next = 6;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "XYHNtSDm",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"settings/profile/name/-components/citation-preview\",null,[[\"user\"],[[23,[\"user\"]]]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 6:
                                citationAssertions(this, assert, expected);

                            case 7:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            return function (_x2) {
                return _ref3.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('Everything, one middle name, period after suffix', function () {
            var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
                var user, expected;
                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                assert.expect(3);
                                user = server.create('user', {
                                    givenName: 'Peggy',
                                    middleNames: 'Herbert',
                                    familyName: 'Doyle',
                                    suffix: 'DDS'
                                });
                                expected = {
                                    apa: 'Doyle, P. H., DDS.',
                                    mla: 'Doyle, Peggy H., DDS.'
                                };

                                this.set('user', user);
                                _context3.next = 6;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "XYHNtSDm",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"settings/profile/name/-components/citation-preview\",null,[[\"user\"],[[23,[\"user\"]]]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 6:
                                citationAssertions(this, assert, expected);

                            case 7:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            return function (_x3) {
                return _ref4.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('Everything but middle names, period after suffix', function () {
            var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
                var user, expected;
                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                assert.expect(3);
                                user = server.create('user', {
                                    givenName: 'Peggy',
                                    middleNames: '',
                                    familyName: 'Doyle',
                                    suffix: 'DDS.'
                                });
                                expected = {
                                    apa: 'Doyle, P., DDS.',
                                    mla: 'Doyle, Peggy, DDS.'
                                };

                                this.set('user', user);
                                _context4.next = 6;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "XYHNtSDm",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"settings/profile/name/-components/citation-preview\",null,[[\"user\"],[[23,[\"user\"]]]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 6:
                                citationAssertions(this, assert, expected);

                            case 7:
                            case 'end':
                                return _context4.stop();
                        }
                    }
                }, _callee4, this);
            }));

            return function (_x4) {
                return _ref5.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('Everything but middle names and suffix', function () {
            var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(assert) {
                var user, expected;
                return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                        switch (_context5.prev = _context5.next) {
                            case 0:
                                assert.expect(3);
                                user = server.create('user', {
                                    givenName: 'Peggy',
                                    middleNames: '',
                                    familyName: 'Doyle',
                                    suffix: ''
                                });
                                expected = {
                                    apa: 'Doyle, P.',
                                    mla: 'Doyle, Peggy.'
                                };

                                this.set('user', user);
                                _context5.next = 6;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "XYHNtSDm",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"settings/profile/name/-components/citation-preview\",null,[[\"user\"],[[23,[\"user\"]]]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 6:
                                citationAssertions(this, assert, expected);

                            case 7:
                            case 'end':
                                return _context5.stop();
                        }
                    }
                }, _callee5, this);
            }));

            return function (_x5) {
                return _ref6.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('Everything but suffix, two middle names', function () {
            var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(assert) {
                var user, expected;
                return regeneratorRuntime.wrap(function _callee6$(_context6) {
                    while (1) {
                        switch (_context6.prev = _context6.next) {
                            case 0:
                                assert.expect(3);
                                user = server.create('user', {
                                    givenName: 'Peggy',
                                    middleNames: 'Herbert Gavin',
                                    familyName: 'Doyle',
                                    suffix: ''
                                });
                                expected = {
                                    apa: 'Doyle, P. H. G.',
                                    mla: 'Doyle, Peggy H. G.'
                                };

                                this.set('user', user);
                                _context6.next = 6;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "XYHNtSDm",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"settings/profile/name/-components/citation-preview\",null,[[\"user\"],[[23,[\"user\"]]]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 6:
                                citationAssertions(this, assert, expected);

                            case 7:
                            case 'end':
                                return _context6.stop();
                        }
                    }
                }, _callee6, this);
            }));

            return function (_x6) {
                return _ref7.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('Everything but suffix, one middle name', function () {
            var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(assert) {
                var user, expected;
                return regeneratorRuntime.wrap(function _callee7$(_context7) {
                    while (1) {
                        switch (_context7.prev = _context7.next) {
                            case 0:
                                assert.expect(3);
                                user = server.create('user', {
                                    givenName: 'Peggy',
                                    middleNames: 'Herbert',
                                    familyName: 'Doyle',
                                    suffix: ''
                                });
                                expected = {
                                    apa: 'Doyle, P. H.',
                                    mla: 'Doyle, Peggy H.'
                                };

                                this.set('user', user);
                                _context7.next = 6;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "XYHNtSDm",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"settings/profile/name/-components/citation-preview\",null,[[\"user\"],[[23,[\"user\"]]]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 6:
                                citationAssertions(this, assert, expected);

                            case 7:
                            case 'end':
                                return _context7.stop();
                        }
                    }
                }, _callee7, this);
            }));

            return function (_x7) {
                return _ref8.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('Everything but suffix, two given names', function () {
            var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(assert) {
                var user, expected;
                return regeneratorRuntime.wrap(function _callee8$(_context8) {
                    while (1) {
                        switch (_context8.prev = _context8.next) {
                            case 0:
                                assert.expect(3);
                                user = server.create('user', {
                                    givenName: 'Peggy Sue',
                                    middleNames: 'Herbert',
                                    familyName: 'Doyle',
                                    suffix: ''
                                });
                                expected = {
                                    apa: 'Doyle, P. S. H.',
                                    mla: 'Doyle, Peggy Sue H.'
                                };

                                this.set('user', user);
                                _context8.next = 6;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "XYHNtSDm",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"settings/profile/name/-components/citation-preview\",null,[[\"user\"],[[23,[\"user\"]]]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 6:
                                citationAssertions(this, assert, expected);

                            case 7:
                            case 'end':
                                return _context8.stop();
                        }
                    }
                }, _callee8, this);
            }));

            return function (_x8) {
                return _ref9.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('Everything but suffix, two family and two given names', function () {
            var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assert) {
                var user, expected;
                return regeneratorRuntime.wrap(function _callee9$(_context9) {
                    while (1) {
                        switch (_context9.prev = _context9.next) {
                            case 0:
                                assert.expect(3);
                                user = server.create('user', {
                                    givenName: 'Peggy Sue',
                                    middleNames: 'Herbert',
                                    familyName: 'von Helsing',
                                    suffix: ''
                                });
                                expected = {
                                    apa: 'von Helsing, P. S. H.',
                                    mla: 'von Helsing, Peggy Sue H.'
                                };

                                this.set('user', user);
                                _context9.next = 6;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "XYHNtSDm",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"settings/profile/name/-components/citation-preview\",null,[[\"user\"],[[23,[\"user\"]]]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 6:
                                citationAssertions(this, assert, expected);

                            case 7:
                            case 'end':
                                return _context9.stop();
                        }
                    }
                }, _callee9, this);
            }));

            return function (_x9) {
                return _ref10.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('Everything, suffix no period, hyphenated family and two given names', function () {
            var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(assert) {
                var user, expected;
                return regeneratorRuntime.wrap(function _callee10$(_context10) {
                    while (1) {
                        switch (_context10.prev = _context10.next) {
                            case 0:
                                assert.expect(3);
                                user = server.create('user', {
                                    givenName: 'Peggy Sue',
                                    middleNames: 'Herbert',
                                    familyName: 'Doyle-vonHelsing',
                                    suffix: 'DDS'
                                });
                                expected = {
                                    apa: 'Doyle-vonHelsing, P. S. H., DDS.',
                                    mla: 'Doyle-vonHelsing, Peggy Sue H., DDS.'
                                };

                                this.set('user', user);
                                _context10.next = 6;
                                return (0, _testHelpers.render)(Ember.HTMLBars.template({
                                    "id": "XYHNtSDm",
                                    "block": "{\"symbols\":[],\"statements\":[[1,[27,\"settings/profile/name/-components/citation-preview\",null,[[\"user\"],[[23,[\"user\"]]]]],false]],\"hasEval\":false}",
                                    "meta": {}
                                }));

                            case 6:
                                citationAssertions(this, assert, expected);

                            case 7:
                            case 'end':
                                return _context10.stop();
                        }
                    }
                }, _callee10, this);
            }));

            return function (_x10) {
                return _ref11.apply(this, arguments);
            };
        }());
    });
});

define("qunit/index", ["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  /* globals QUnit */

  var _module = QUnit.module;
  exports.module = _module;
  var test = exports.test = QUnit.test;
  var skip = exports.skip = QUnit.skip;
  var only = exports.only = QUnit.only;
  var todo = exports.todo = QUnit.todo;

  exports.default = QUnit;
});
define('ember-osf-web/tests/test-helper', ['@ember/test-helpers', 'ember-asset-loader/test-support/preload-assets', 'ember-cli-mirage', 'ember-get-config', 'ember-osf-web/app', 'ember-osf-web/config/asset-manifest', 'ember-qunit', 'qunit-dom'], function (_testHelpers, _preloadAssets, _emberCliMirage, _emberGetConfig, _app, _assetManifest, _emberQunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _testHelpers.setApplication)(_app.default.create(_emberGetConfig.default.APP));
    // Run tests with a seed for consistent visual diffs in Percy
    _emberCliMirage.faker.seed(17);
    _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        _context.next = 2;
                        return (0, _preloadAssets.default)(_assetManifest.default);

                    case 2:
                        (0, _emberQunit.start)();

                    case 3:
                    case 'end':
                        return _context.stop();
                }
            }
        }, _callee, undefined);
    }))();
});

define('ember-osf-web/tests/unit/adapters/citation-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Adapter | citation', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        // Replace this with your real tests.
        (0, _qunit.test)('it exists', function (assert) {
            var adapter = this.owner.lookup('adapter:citation');
            assert.ok(adapter);
        });
    });
});

define('ember-osf-web/tests/unit/adapters/collection-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Adapter | collection', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        // Replace this with your real tests.
        (0, _qunit.test)('it exists', function (assert) {
            var adapter = this.owner.lookup('adapter:collection');
            assert.ok(adapter);
        });
    });
});

define('ember-osf-web/tests/unit/adapters/draft-registration-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Adapter | draft-registration', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        // Replace this with your real tests.
        (0, _qunit.test)('it exists', function (assert) {
            var adapter = this.owner.lookup('adapter:draft-registration');
            assert.ok(adapter);
        });
    });
});

define('ember-osf-web/tests/unit/adapters/license-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Adapter | license', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        // Replace this with your real tests.
        (0, _qunit.test)('it exists', function (assert) {
            var adapter = this.owner.lookup('adapter:license');
            assert.ok(adapter);
        });
    });
});

define('ember-osf-web/tests/unit/adapters/log-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Adapter | log', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        // Replace this with your real tests.
        (0, _qunit.test)('it exists', function (assert) {
            var adapter = this.owner.lookup('adapter:log');
            assert.ok(adapter);
        });
    });
});

define('ember-osf-web/tests/unit/adapters/node-link-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Adapter | node-link', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        // Replace this with your real tests.
        (0, _qunit.test)('it exists', function (assert) {
            var adapter = this.owner.lookup('adapter:node-link');
            assert.ok(adapter);
        });
    });
});

define('ember-osf-web/tests/unit/adapters/node-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Adapter | node', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
    });
});

define('ember-osf-web/tests/unit/adapters/osf-adapter-test', ['ember-data', 'ember-data-factory-guy', 'ember-qunit', 'ember-sinon-qunit/test-support/test', 'qunit'], function (_emberData, _emberDataFactoryGuy, _emberQunit, _test, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Adapter | osf-adapter', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        hooks.beforeEach(function () {
            (0, _emberDataFactoryGuy.manualSetup)(this);
        });
        (0, _test.default)('#buildURL appends a trailing slash if missing', function (assert) {
            var url = 'http://localhost:8000/v2/users/me';
            this.stub(_emberData.default.JSONAPIAdapter.prototype, 'buildURL').callsFake(function () {
                return url;
            });
            var adapter = this.owner.lookup('adapter:osf-adapter');
            var user = _emberDataFactoryGuy.default.make('user');
            var result = adapter.buildURL('user', 'me', user._internalModel.createSnapshot(), 'findRecord');
            assert.notEqual(url, result);
            assert.equal(result.slice(-1), '/');
        });
        (0, _test.default)('#buildURL _only_ appends a trailing slash if missing', function (assert) {
            var url = 'http://localhost:8000/v2/users/me/';
            this.stub(_emberData.default.JSONAPIAdapter.prototype, 'buildURL').callsFake(function () {
                return url;
            });
            var adapter = this.owner.lookup('adapter:osf-adapter');
            var user = _emberDataFactoryGuy.default.make('user');
            var result = adapter.buildURL('user', 'me', user._internalModel.createSnapshot(), 'findRecord');
            assert.equal(url, result);
        });
        (0, _test.default)('#buildURL uses relationship links if available for delete, update, and find', function (assert) {
            var url = 'http://localhost:8000/v2/users/me/rel/';
            var adapter = this.owner.lookup('adapter:osf-adapter');
            var user = _emberDataFactoryGuy.default.make('user', {
                links: {
                    self: url
                }
            });
            ['delete', 'update', 'find'].forEach(function (verb) {
                var result = adapter.buildURL('user', 'me', user._internalModel.createSnapshot(), verb + 'Record');
                assert.equal(url, result);
            });
        });
        (0, _test.default)('#buildURL uses snapshot.adapterOptions.url if available', function (assert) {
            var url = 'http://localhost:8000/v2/users/me/rel/';
            var adapter = this.owner.lookup('adapter:osf-adapter');
            var user = _emberDataFactoryGuy.default.make('user', {
                links: null
            });
            var result = adapter.buildURL('user', 'me', user._internalModel.createSnapshot({
                adapterOptions: {
                    url: url
                }
            }), 'createRecord');
            assert.equal(url, result);
        });
        (0, _test.default)('#buildURL uses snapshot.adapterOptions.url if available', function (assert) {
            var url = 'http://localhost:8000/v2/users/me/rel/';
            var adapter = this.owner.lookup('adapter:osf-adapter');
            var user = _emberDataFactoryGuy.default.make('user', {
                links: null
            });
            var result = adapter.buildURL('user', 'me', user._internalModel.createSnapshot({
                adapterOptions: {
                    url: url
                }
            }), 'createRecord');
            assert.equal(url, result);
        });
        (0, _test.default)('#ajaxOptions adds bulk contentType if request is bulk', function (assert) {
            var adapter = this.owner.lookup('adapter:osf-adapter');
            var opts = adapter.ajaxOptions(null, null, {
                isBulk: true
            });
            assert.equal(opts.contentType, 'application/vnd.api+json; ext=bulk');
        });
        (0, _qunit.skip)('#findRecord can embed(via include) data with findRecord', function (assert) {
            var _this = this;

            var done = assert.async();
            assert.expect(1);
            Ember.run(function () {
                _this.inject.service('store');
                var store = _this.store;

                var node = _emberDataFactoryGuy.default.make('node');
                var children = void 0;
                return Ember.RSVP.Promise.all([store.createRecord('node', {
                    title: 'Foo'
                }), store.createRecord('node', {
                    title: 'Bar'
                })]).then(function (res) {
                    children = res;
                    return node.get('children').pushObjects(res);
                }).then(function () {
                    node.set('title', 'Parent');
                    return store.findRecord('node', node.id, { include: 'children' });
                }).then(function (res) {
                    assert.equal(res.get('children').toArray()[0].get('title'), children[0].get('title'));
                }).then(done);
            });
        });
    });
});

define('ember-osf-web/tests/unit/adapters/preprint-provider-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Adapter | preprint-provider', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        // Replace this with your real tests.
        (0, _qunit.test)('it exists', function (assert) {
            var adapter = this.owner.lookup('adapter:preprint-provider');
            assert.ok(adapter);
        });
    });
});

define('ember-osf-web/tests/unit/adapters/preprint-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Adapter | preprint', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        // Replace this with your real tests.
        (0, _qunit.test)('it exists', function (assert) {
            var adapter = this.owner.lookup('adapter:preprint');
            assert.ok(adapter);
        });
    });
});

define('ember-osf-web/tests/unit/adapters/region-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Adapter | region', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        // Replace this with your real tests.
        (0, _qunit.test)('it exists', function (assert) {
            var adapter = this.owner.lookup('adapter:region');
            assert.ok(adapter);
        });
    });
});

define('ember-osf-web/tests/unit/adapters/registration-schema-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Adapter | registration-schema', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        // Replace this with your real tests.
        (0, _qunit.test)('it exists', function (assert) {
            var adapter = this.owner.lookup('adapter:registration-schema');
            assert.ok(adapter);
        });
    });
});

define('ember-osf-web/tests/unit/adapters/review-action-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Adapter | review-action', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        // Replace this with your real tests.
        (0, _qunit.test)('it exists', function (assert) {
            var adapter = this.owner.lookup('adapter:review-action');
            assert.ok(adapter);
        });
    });
});

define('ember-osf-web/tests/unit/adapters/taxonomy-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Adapter | taxonomy', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        // Replace this with your real tests.
        (0, _qunit.test)('it exists', function (assert) {
            var adapter = this.owner.lookup('adapter:taxonomy');
            assert.ok(adapter);
        });
    });
});

define('ember-osf-web/tests/unit/adapters/token-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Adapter | token', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        // Replace this with your real tests.
        (0, _qunit.test)('it exists', function (assert) {
            var adapter = this.owner.lookup('adapter:token');
            assert.ok(adapter);
        });
    });
});

define('ember-osf-web/tests/unit/adapters/user-registration', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Adapter | user-registration', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        (0, _qunit.test)('it exists', function (assert) {
            var adapter = this.owner.lookup('adapter:user-registration');
            assert.ok(adapter);
        });
    });
});

define('ember-osf-web/tests/unit/application/controller-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Controller | application', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        // Replace this with your real tests.
        (0, _qunit.test)('it exists', function (assert) {
            var controller = this.owner.lookup('controller:application');
            assert.ok(controller);
        });
    });
});

define('ember-osf-web/tests/unit/application/route-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Route | application', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        (0, _qunit.test)('it exists', function (assert) {
            var route = this.owner.lookup('route:application');
            assert.ok(route);
        });
    });
});

define('ember-osf-web/tests/unit/collections/provider/discover/route-test', ['ember-osf-web/tests/helpers/engines', 'qunit'], function (_engines, _qunit) {
    'use strict';

    var themeStub = Ember.Service.extend();
    (0, _qunit.module)('Unit | Route | collections/provider/discover', function (hooks) {
        (0, _engines.setupEngineTest)(hooks, 'collections');
        hooks.beforeEach(function () {
            this.owner.register('service:theme', themeStub);
        });
        (0, _qunit.test)('it exists', function (assert) {
            var route = this.owner.lookup('route:provider/discover');
            assert.ok(route);
        });
    });
});

define('ember-osf-web/tests/unit/collections/provider/route-test', ['ember-osf-web/tests/helpers/engines', 'qunit'], function (_engines, _qunit) {
    'use strict';

    var themeStub = Ember.Service.extend();
    (0, _qunit.module)('Unit | Route | collections/provider', function (hooks) {
        (0, _engines.setupEngineTest)(hooks, 'collections');
        hooks.beforeEach(function () {
            this.owner.register('service:theme', themeStub);
        });
        (0, _qunit.test)('it exists', function (assert) {
            var route = this.owner.lookup('route:provider');
            assert.ok(route);
        });
    });
});

define('ember-osf-web/tests/unit/collections/provider/submit/route-test', ['ember-osf-web/tests/helpers/engines', 'qunit'], function (_engines, _qunit) {
    'use strict';

    var currentUserStub = Ember.Service.extend();
    var sessionStub = Ember.Service.extend({
        isAuthenticated: true
    });
    var storeStub = Ember.Service.extend();
    var themeStub = Ember.Service.extend();
    (0, _qunit.module)('Unit | Route | collections/provider/submit', function (hooks) {
        (0, _engines.setupEngineTest)(hooks, 'collections');
        hooks.beforeEach(function () {
            this.owner.register('service:currentUser', currentUserStub);
            this.owner.register('service:session', sessionStub);
            this.owner.register('service:store', storeStub);
            this.owner.register('service:theme', themeStub);
        });
        (0, _qunit.test)('it exists', function (assert) {
            var route = this.owner.lookup('route:provider/submit');
            assert.ok(route);
        });
    });
});

define('ember-osf-web/tests/unit/dashboard/controller-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Controller | dashboard', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        (0, _qunit.skip)('it exists', function (assert) {
            var controller = this.subject();
            // TODO: init calls out requests, need to mock them to have this pass
            assert.ok(controller);
        });
    });
});

define('ember-osf-web/tests/unit/dashboard/route-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Route | dashboard', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        (0, _qunit.test)('it exists', function (assert) {
            var route = this.owner.lookup('route:dashboard');
            assert.ok(route);
        });
    });
});

define('ember-osf-web/tests/unit/guid-file/controller-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Controller | guid-file', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        // Replace this with your real tests.
        (0, _qunit.test)('it exists', function (assert) {
            var controller = this.owner.lookup('controller:guid-file');
            assert.ok(controller);
        });
    });
});

define('ember-osf-web/tests/unit/guid-node/forks/controller-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Controller | guid-node/forks', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        // Replace this with your real tests.
        (0, _qunit.test)('it exists', function (assert) {
            var controller = this.owner.lookup('controller:guid-node/forks');
            assert.ok(controller);
        });
    });
});

define('ember-osf-web/tests/unit/guid-node/registrations/controller-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Controller | guid-node/registrations', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        // Replace this with your real tests.
        (0, _qunit.test)('it exists', function (assert) {
            var controller = this.owner.lookup('controller:guid-node/registrations');
            assert.ok(controller);
        });
    });
});

define('ember-osf-web/tests/unit/guid-registration/controller-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Controller | guid-registration', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        // Replace this with your real tests.
        (0, _qunit.test)('it exists', function (assert) {
            var controller = this.owner.lookup('controller:guid-registration');
            assert.ok(controller);
        });
    });
});

define('ember-osf-web/tests/unit/guid-user/quickfiles/controller-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Controller | guid-user/quickfiles', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        // Replace this with your real tests.
        (0, _qunit.test)('it exists', function (assert) {
            var controller = this.owner.lookup('controller:guid-user/quickfiles');
            assert.ok(controller);
        });
    });
});

define('ember-osf-web/tests/unit/guid-user/quickfiles/route-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Route | guid-user/quickfiles', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        (0, _qunit.test)('it exists', function (assert) {
            var route = this.owner.lookup('route:guid-user/quickfiles');
            assert.ok(route);
        });
    });
});

define('ember-osf-web/tests/unit/helpers/if-filter-test', ['ember-osf-web/helpers/if-filter', 'qunit'], function (_ifFilter, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Helper | if-filter', function () {
        (0, _qunit.test)('provider matches filter', function (assert) {
            var element = 'OSF';
            var filter = ['OSF'];
            var result = (0, _ifFilter.ifFilter)([element, filter, undefined]);
            assert.equal(result, true);
        });
        (0, _qunit.test)('provider does not match filter', function (assert) {
            var element = 'Cogprints';
            var filter = ['OSF'];
            var result = (0, _ifFilter.ifFilter)([element, filter, undefined]);
            assert.equal(result, false);
        });
    });
});

define('ember-osf-web/tests/unit/helpers/math-test', ['app-components/helpers/math', 'qunit'], function (_math, _qunit) {
    'use strict';

    var TEX_EXPRS = ['x^2 + y^2 = 1', 'f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi', ' % \\f is defined as f(#1) using the macro\n    \\f{x} = \\int_{-\\infty}^\\infty\n    \\hat \\f\\xi\\,e^{2 \\pi \\$ \\$ i \\xi x}\n    \\,d\\xi'];
    var TEMPLATES = [function (expr) {
        return 'This is TeX: ' + expr;
    }, function (expr) {
        return expr + ' is some TeX';
    }, function (expr) {
        return expr + ' TeX is leading and ending here ' + expr;
    }, function (expr) {
        return expr + ' ' + expr + ' Double Trouble!';
    }, function (expr) {
        return 'Some TeX ' + expr + ' surrounded by text';
    }, function (expr) {
        return expr;
    }, function (_) {
        return 'Haha, No Tex here!';
    }];
    var TEST_CASES = [];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = TEMPLATES[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var template = _step.value;
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = TEX_EXPRS[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var texExpression = _step3.value;
                    var _iteratorNormalCompletion4 = true;
                    var _didIteratorError4 = false;
                    var _iteratorError4 = undefined;

                    try {
                        for (var _iterator4 = _math.DELIMITERS[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                            var delimitter = _step4.value;

                            TEST_CASES.push({
                                input: template('' + delimitter.start + texExpression + delimitter.end),
                                output: template('<Length: ' + texExpression.length + ', Inline: ' + delimitter.inline + '>')
                            });
                        }
                    } catch (err) {
                        _didIteratorError4 = true;
                        _iteratorError4 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion4 && _iterator4.return) {
                                _iterator4.return();
                            }
                        } finally {
                            if (_didIteratorError4) {
                                throw _iteratorError4;
                            }
                        }
                    }
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    (0, _qunit.module)('Unit | Helper | math', function (_) {
        (0, _qunit.test)('it parses', function (assert) {
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = TEST_CASES[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var testCase = _step2.value;

                    var result = (0, _math.replace)(testCase.input, _math.DELIMITERS, function (expr, delim) {
                        return '<Length: ' + expr.length + ', Inline: ' + delim.inline + '>';
                    });
                    assert.equal(result, testCase.output, 'Properly parsed ' + testCase.input);
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }
        });
    });
});

define('ember-osf-web/tests/unit/instance-initializers/prerender-test', ['ember-osf-web/instance-initializers/prerender', 'qunit'], function (_prerender, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    var _createClass = function () {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }

        return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    var ReadyStub = function (_EmberService) {
        _inherits(ReadyStub, _EmberService);

        function ReadyStub() {
            _classCallCheck(this, ReadyStub);

            return _possibleConstructorReturn(this, (ReadyStub.__proto__ || Object.getPrototypeOf(ReadyStub)).apply(this, arguments));
        }

        _createClass(ReadyStub, [{
            key: 'ready',
            value: function ready() {
                return Promise.resolve();
            }
        }]);

        return ReadyStub;
    }(Ember.Service);

    (0, _qunit.module)('Unit | Instance Initializer | prerender', function (hooks) {
        hooks.beforeEach(function () {
            this.TestApplication = Ember.Application.extend();
            this.TestApplication.instanceInitializer({
                name: 'initializer under test',
                initialize: _prerender.initialize
            });
            this.application = this.TestApplication.create({ autoboot: false });
            this.application.register('service:ready', ReadyStub);
            this.instance = this.application.buildInstance();
            window.prerenderReady = false;
        });
        hooks.afterEach(function () {
            Ember.run(this.application, 'destroy');
            Ember.run(this.instance, 'destroy');
        });
        (0, _qunit.test)('it sets prerenderReady', function () {
            var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                assert.notOk(window.prerenderReady, 'prerenderReady starts false');
                                _context.next = 3;
                                return this.instance.boot();

                            case 3:
                                assert.ok(window.prerenderReady, 'prerenderReady set true');

                            case 4:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x) {
                return _ref.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/unit/institutions/controller-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Controller | institutions', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        (0, _qunit.test)('it exists', function (assert) {
            var controller = this.owner.lookup('controller:institutions');
            assert.ok(controller);
        });
    });
});

define('ember-osf-web/tests/unit/locations/auto-guid-test', ['ember-osf-web/locations/auto', 'ember-qunit', 'qunit'], function (_auto, _emberQunit, _qunit) {
    'use strict';

    var TEST_CASES = [{
        input: '/--user/abcd/',
        output: '/abcd/'
    }, {
        input: '/--user/abcd',
        output: '/abcd'
    }, {
        input: '/--user/--nested/abcd/',
        output: '/abcd/'
    }, {
        input: '/--registries-engine/overview/',
        output: '/overview/'
    }, {
        input: '/collections/--something--else/here/',
        output: '/collections/here/'
    }, {
        input: '/--registries/',
        output: '/'
    }, {
        input: '/AttheEnd/--registries/',
        output: '/AttheEnd/'
    }, {
        input: '/AttheEnd/--registries',
        output: '/AttheEnd'
    }, {
        input: '/normal--url/',
        output: '/normal--url/'
    }];
    (0, _qunit.module)('Unit | Location | guid-auto ', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        (0, _qunit.test)('it exists', function (assert) {
            assert.ok(this.owner.lookup('location:auto') instanceof _auto.default);
        });
        (0, _qunit.test)('cleanURL', function (assert) {
            var location = this.owner.lookup('location:auto');
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = TEST_CASES[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var testCase = _step.value;

                    assert.equal(location.cleanURL(testCase.input), testCase.output);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        });
    });
});

define('ember-osf-web/tests/unit/locations/none-guid-test', ['ember-osf-web/locations/none', 'ember-qunit', 'qunit'], function (_none, _emberQunit, _qunit) {
    'use strict';

    var TEST_CASES = [{
        input: '/--user/abcd/',
        output: '/abcd/'
    }, {
        input: '/--user/abcd',
        output: '/abcd'
    }, {
        input: '/--user/--nested/abcd/',
        output: '/abcd/'
    }, {
        input: '/--registries-engine/overview/',
        output: '/overview/'
    }, {
        input: '/collections/--something--else/here/',
        output: '/collections/here/'
    }, {
        input: '/--registries/',
        output: '/'
    }, {
        input: '/AttheEnd/--registries/',
        output: '/AttheEnd/'
    }, {
        input: '/AttheEnd/--registries',
        output: '/AttheEnd'
    }];
    (0, _qunit.module)('Unit | Location | none-auto ', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        (0, _qunit.test)('it exists', function (assert) {
            assert.ok(this.owner.lookup('location:none') instanceof _none.default);
        });
        (0, _qunit.test)('cleanURL', function (assert) {
            var location = this.owner.lookup('location:none');
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = TEST_CASES[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var testCase = _step.value;

                    assert.equal(location.cleanURL(testCase.input), testCase.output);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        });
        (0, _qunit.test)('setURL does not clean', function (assert) {
            var location = this.owner.lookup('location:none');
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = TEST_CASES[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var testCase = _step2.value;

                    location.setURL(testCase.input);
                    assert.equal(location.path, testCase.input);
                    assert.notEqual(location.path, testCase.output);
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }
        });
    });
});

define('ember-osf-web/tests/unit/metric-adapters/keen-test', ['ember-osf-web/metrics-adapters/keen', 'ember-qunit', 'ember-sinon-qunit/test-support/test', 'qunit'], function (_keen, _emberQunit, _test, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Unit | Metrics Adapter | keen ', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        (0, _qunit.test)('it exists', function (assert) {
            assert.ok(this.owner.lookup('metrics-adapter:keen') instanceof _keen.default);
        });
        (0, _test.default)('trackPage - public node', function () {
            var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_) {
                var adapter, trackPublic, trackPrivate;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                adapter = this.owner.lookup('metrics-adapter:keen');
                                trackPublic = this.stub(adapter, 'trackPublicEvent');
                                trackPrivate = this.stub(adapter, 'trackPrivateEvent');

                                this.stub(adapter, 'getCurrentNode').resolves({ public: true });
                                _context.next = 6;
                                return adapter.trackPage({ page: 'Foo', title: 'Bar' });

                            case 6:
                                this.sandbox.assert.called(trackPublic);
                                this.sandbox.assert.called(trackPrivate);

                            case 8:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x) {
                return _ref.apply(this, arguments);
            };
        }());
        (0, _test.default)('trackPage - private node', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(_) {
                var adapter, trackPublic, trackPrivate;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                adapter = this.owner.lookup('metrics-adapter:keen');
                                trackPublic = this.stub(adapter, 'trackPublicEvent');
                                trackPrivate = this.stub(adapter, 'trackPrivateEvent');

                                this.stub(adapter, 'getCurrentNode').resolves({ public: false });
                                _context2.next = 6;
                                return adapter.trackPage({ page: 'Foo', title: 'Bar' });

                            case 6:
                                this.sandbox.assert.called(trackPrivate);
                                this.sandbox.assert.notCalled(trackPublic);

                            case 8:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            return function (_x2) {
                return _ref2.apply(this, arguments);
            };
        }());
        (0, _test.default)('trackPage - no node', function () {
            var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(_) {
                var adapter, trackPublic, trackPrivate;
                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                adapter = this.owner.lookup('metrics-adapter:keen');
                                trackPublic = this.stub(adapter, 'trackPublicEvent');
                                trackPrivate = this.stub(adapter, 'trackPrivateEvent');

                                this.stub(adapter, 'getCurrentNode').resolves(undefined);
                                _context3.next = 6;
                                return adapter.trackPage({ page: 'Foo', title: 'Bar' });

                            case 6:
                                this.sandbox.assert.called(trackPrivate);
                                this.sandbox.assert.notCalled(trackPublic);

                            case 8:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            return function (_x3) {
                return _ref3.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('getCurrentModelTask - undefined', function (assert) {
            this.owner.register('route:foo', {}, { instantiate: false });
            this.owner.register('service:router', Ember.Service.extend({
                currentRouteName: 'foo'
            }));
            var adapter = this.owner.lookup('metrics-adapter:keen');
            assert.equal(adapter.getCurrentModelTask(), undefined);
        });
        (0, _qunit.test)('getCurrentModelTask - model', function (assert) {
            var taskInstance = { isRunning: true };
            this.owner.register('route:foo', { currentModel: { taskInstance: taskInstance } }, { instantiate: false });
            this.owner.register('route:foo.bar', { currentModel: { taskInstance: undefined } }, { instantiate: false });
            this.owner.register('service:router', Ember.Service.extend({
                currentRouteName: 'foo.bar'
            }));
            var adapter = this.owner.lookup('metrics-adapter:keen');
            assert.equal(adapter.getCurrentModelTask(), taskInstance);
        });
    });
});

define('ember-osf-web/tests/unit/mirage/factories/utils-test', ['ember-osf-web/mirage/factories/utils', 'ember-qunit', 'qunit'], function (_utils, _emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Mirage | Factories | Utils | guid generation', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        (0, _qunit.test)('it can create guids', function (assert) {
            var guidFactory = (0, _utils.guid)('node');
            var generatedGuids = {};
            // https://oeis.org/A028355
            var _arr = [1, 2, 3, 4, 32, 123, 43, 2123, 432, 1234, 32123, 43212];
            for (var _i = 0; _i < _arr.length; _i++) {
                var i = _arr[_i];
                // Should generate the same guid for the same input
                var newGuid = guidFactory(i);
                assert.equal(newGuid, guidFactory(i));
                // Shouldn't repeat itself
                assert.notOk(generatedGuids[newGuid]);
                generatedGuids[newGuid] = true;
            }
        });
    });
});

define('ember-osf-web/tests/unit/mirage/views/utils/pagination-test', ['ember-qunit', 'qunit', 'ember-osf-web/mirage/views/private/utils'], function (_emberQunit, _qunit, _utils) {
    'use strict';

    function fakeRequest(url) {
        var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
            page = _ref.page,
            pageSize = _ref.pageSize;

        var queryParams = {};
        if (typeof page !== 'undefined') {
            queryParams.page = page.toString();
        }
        if (typeof pageSize !== 'undefined') {
            queryParams['page[size]'] = pageSize.toString();
        }
        return {
            requestBody: '',
            url: url,
            params: {},
            queryParams: queryParams
        };
    }
    (0, _qunit.module)('Unit | Mirage | Views | Utils | Pagination', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        var makeData = function makeData(start, end) {
            var data = [];
            for (var i = start; i <= end; i++) {
                data.push({
                    type: 'item',
                    id: i,
                    attributes: { foo: 'bar-' + i, bar: 'baz-' + i }
                });
            }
            return data;
        };
        (0, _qunit.test)('it can paginate', function (assert) {
            var request = fakeRequest('https://api.osf.io/v2/foos/', {});
            var data = makeData(1, 30);
            var expectedData = data.slice(0, 10);
            assert.equal(expectedData.length, 10);
            var expectedLinks = {
                self: 'https://api.osf.io/v2/foos/',
                first: 'https://api.osf.io/v2/foos/?page=1',
                next: 'https://api.osf.io/v2/foos/?page=2',
                prev: null,
                last: 'https://api.osf.io/v2/foos/?page=3'
            };
            var expectedMeta = {
                total: 30,
                per_page: 10,
                version: ''
            };
            var paginated = (0, _utils.paginate)(request, data, {});
            var actualData = paginated.data;
            assert.equal(actualData.length, 10);
            assert.deepEqual(paginated.meta, expectedMeta);
            assert.deepEqual(paginated.data, expectedData);
            assert.deepEqual(paginated.links, expectedLinks);
        });
        (0, _qunit.test)('it can limit the page size', function (assert) {
            var pageSize = 5;
            var request = fakeRequest('https://api.osf.io/v2/foos/', { pageSize: pageSize });
            var data = makeData(1, 30);
            var expectedData = data.slice(0, pageSize);
            assert.equal(expectedData.length, pageSize);
            var expectedLinks = {
                self: 'https://api.osf.io/v2/foos/?page[size]=' + pageSize,
                first: 'https://api.osf.io/v2/foos/?page=1&page[size]=' + pageSize,
                next: 'https://api.osf.io/v2/foos/?page=2&page[size]=' + pageSize,
                prev: null,
                last: 'https://api.osf.io/v2/foos/?page=6&page[size]=' + pageSize
            };
            var expectedMeta = {
                total: 30,
                per_page: pageSize,
                version: ''
            };
            var paginated = (0, _utils.paginate)(request, data, {});
            var actualData = paginated.data;
            assert.equal(actualData.length, pageSize);
            assert.deepEqual(paginated.meta, expectedMeta);
            assert.deepEqual(paginated.data, expectedData);
            assert.deepEqual(paginated.links, expectedLinks);
        });
        (0, _qunit.test)('it can increase the page size', function (assert) {
            var pageSize = 15;
            var request = fakeRequest('https://api.osf.io/v2/foos/', { pageSize: pageSize });
            var data = makeData(1, 30);
            var expectedData = data.slice(0, pageSize);
            assert.equal(expectedData.length, pageSize);
            var expectedLinks = {
                self: 'https://api.osf.io/v2/foos/?page[size]=' + pageSize,
                first: 'https://api.osf.io/v2/foos/?page=1&page[size]=' + pageSize,
                next: 'https://api.osf.io/v2/foos/?page=2&page[size]=' + pageSize,
                prev: null,
                last: 'https://api.osf.io/v2/foos/?page=2&page[size]=' + pageSize
            };
            var expectedMeta = {
                total: 30,
                per_page: pageSize,
                version: ''
            };
            var paginated = (0, _utils.paginate)(request, data, {});
            var actualData = paginated.data;
            assert.equal(actualData.length, pageSize);
            assert.deepEqual(paginated.meta, expectedMeta);
            assert.deepEqual(paginated.data, expectedData);
            assert.deepEqual(paginated.links, expectedLinks);
        });
        (0, _qunit.test)('it can return another page', function (assert) {
            var pageSize = 5;
            var request = fakeRequest('https://api.osf.io/v2/foos/', { pageSize: pageSize, page: 4 });
            var data = makeData(1, 30);
            var expectedData = data.slice(15, 15 + pageSize);
            assert.equal(expectedData.length, pageSize);
            var expectedLinks = {
                self: 'https://api.osf.io/v2/foos/?page=4&page[size]=' + pageSize,
                first: 'https://api.osf.io/v2/foos/?page=1&page[size]=' + pageSize,
                next: 'https://api.osf.io/v2/foos/?page=5&page[size]=' + pageSize,
                prev: 'https://api.osf.io/v2/foos/?page=3&page[size]=' + pageSize,
                last: 'https://api.osf.io/v2/foos/?page=6&page[size]=' + pageSize
            };
            var expectedMeta = {
                total: 30,
                per_page: pageSize,
                version: ''
            };
            var paginated = (0, _utils.paginate)(request, data, {});
            var actualData = paginated.data;
            assert.equal(actualData.length, pageSize);
            assert.deepEqual(paginated.meta, expectedMeta);
            assert.deepEqual(paginated.data, expectedData);
            assert.deepEqual(paginated.links, expectedLinks);
        });
        (0, _qunit.test)('it can paginate only one page', function (assert) {
            var request = fakeRequest('https://api.osf.io/v2/foos/');
            var data = makeData(1, 9);
            var expectedData = data.slice(0, 9);
            assert.equal(expectedData.length, 9);
            var expectedLinks = {
                self: 'https://api.osf.io/v2/foos/',
                first: 'https://api.osf.io/v2/foos/?page=1',
                next: null,
                prev: null,
                last: 'https://api.osf.io/v2/foos/?page=1'
            };
            var expectedMeta = {
                total: 9,
                per_page: 10,
                version: ''
            };
            var paginated = (0, _utils.paginate)(request, data, {});
            var actualData = paginated.data;
            assert.equal(actualData.length, 9);
            assert.deepEqual(paginated.meta, expectedMeta);
            assert.deepEqual(paginated.data, expectedData);
            assert.deepEqual(paginated.links, expectedLinks);
        });
    });
    (0, _qunit.module)('Unit | Mirage | Views | Utils | Query Parameters', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        (0, _qunit.test)('it can build a query parameter string', function (assert) {
            var expectedReturn = '?filter[title]=one%20item&page=3&sort=-date_modified';
            var queryParams = {
                page: '3',
                sort: '-date_modified',
                'filter[title]': 'one item'
            };
            var params = (0, _utils.buildQueryParams)(queryParams);
            assert.deepEqual(params, expectedReturn);
        });
    });
});

define('ember-osf-web/tests/unit/mirage/views/utils/sort-test', ['ember-qunit', 'moment', 'qunit', 'ember-osf-web/mirage/views/private/utils'], function (_emberQunit, _moment, _qunit, _utils) {
    'use strict';

    function fakeRequest(queryParams) {
        return {
            requestBody: '',
            url: '',
            params: {},
            queryParams: queryParams
        };
    }
    (0, _qunit.module)('Unit | Mirage | Views | Utils | dynamicSort', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        (0, _qunit.test)('it can sort strings', function (assert) {
            var unsorted = [{ attributes: { sortme: 'a' } }, { attributes: { sortme: 'c' } }, { attributes: { sortme: 'b' } }];
            var expected = [{ attributes: { sortme: 'a' } }, { attributes: { sortme: 'b' } }, { attributes: { sortme: 'c' } }];
            var sorted = unsorted.sort((0, _utils.dynamicSort)('sortme'));
            assert.deepEqual(sorted, expected);
        });
        (0, _qunit.test)('it can reverse sort strings', function (assert) {
            var unsorted = [{ attributes: { sortme: 'a' } }, { attributes: { sortme: 'c' } }, { attributes: { sortme: 'b' } }];
            var expected = [{ attributes: { sortme: 'c' } }, { attributes: { sortme: 'b' } }, { attributes: { sortme: 'a' } }];
            var sorted = unsorted.sort((0, _utils.dynamicSort)('-sortme'));
            assert.deepEqual(sorted, expected);
        });
        (0, _qunit.test)('it can sort numbers', function (assert) {
            var unsorted = [{ attributes: { sortme: 3 } }, { attributes: { sortme: 1 } }, { attributes: { sortme: 2 } }];
            var expected = [{ attributes: { sortme: 1 } }, { attributes: { sortme: 2 } }, { attributes: { sortme: 3 } }];
            var sorted = unsorted.sort((0, _utils.dynamicSort)('sortme'));
            assert.deepEqual(sorted, expected);
        });
        (0, _qunit.test)('it can sort dates', function (assert) {
            var dateOne = (0, _moment.default)().subtract(10, 'days');
            var dateTwo = (0, _moment.default)().subtract(5, 'days');
            var dateThree = (0, _moment.default)().subtract(1, 'days');
            var unsorted = [{ attributes: { sortme: dateThree } }, { attributes: { sortme: dateOne, unimportant: 'Hi' } }, { attributes: { sortme: dateTwo } }];
            var expected = [{ attributes: { sortme: dateOne, unimportant: 'Hi' } }, { attributes: { sortme: dateTwo } }, { attributes: { sortme: dateThree } }];
            var sorted = unsorted.sort((0, _utils.dynamicSort)('sortme'));
            assert.deepEqual(sorted, expected);
        });
    });
    (0, _qunit.module)('Unit | Mirage | Views | Utils | sort', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        (0, _qunit.test)('it can sort', function (assert) {
            var request = fakeRequest({ sort: 'string' });
            var unsorted = [{ attributes: { string: 'a', num: 3 } }, { attributes: { string: 'c', num: 2 } }, { attributes: { string: 'b', num: 1 } }];
            var expected = [{ attributes: { string: 'a', num: 3 } }, { attributes: { string: 'b', num: 1 } }, { attributes: { string: 'c', num: 2 } }];
            var sorted = (0, _utils.sort)(request, unsorted, {});
            assert.deepEqual(sorted, expected);
        });
        (0, _qunit.test)('it can use a different key', function (assert) {
            var request = fakeRequest({ sort: 'num' });
            var unsorted = [{ attributes: { string: 'a', num: 3 } }, { attributes: { string: 'c', num: 2 } }, { attributes: { string: 'b', num: 1 } }];
            var expected = [{ attributes: { string: 'b', num: 1 } }, { attributes: { string: 'c', num: 2 } }, { attributes: { string: 'a', num: 3 } }];
            var sorted = (0, _utils.sort)(request, unsorted, {});
            assert.deepEqual(sorted, expected);
        });
        (0, _qunit.test)('it can reverse sort', function (assert) {
            var request = fakeRequest({ sort: '-num' });
            var unsorted = [{ attributes: { string: 'a', num: 3 } }, { attributes: { string: 'c', num: 1 } }, { attributes: { string: 'b', num: 2 } }];
            var expected = [{ attributes: { string: 'a', num: 3 } }, { attributes: { string: 'b', num: 2 } }, { attributes: { string: 'c', num: 1 } }];
            var sorted = (0, _utils.sort)(request, unsorted, {});
            assert.deepEqual(sorted, expected);
        });
        (0, _qunit.test)('it can use a default sort key', function (assert) {
            var request = fakeRequest({});
            var options = { defaultSortKey: 'num' };
            var unsorted = [{ attributes: { string: 'a', num: 3 } }, { attributes: { string: 'c', num: 2 } }, { attributes: { string: 'b', num: 1 } }];
            var expected = [{ attributes: { string: 'b', num: 1 } }, { attributes: { string: 'c', num: 2 } }, { attributes: { string: 'a', num: 3 } }];
            var sorted = (0, _utils.sort)(request, unsorted, options);
            assert.deepEqual(sorted, expected);
        });
        (0, _qunit.test)('it can sort by id', function (assert) {
            var request = fakeRequest({ sort: 'id' });
            var unsorted = [{ id: 2, attributes: { string: 'a', num: 3 } }, { id: 1, attributes: { string: 'c', num: 2 } }, { id: 3, attributes: { string: 'b', num: 1 } }];
            var expected = [{ id: 1, attributes: { string: 'c', num: 2 } }, { id: 2, attributes: { string: 'a', num: 3 } }, { id: 3, attributes: { string: 'b', num: 1 } }];
            var sorted = (0, _utils.sort)(request, unsorted, {});
            assert.deepEqual(sorted, expected);
        });
        (0, _qunit.test)('it can reverse sort by id', function (assert) {
            var request = fakeRequest({ sort: '-id' });
            var unsorted = [{ id: 2, attributes: { string: 'a', num: 3 } }, { id: 1, attributes: { string: 'c', num: 2 } }, { id: 3, attributes: { string: 'b', num: 1 } }];
            var expected = [{ id: 3, attributes: { string: 'b', num: 1 } }, { id: 2, attributes: { string: 'a', num: 3 } }, { id: 1, attributes: { string: 'c', num: 2 } }];
            var sorted = (0, _utils.sort)(request, unsorted, {});
            assert.deepEqual(sorted, expected);
        });
    });
});

define('ember-osf-web/tests/unit/models/banner-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Model | banner', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        (0, _qunit.test)('it exists', function (assert) {
            var _this = this;

            var model = Ember.run(function () {
                return _this.owner.lookup('service:store').createRecord('banner');
            });
            assert.ok(model);
        });
    });
});

define('ember-osf-web/tests/unit/models/citation-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Model | citation', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        (0, _qunit.test)('it exists', function (assert) {
            var _this = this;

            var model = Ember.run(function () {
                return _this.owner.lookup('service:store').createRecord('citation');
            });
            assert.ok(!!model);
        });
    });
});

define('ember-osf-web/tests/unit/models/collections-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Model | collection', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        (0, _qunit.test)('it exists', function (assert) {
            var _this = this;

            var model = Ember.run(function () {
                return _this.owner.lookup('service:store').createRecord('collection');
            });
            assert.ok(!!model);
        });
    });
});

define('ember-osf-web/tests/unit/models/comment-report-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Model | comment-report', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        (0, _qunit.test)('it exists', function (assert) {
            var _this = this;

            var model = Ember.run(function () {
                return _this.owner.lookup('service:store').createRecord('comment-report');
            });
            assert.ok(!!model);
        });
    });
});

define('ember-osf-web/tests/unit/models/comment-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Model | comment', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        (0, _qunit.test)('it exists', function (assert) {
            var _this = this;

            var model = Ember.run(function () {
                return _this.owner.lookup('service:store').createRecord('comment');
            });
            assert.ok(!!model);
        });
    });
});

define('ember-osf-web/tests/unit/models/contributor-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Model | contributor', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        (0, _qunit.test)('it exists', function (assert) {
            var _this = this;

            var model = Ember.run(function () {
                return _this.owner.lookup('service:store').createRecord('contributor');
            });
            assert.ok(!!model);
        });
    });
});

define('ember-osf-web/tests/unit/models/draft-registration-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Model | draft-registration', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        (0, _qunit.test)('it exists', function (assert) {
            var _this = this;

            var model = Ember.run(function () {
                return _this.owner.lookup('service:store').createRecord('draft-registration');
            });
            assert.ok(!!model);
        });
    });
});

define('ember-osf-web/tests/unit/models/file-provider-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Model | file-provider', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        (0, _qunit.test)('it exists', function (assert) {
            var _this = this;

            var model = Ember.run(function () {
                return _this.owner.lookup('service:store').createRecord('file-provider');
            });
            assert.ok(!!model);
        });
    });
});

define('ember-osf-web/tests/unit/models/file-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Model | file', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        (0, _qunit.test)('it exists', function (assert) {
            var _this = this;

            var model = Ember.run(function () {
                return _this.owner.lookup('service:store').createRecord('file');
            });
            assert.ok(!!model);
        });
    });
});

define('ember-osf-web/tests/unit/models/file-version-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Model | file-version', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        (0, _qunit.test)('it exists', function (assert) {
            var _this = this;

            var model = Ember.run(function () {
                return _this.owner.lookup('service:store').createRecord('file-version');
            });
            assert.ok(!!model);
        });
    });
});

define('ember-osf-web/tests/unit/models/institution-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Model | institution', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        (0, _qunit.test)('it exists', function (assert) {
            var _this = this;

            var model = Ember.run(function () {
                return _this.owner.lookup('service:store').createRecord('institution');
            });
            assert.ok(!!model);
        });
    });
});

define('ember-osf-web/tests/unit/models/license-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Model | license', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        (0, _qunit.test)('it exists', function (assert) {
            var _this = this;

            var model = Ember.run(function () {
                return _this.owner.lookup('service:store').createRecord('license');
            });
            assert.ok(!!model);
        });
    });
});

define('ember-osf-web/tests/unit/models/node-link-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Model | node-link', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        (0, _qunit.test)('it exists', function (assert) {
            var _this = this;

            var model = Ember.run(function () {
                return _this.owner.lookup('service:store').createRecord('node-link');
            });
            assert.ok(!!model);
        });
    });
});

define('ember-osf-web/tests/unit/models/node-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Model | node', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        (0, _qunit.test)('it exists', function (assert) {
            var _this = this;

            var model = Ember.run(function () {
                return _this.owner.lookup('service:store').createRecord('node');
            });
            assert.ok(!!model);
        });
    });
});

define('ember-osf-web/tests/unit/models/osf-model-test', ['ember-osf-web/initializers/ember-cli-mirage', 'ember-qunit', 'qunit'], function (_emberCliMirage, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Unit | Model | osf-model', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        (0, _qunit.test)('it exists', function (assert) {
            var _this = this;

            var model = Ember.run(function () {
                return _this.owner.lookup('service:store').createRecord('osf-model');
            });
            assert.ok(!!model);
        });
        (0, _qunit.test)('queryHasMany works', function () {
            var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
                var _this2 = this;

                var server, store, userId;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                server = (0, _emberCliMirage.startMirage)();
                                store = this.owner.lookup('service:store');
                                userId = '1';
                                _context2.next = 5;
                                return Ember.run(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                                    var userOne, nodeList, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, node, user, nodeIds, nodes, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _node;

                                    return regeneratorRuntime.wrap(function _callee$(_context) {
                                        while (1) {
                                            switch (_context.prev = _context.next) {
                                                case 0:
                                                    userOne = server.create('user', { id: userId });
                                                    nodeList = server.createList('node', 3, {});
                                                    _iteratorNormalCompletion = true;
                                                    _didIteratorError = false;
                                                    _iteratorError = undefined;
                                                    _context.prev = 5;

                                                    for (_iterator = nodeList[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                                        node = _step.value;

                                                        server.create('contributor', { node: node, users: userOne });
                                                    }
                                                    _context.next = 13;
                                                    break;

                                                case 9:
                                                    _context.prev = 9;
                                                    _context.t0 = _context['catch'](5);
                                                    _didIteratorError = true;
                                                    _iteratorError = _context.t0;

                                                case 13:
                                                    _context.prev = 13;
                                                    _context.prev = 14;

                                                    if (!_iteratorNormalCompletion && _iterator.return) {
                                                        _iterator.return();
                                                    }

                                                case 16:
                                                    _context.prev = 16;

                                                    if (!_didIteratorError) {
                                                        _context.next = 19;
                                                        break;
                                                    }

                                                    throw _iteratorError;

                                                case 19:
                                                    return _context.finish(16);

                                                case 20:
                                                    return _context.finish(13);

                                                case 21:
                                                    _context.next = 23;
                                                    return store.findRecord('user', userId);

                                                case 23:
                                                    user = _context.sent;

                                                    assert.ok(!!user);
                                                    assert.equal(user.get('id'), userId, 'Checking user id.');
                                                    nodeIds = nodeList.map(function (node) {
                                                        return node.id;
                                                    });
                                                    _context.next = 29;
                                                    return user.queryHasMany('nodes');

                                                case 29:
                                                    nodes = _context.sent;

                                                    assert.equal(nodes.length, nodeIds.length);
                                                    assert.notEqual(nodes.length, 0);
                                                    _iteratorNormalCompletion2 = true;
                                                    _didIteratorError2 = false;
                                                    _iteratorError2 = undefined;
                                                    _context.prev = 35;
                                                    for (_iterator2 = nodes[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                                                        _node = _step2.value;

                                                        assert.ok(nodeIds.indexOf(_node.id) !== -1, 'All the node ids should be in the array, but ' + _node.id + ' isn\'t in nodeIds.');
                                                    }
                                                    _context.next = 43;
                                                    break;

                                                case 39:
                                                    _context.prev = 39;
                                                    _context.t1 = _context['catch'](35);
                                                    _didIteratorError2 = true;
                                                    _iteratorError2 = _context.t1;

                                                case 43:
                                                    _context.prev = 43;
                                                    _context.prev = 44;

                                                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                                        _iterator2.return();
                                                    }

                                                case 46:
                                                    _context.prev = 46;

                                                    if (!_didIteratorError2) {
                                                        _context.next = 49;
                                                        break;
                                                    }

                                                    throw _iteratorError2;

                                                case 49:
                                                    return _context.finish(46);

                                                case 50:
                                                    return _context.finish(43);

                                                case 51:
                                                case 'end':
                                                    return _context.stop();
                                            }
                                        }
                                    }, _callee, _this2, [[5, 9, 13, 21], [14,, 16, 20], [35, 39, 43, 51], [44,, 46, 50]]);
                                })));

                            case 5:
                                server.shutdown();

                            case 6:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            return function (_x) {
                return _ref.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/unit/models/preprint-provider-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Model | preprint-provider', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        (0, _qunit.test)('it exists', function (assert) {
            var _this = this;

            var model = Ember.run(function () {
                return _this.owner.lookup('service:store').createRecord('preprint-provider');
            });
            assert.ok(!!model);
        });
    });
});

define('ember-osf-web/tests/unit/models/preprint-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Model | preprint', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        (0, _qunit.test)('it exists', function (assert) {
            var _this = this;

            var model = Ember.run(function () {
                return _this.owner.lookup('service:store').createRecord('preprint');
            });
            assert.ok(!!model);
        });
        (0, _qunit.test)('it has an attribute: title', function (assert) {
            var _this2 = this;

            var model = Ember.run(function () {
                return _this2.owner.lookup('service:store').createRecord('preprint');
            });
            var hasAttr = Object.keys(model.toJSON()).indexOf('title') > -1;
            assert.ok(hasAttr);
        });
        (0, _qunit.test)('it has an attribute: subjects', function (assert) {
            var _this3 = this;

            var model = Ember.run(function () {
                return _this3.owner.lookup('service:store').createRecord('preprint');
            });
            var hasAttr = Object.keys(model.toJSON()).indexOf('subjects') > -1;
            assert.ok(hasAttr);
        });
        (0, _qunit.test)('it has an attribute: dateCreated', function (assert) {
            var _this4 = this;

            var model = Ember.run(function () {
                return _this4.owner.lookup('service:store').createRecord('preprint');
            });
            var hasAttr = Object.keys(model.toJSON()).indexOf('dateCreated') > -1;
            assert.ok(hasAttr);
        });
        (0, _qunit.test)('it has an attribute: datePublished', function (assert) {
            var _this5 = this;

            var model = Ember.run(function () {
                return _this5.owner.lookup('service:store').createRecord('preprint');
            });
            var hasAttr = Object.keys(model.toJSON()).indexOf('datePublished') > -1;
            assert.ok(hasAttr);
        });
        (0, _qunit.test)('it has an attribute: originalPublicationDate', function (assert) {
            var _this6 = this;

            var model = Ember.run(function () {
                return _this6.owner.lookup('service:store').createRecord('preprint');
            });
            var hasAttr = Object.keys(model.toJSON()).indexOf('originalPublicationDate') > -1;
            assert.ok(hasAttr);
        });
        (0, _qunit.test)('it has an attribute: dateModified', function (assert) {
            var _this7 = this;

            var model = Ember.run(function () {
                return _this7.owner.lookup('service:store').createRecord('preprint');
            });
            var hasAttr = Object.keys(model.toJSON()).indexOf('dateModified') > -1;
            assert.ok(hasAttr);
        });
        (0, _qunit.test)('it has an attribute: doi', function (assert) {
            var _this8 = this;

            var model = Ember.run(function () {
                return _this8.owner.lookup('service:store').createRecord('preprint');
            });
            var hasAttr = Object.keys(model.toJSON()).indexOf('doi') > -1;
            assert.ok(hasAttr);
        });
        (0, _qunit.test)('it has an attribute: isPublished', function (assert) {
            var _this9 = this;

            var model = Ember.run(function () {
                return _this9.owner.lookup('service:store').createRecord('preprint');
            });
            var hasAttr = Object.keys(model.toJSON()).indexOf('isPublished') > -1;
            assert.ok(hasAttr);
        });
        (0, _qunit.test)('it has an attribute: isPreprintOrphan', function (assert) {
            var _this10 = this;

            var model = Ember.run(function () {
                return _this10.owner.lookup('service:store').createRecord('preprint');
            });
            var hasAttr = Object.keys(model.toJSON()).indexOf('isPreprintOrphan') > -1;
            assert.ok(hasAttr);
        });
        (0, _qunit.test)('it has an attribute: licenseRecord', function (assert) {
            var _this11 = this;

            var model = Ember.run(function () {
                return _this11.owner.lookup('service:store').createRecord('preprint');
            });
            var hasAttr = Object.keys(model.toJSON()).indexOf('licenseRecord') > -1;
            assert.ok(hasAttr);
        });
        (0, _qunit.test)('it has an attribute: reviewsState', function (assert) {
            var _this12 = this;

            var model = Ember.run(function () {
                return _this12.owner.lookup('service:store').createRecord('preprint');
            });
            var hasAttr = Object.keys(model.toJSON()).indexOf('reviewsState') > -1;
            assert.ok(hasAttr);
        });
        (0, _qunit.test)('it has an attribute: dateLastTransitioned', function (assert) {
            var _this13 = this;

            var model = Ember.run(function () {
                return _this13.owner.lookup('service:store').createRecord('preprint');
            });
            var hasAttr = Object.keys(model.toJSON()).indexOf('dateLastTransitioned') > -1;
            assert.ok(hasAttr);
        });
        (0, _qunit.test)('node relationship', function (assert) {
            var model = this.owner.lookup('service:store').modelFor('preprint');
            var relationship = Ember.get(model, 'relationshipsByName').get('node');
            assert.equal(relationship.key, 'node');
            assert.equal(relationship.type, 'node');
            assert.equal(relationship.kind, 'belongsTo');
        });
        (0, _qunit.test)('license relationship', function (assert) {
            var model = this.owner.lookup('service:store').modelFor('preprint');
            var relationship = Ember.get(model, 'relationshipsByName').get('license');
            assert.equal(relationship.key, 'license');
            assert.equal(relationship.type, 'license');
            assert.equal(relationship.kind, 'belongsTo');
        });
        (0, _qunit.test)('file relationship', function (assert) {
            var model = this.owner.lookup('service:store').modelFor('preprint');
            var relationship = Ember.get(model, 'relationshipsByName').get('primaryFile');
            assert.equal(relationship.key, 'primaryFile');
            assert.equal(relationship.type, 'file');
            assert.equal(relationship.kind, 'belongsTo');
        });
        (0, _qunit.test)('preprint-provider relationship', function (assert) {
            var model = this.owner.lookup('service:store').modelFor('preprint');
            var relationship = Ember.get(model, 'relationshipsByName').get('provider');
            assert.equal(relationship.key, 'provider');
            assert.equal(relationship.type, 'preprint-provider');
            assert.equal(relationship.kind, 'belongsTo');
        });
        (0, _qunit.test)('review-action relationship', function (assert) {
            var model = this.owner.lookup('service:store').modelFor('preprint');
            var relationship = Ember.get(model, 'relationshipsByName').get('reviewActions');
            assert.equal(relationship.key, 'reviewActions');
            assert.equal(relationship.type, 'review-action');
            assert.equal(relationship.kind, 'hasMany');
        });
        (0, _qunit.test)('contributors relationship', function (assert) {
            var model = this.owner.lookup('service:store').modelFor('preprint');
            var relationship = Ember.get(model, 'relationshipsByName').get('contributors');
            assert.equal(relationship.key, 'contributors');
            assert.equal(relationship.type, 'contributor');
            assert.equal(relationship.kind, 'hasMany');
        });
    });
});

define('ember-osf-web/tests/unit/models/region-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Model | region', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        // Replace this with your real tests.
        (0, _qunit.test)('it exists', function (assert) {
            var store = this.owner.lookup('service:store');
            var model = Ember.run(function () {
                return store.createRecord('region', {});
            });
            assert.ok(model);
        });
    });
});

define('ember-osf-web/tests/unit/models/registration-schema-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Model | registration-schema', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        (0, _qunit.test)('it exists', function (assert) {
            var _this = this;

            var model = Ember.run(function () {
                return _this.owner.lookup('service:store').createRecord('registration-schema');
            });
            assert.ok(!!model);
        });
    });
});

define('ember-osf-web/tests/unit/models/registration-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Model | registration', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        (0, _qunit.test)('it exists', function (assert) {
            var _this = this;

            var model = Ember.run(function () {
                return _this.owner.lookup('service:store').createRecord('registration');
            });
            assert.ok(!!model);
        });
    });
});

define('ember-osf-web/tests/unit/models/review-action-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Model | review-action', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        (0, _qunit.test)('it exists', function (assert) {
            var _this = this;

            var model = Ember.run(function () {
                return _this.owner.lookup('service:store').createRecord('review-action');
            });
            assert.ok(!!model);
        });
        (0, _qunit.test)('it has an attribute: actionTrigger', function (assert) {
            var _this2 = this;

            var model = Ember.run(function () {
                return _this2.owner.lookup('service:store').createRecord('review-action');
            });
            var hasAttr = Object.keys(model.toJSON()).indexOf('actionTrigger') > -1;
            assert.ok(hasAttr);
        });
        (0, _qunit.test)('it has an attribute: comment', function (assert) {
            var _this3 = this;

            var model = Ember.run(function () {
                return _this3.owner.lookup('service:store').createRecord('review-action');
            });
            var hasAttr = Object.keys(model.toJSON()).indexOf('comment') > -1;
            assert.ok(hasAttr);
        });
        (0, _qunit.test)('it has an attribute: fromState', function (assert) {
            var _this4 = this;

            var model = Ember.run(function () {
                return _this4.owner.lookup('service:store').createRecord('review-action');
            });
            var hasAttr = Object.keys(model.toJSON()).indexOf('fromState') > -1;
            assert.ok(hasAttr);
        });
        (0, _qunit.test)('it has an attribute: toState', function (assert) {
            var _this5 = this;

            var model = Ember.run(function () {
                return _this5.owner.lookup('service:store').createRecord('review-action');
            });
            var hasAttr = Object.keys(model.toJSON()).indexOf('toState') > -1;
            assert.ok(hasAttr);
        });
        (0, _qunit.test)('it has an attribute: dateCreated', function (assert) {
            var _this6 = this;

            var model = Ember.run(function () {
                return _this6.owner.lookup('service:store').createRecord('review-action');
            });
            var hasAttr = Object.keys(model.toJSON()).indexOf('dateCreated') > -1;
            assert.ok(hasAttr);
        });
        (0, _qunit.test)('it has an attribute: dateModified', function (assert) {
            var _this7 = this;

            var model = Ember.run(function () {
                return _this7.owner.lookup('service:store').createRecord('review-action');
            });
            var hasAttr = Object.keys(model.toJSON()).indexOf('dateModified') > -1;
            assert.ok(hasAttr);
        });
        (0, _qunit.test)('it has an attribute: actionTrigger', function (assert) {
            var _this8 = this;

            var model = Ember.run(function () {
                return _this8.owner.lookup('service:store').createRecord('review-action');
            });
            var hasAttr = Object.keys(model.toJSON()).indexOf('actionTrigger') > -1;
            assert.ok(hasAttr);
        });
        (0, _qunit.test)('preprint-provider relationship', function (assert) {
            var model = this.owner.lookup('service:store').modelFor('review-action');
            var relationship = Ember.get(model, 'relationshipsByName').get('provider');
            assert.equal(relationship.key, 'provider');
            assert.equal(relationship.type, 'preprint-provider');
            assert.equal(relationship.kind, 'belongsTo');
        });
        (0, _qunit.test)('target relationship', function (assert) {
            var model = this.owner.lookup('service:store').modelFor('review-action');
            var relationship = Ember.get(model, 'relationshipsByName').get('target');
            assert.equal(relationship.key, 'target');
            assert.equal(relationship.type, 'preprint');
            assert.equal(relationship.kind, 'belongsTo');
        });
        (0, _qunit.test)('user relationship', function (assert) {
            var model = this.owner.lookup('service:store').modelFor('review-action');
            var relationship = Ember.get(model, 'relationshipsByName').get('creator');
            assert.equal(relationship.key, 'creator');
            assert.equal(relationship.type, 'user');
            assert.equal(relationship.kind, 'belongsTo');
        });
    });
});

define('ember-osf-web/tests/unit/models/taxonomy-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Model | taxonomy', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        (0, _qunit.test)('it exists', function (assert) {
            var _this = this;

            var model = Ember.run(function () {
                return _this.owner.lookup('service:store').createRecord('taxonomy');
            });
            assert.ok(!!model);
        });
    });
});

define('ember-osf-web/tests/unit/models/token-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Model | token', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        // Replace this with your real tests.
        (0, _qunit.test)('it exists', function (assert) {
            var store = this.owner.lookup('service:store');
            var model = Ember.run(function () {
                return store.createRecord('token', {});
            });
            assert.ok(model);
        });
    });
});

define('ember-osf-web/tests/unit/models/user-registration', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Model | user-registration', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        // Replace this with your real tests.
        (0, _qunit.test)('it exists', function (assert) {
            var store = this.owner.lookup('service:store');
            var model = Ember.run(function () {
                return store.createRecord('user-registration', {});
            });
            assert.ok(model);
        });
    });
});

define('ember-osf-web/tests/unit/models/user-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Model | user', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        (0, _qunit.test)('it exists', function (assert) {
            var _this = this;

            var model = Ember.run(function () {
                return _this.owner.lookup('service:store').createRecord('user');
            });
            assert.ok(!!model);
        });
        (0, _qunit.test)('it has an attribute: fullName', function (assert) {
            var _this2 = this;

            var model = Ember.run(function () {
                return _this2.owner.lookup('service:store').createRecord('user');
            });
            var hasAttr = Object.keys(model.toJSON()).indexOf('fullName') > -1;
            assert.ok(hasAttr);
        });
        (0, _qunit.test)('it has an attribute: givenName', function (assert) {
            var _this3 = this;

            var model = Ember.run(function () {
                return _this3.owner.lookup('service:store').createRecord('user');
            });
            var hasAttr = Object.keys(model.toJSON()).indexOf('givenName') > -1;
            assert.ok(hasAttr);
        });
        (0, _qunit.test)('it has an attribute: middleNames', function (assert) {
            var _this4 = this;

            var model = Ember.run(function () {
                return _this4.owner.lookup('service:store').createRecord('user');
            });
            var hasAttr = Object.keys(model.toJSON()).indexOf('middleNames') > -1;
            assert.ok(hasAttr);
        });
        (0, _qunit.test)('it has an attribute: familyName', function (assert) {
            var _this5 = this;

            var model = Ember.run(function () {
                return _this5.owner.lookup('service:store').createRecord('user');
            });
            var hasAttr = Object.keys(model.toJSON()).indexOf('familyName') > -1;
            assert.ok(hasAttr);
        });
        (0, _qunit.test)('it has an attribute: dateRegistered', function (assert) {
            var _this6 = this;

            var model = Ember.run(function () {
                return _this6.owner.lookup('service:store').createRecord('user');
            });
            var hasAttr = Object.keys(model.toJSON()).indexOf('dateRegistered') > -1;
            assert.ok(hasAttr);
        });
        (0, _qunit.test)('it has an attribute: fullName', function (assert) {
            var _this7 = this;

            var model = Ember.run(function () {
                return _this7.owner.lookup('service:store').createRecord('user');
            });
            var hasAttr = Object.keys(model.toJSON()).indexOf('fullName') > -1;
            assert.ok(hasAttr);
        });
        (0, _qunit.test)('it has an attribute: canViewReviews', function (assert) {
            var _this8 = this;

            var model = Ember.run(function () {
                return _this8.owner.lookup('service:store').createRecord('user');
            });
            var hasAttr = Object.keys(model.toJSON()).indexOf('canViewReviews') > -1;
            assert.ok(hasAttr);
        });
        (0, _qunit.test)('nodes relationship', function (assert) {
            var model = this.owner.lookup('service:store').modelFor('user');
            var relationship = Ember.get(model, 'relationshipsByName').get('nodes');
            assert.equal(relationship.key, 'nodes');
            assert.equal(relationship.type, 'node');
            assert.equal(relationship.kind, 'hasMany');
        });
        (0, _qunit.test)('registrations relationship', function (assert) {
            var model = this.owner.lookup('service:store').modelFor('user');
            var relationship = Ember.get(model, 'relationshipsByName').get('registrations');
            assert.equal(relationship.key, 'registrations');
            assert.equal(relationship.type, 'registration');
            assert.equal(relationship.kind, 'hasMany');
        });
        (0, _qunit.test)('files relationship', function (assert) {
            var model = this.owner.lookup('service:store').modelFor('user');
            var relationship = Ember.get(model, 'relationshipsByName').get('quickfiles');
            assert.equal(relationship.key, 'quickfiles');
            assert.equal(relationship.type, 'file');
            assert.equal(relationship.kind, 'hasMany');
        });
        (0, _qunit.test)('institutions relationship', function (assert) {
            var model = this.owner.lookup('service:store').modelFor('user');
            var relationship = Ember.get(model, 'relationshipsByName').get('institutions');
            assert.equal(relationship.key, 'institutions');
            assert.equal(relationship.type, 'institution');
            assert.equal(relationship.kind, 'hasMany');
        });
    });
});

define('ember-osf-web/tests/unit/models/wiki-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Model | wiki', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        (0, _qunit.test)('it exists', function (assert) {
            var _this = this;

            var model = Ember.run(function () {
                return _this.owner.lookup('service:store').createRecord('wiki');
            });
            assert.ok(!!model);
        });
    });
});

define('ember-osf-web/tests/unit/quickfiles/route-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Route | quickfiles', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        (0, _qunit.test)('it exists', function (assert) {
            var route = this.owner.lookup('route:quickfiles');
            assert.ok(route);
        });
    });
});

define('ember-osf-web/tests/unit/serializers/citation-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Serializer | citation', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        // Replace this with your real tests.
        (0, _qunit.test)('it serializes records', function (assert) {
            var _this = this;

            var record = Ember.run(function () {
                return _this.owner.lookup('service:store').createRecord('citation');
            });
            var serializedRecord = record.serialize();
            assert.ok(serializedRecord);
        });
    });
});

define('ember-osf-web/tests/unit/serializers/collection-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Serializer | collection', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        // Replace this with your real tests.
        (0, _qunit.test)('it serializes records', function (assert) {
            var _this = this;

            var record = Ember.run(function () {
                return _this.owner.lookup('service:store').createRecord('collection');
            });
            var serializedRecord = record.serialize();
            assert.ok(serializedRecord);
        });
    });
});

define('ember-osf-web/tests/unit/serializers/draft-registration-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Serializer | draft-registration', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        // Replace this with your real tests.
        (0, _qunit.test)('it serializes records', function (assert) {
            var _this = this;

            var record = Ember.run(function () {
                return _this.owner.lookup('service:store').createRecord('draft-registration');
            });
            var serializedRecord = record.serialize();
            assert.ok(serializedRecord);
        });
    });
});

define('ember-osf-web/tests/unit/serializers/file-provider-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Serializer | file-provider', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        // Replace this with your real tests.
        (0, _qunit.test)('it serializes records', function (assert) {
            var _this = this;

            var record = Ember.run(function () {
                return _this.owner.lookup('service:store').createRecord('file-provider');
            });
            var serializedRecord = record.serialize();
            assert.ok(serializedRecord);
        });
    });
});

define('ember-osf-web/tests/unit/serializers/license-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Serializer | license', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        // Replace this with your real tests.
        (0, _qunit.test)('it serializes records', function (assert) {
            var _this = this;

            var record = Ember.run(function () {
                return _this.owner.lookup('service:store').createRecord('license');
            });
            var serializedRecord = record.serialize();
            assert.ok(serializedRecord);
        });
    });
});

define('ember-osf-web/tests/unit/serializers/node-link-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Serializer | node-link', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        // Replace this with your real tests.
        (0, _qunit.test)('it serializes records', function (assert) {
            var _this = this;

            var record = Ember.run(function () {
                return _this.owner.lookup('service:store').createRecord('node-link');
            });
            var serializedRecord = record.serialize();
            assert.ok(serializedRecord);
        });
    });
});

define('ember-osf-web/tests/unit/serializers/osf-serializer-test', ['ember-qunit', 'faker', 'qunit'], function (_emberQunit, _faker, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Serializer | osf-serializer', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        (0, _qunit.test)('#_mergeLinks adds links to attributes if included in payload', function (assert) {
            var payload = {
                id: _faker.default.random.uuid(),
                type: 'base',
                attributes: {
                    key: 'value'
                },
                links: {
                    html: _faker.default.internet.url()
                }
            };
            var serializer = this.owner.lookup('serializer:osf-serializer');
            var normalized = serializer._mergeLinks(payload);
            assert.propEqual(normalized.attributes.links, payload.links);
        });
    });
});

define('ember-osf-web/tests/unit/serializers/preprint-provider-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Serializer | preprint-provider', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        // Replace this with your real tests.
        (0, _qunit.test)('it serializes records', function (assert) {
            var _this = this;

            var record = Ember.run(function () {
                return _this.owner.lookup('service:store').createRecord('preprint-provider');
            });
            var serializedRecord = record.serialize();
            assert.ok(serializedRecord);
        });
    });
});

define('ember-osf-web/tests/unit/serializers/region-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Serializer | region', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        // Replace this with your real tests.
        (0, _qunit.test)('it exists', function (assert) {
            var store = this.owner.lookup('service:store');
            var serializer = store.serializerFor('region');
            assert.ok(serializer);
        });
        (0, _qunit.test)('it serializes records', function (assert) {
            var store = this.owner.lookup('service:store');
            var record = Ember.run(function () {
                return store.createRecord('region', {});
            });
            var serializedRecord = record.serialize();
            assert.ok(serializedRecord);
        });
    });
});

define('ember-osf-web/tests/unit/serializers/registration-schema-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Serializer | registration-schema', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        // Replace this with your real tests.
        (0, _qunit.test)('it serializes records', function (assert) {
            var _this = this;

            var record = Ember.run(function () {
                return _this.owner.lookup('service:store').createRecord('registration-schema');
            });
            var serializedRecord = record.serialize();
            assert.ok(serializedRecord);
        });
    });
});

define('ember-osf-web/tests/unit/serializers/review-action-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Serializer | review-action', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        // Replace this with your real tests.
        (0, _qunit.test)('it serializes records', function (assert) {
            var _this = this;

            var record = Ember.run(function () {
                return _this.owner.lookup('service:store').createRecord('review-action');
            });
            var serializedRecord = record.serialize();
            assert.ok(serializedRecord);
        });
    });
});

define('ember-osf-web/tests/unit/serializers/taxonomy-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Serializer | taxonomy', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        // Replace this with your real tests.
        (0, _qunit.test)('it serializes records', function (assert) {
            var _this = this;

            var record = Ember.run(function () {
                return _this.owner.lookup('service:store').createRecord('taxonomy');
            });
            var serializedRecord = record.serialize();
            assert.ok(serializedRecord);
        });
    });
});

define('ember-osf-web/tests/unit/serializers/token-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Serializer | token', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        // Replace this with your real tests.
        (0, _qunit.test)('it exists', function (assert) {
            var store = this.owner.lookup('service:store');
            var serializer = store.serializerFor('token');
            assert.ok(serializer);
        });
        (0, _qunit.test)('it serializes records', function (assert) {
            var store = this.owner.lookup('service:store');
            var record = Ember.run(function () {
                return store.createRecord('token', {});
            });
            var serializedRecord = record.serialize();
            assert.ok(serializedRecord);
        });
    });
});

define('ember-osf-web/tests/unit/serializers/user-registration-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Serializer | user-registration', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        // Replace this with your real tests.
        (0, _qunit.test)('it exists', function (assert) {
            var store = this.owner.lookup('service:store');
            var serializer = store.serializerFor('user-registration');
            assert.ok(serializer);
        });
        (0, _qunit.test)('it serializes records', function (assert) {
            var store = this.owner.lookup('service:store');
            var record = Ember.run(function () {
                return store.createRecord('user-registration', {});
            });
            var serializedRecord = record.serialize();
            assert.ok(serializedRecord);
        });
    });
});

define('ember-osf-web/tests/unit/serializers/wiki-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Serializer | wiki', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        // Replace this with your real tests.
        (0, _qunit.test)('it serializes records', function (assert) {
            var _this = this;

            var record = Ember.run(function () {
                return _this.owner.lookup('service:store').createRecord('wiki');
            });
            var serializedRecord = record.serialize();
            assert.ok(serializedRecord);
        });
    });
});

define('ember-osf-web/tests/unit/services/analytics-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Service | analytics', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        // Replace this with your real tests.
        (0, _qunit.test)('it exists', function (assert) {
            var service = this.owner.lookup('service:analytics');
            assert.ok(service);
        });
    });
});

define('ember-osf-web/tests/unit/services/current-user-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Service | current-user', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        // Replace this with your real tests.
        (0, _qunit.test)('it exists', function (assert) {
            var service = this.owner.lookup('service:current-user');
            assert.ok(service);
        });
    });
});

define('ember-osf-web/tests/unit/services/meta-tags-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Service | meta-tags', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        // Replace this with your real tests.
        (0, _qunit.test)('it exists', function (assert) {
            var service = this.owner.lookup('service:meta-tags');
            assert.ok(service);
        });
    });
});

define('ember-osf-web/tests/unit/services/ready-test', ['@ember/test-helpers', 'ember-qunit', 'qunit'], function (_testHelpers, _emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Unit | Service | ready', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        // Set up ready/error listeners with assertions inside.
        // Adds 2 expected assertions for either success or failure.
        function setUpListeners(assert, ready, expectSuccess) {
            ready.on('ready', function () {
                assert.ok(expectSuccess, '"ready" event triggered');
            });
            ready.on('error', function () {
                assert.ok(!expectSuccess, '"error" event triggered');
            });
            ready.ready().then(function () {
                assert.ok(expectSuccess, 'ready.ready() resolves');
            }, function () {
                assert.ok(!expectSuccess, 'ready.ready() rejects');
            });
        }
        (0, _qunit.test)('one blocker', function () {
            var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                var ready, blocker;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                assert.expect(4);
                                ready = this.owner.lookup('service:ready');
                                blocker = ready.getBlocker();

                                setUpListeners(assert, ready, true);
                                assert.notOk(ready.get('isReady'), 'starts unready');
                                Ember.run(function () {
                                    blocker.done();
                                });
                                _context.next = 8;
                                return (0, _testHelpers.settled)();

                            case 8:
                                assert.ok(ready.get('isReady'), 'ends ready');

                            case 9:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            return function (_x) {
                return _ref.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('three blockers', function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(assert) {
                var ready, blocker1, blocker2, blocker3;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                assert.expect(5);
                                ready = this.owner.lookup('service:ready');
                                blocker1 = ready.getBlocker();
                                blocker2 = ready.getBlocker();
                                blocker3 = ready.getBlocker();

                                setUpListeners(assert, ready, true);
                                assert.notOk(ready.get('isReady'), 'starts unready');
                                Ember.run(function () {
                                    blocker2.done();
                                    blocker3.done();
                                });
                                _context2.next = 10;
                                return (0, _testHelpers.settled)();

                            case 10:
                                assert.notOk(ready.get('isReady'), 'still waiting on one blocker');
                                Ember.run(function () {
                                    blocker1.done();
                                });
                                _context2.next = 14;
                                return (0, _testHelpers.settled)();

                            case 14:
                                assert.ok(ready.get('isReady'), 'ends ready');

                            case 15:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            return function (_x2) {
                return _ref2.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('one blocker errors', function () {
            var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(assert) {
                var ready, blocker;
                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                assert.expect(4);
                                ready = this.owner.lookup('service:ready');
                                blocker = ready.getBlocker();

                                setUpListeners(assert, ready, false);
                                assert.notOk(ready.get('isReady'), 'starts unready');
                                blocker.errored();
                                _context3.next = 8;
                                return (0, _testHelpers.settled)();

                            case 8:
                                assert.notOk(ready.get('isReady'), 'never ready');

                            case 9:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            return function (_x3) {
                return _ref3.apply(this, arguments);
            };
        }());
        (0, _qunit.test)('third blocker errors', function () {
            var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(assert) {
                var ready, blocker1, blocker2, blocker3;
                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                assert.expect(5);
                                ready = this.owner.lookup('service:ready');
                                blocker1 = ready.getBlocker();
                                blocker2 = ready.getBlocker();
                                blocker3 = ready.getBlocker();

                                setUpListeners(assert, ready, false);
                                assert.notOk(ready.get('isReady'), 'starts unready');
                                Ember.run(function () {
                                    blocker2.done();
                                    blocker3.done();
                                });
                                _context4.next = 10;
                                return (0, _testHelpers.settled)();

                            case 10:
                                assert.notOk(ready.get('isReady'), 'still waiting on one blocker');
                                blocker1.errored();
                                _context4.next = 14;
                                return (0, _testHelpers.settled)();

                            case 14:
                                assert.notOk(ready.get('isReady'), 'never ready');

                            case 15:
                            case 'end':
                                return _context4.stop();
                        }
                    }
                }, _callee4, this);
            }));

            return function (_x4) {
                return _ref4.apply(this, arguments);
            };
        }());
    });
});

define('ember-osf-web/tests/unit/services/status-messages-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Service | status-messages', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        (0, _qunit.test)('it exists', function (assert) {
            var service = this.owner.lookup('service:status-messages');
            assert.ok(service);
        });
    });
});

define('ember-osf-web/tests/unit/transforms/array-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Transform | array', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        // Replace this with your real tests.
        (0, _qunit.test)('it exists', function (assert) {
            var transform = this.owner.lookup('transform:array');
            assert.ok(transform);
        });
    });
});

define('ember-osf-web/tests/unit/transforms/embed-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Transform | embed', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        // Replace this with your real tests.
        (0, _qunit.test)('it exists', function (assert) {
            var transform = this.owner.lookup('transform:embed');
            assert.ok(transform);
        });
    });
});

define('ember-osf-web/tests/unit/transforms/fixstring-test', ['ember-qunit', 'qunit', 'ember-osf-web/tests/fixtures/specialChars'], function (_emberQunit, _qunit, _specialChars) {
    'use strict';

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    (0, _qunit.module)('Unit | Transform | fixstring', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        (0, _qunit.test)('#serialize does not alter values sent from the server', function (assert) {
            var transform = this.owner.lookup('transform:fixstring');
            assert.expect(_specialChars.default.length);
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = _specialChars.default[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var _ref = _step.value;

                    var _ref2 = _slicedToArray(_ref, 1);

                    var raw = _ref2[0];

                    var res = transform.serialize(raw);
                    assert.equal(res, raw, 'Serialized string did not match raw value');
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        });
        (0, _qunit.test)('#deserialize converts values sent from the server into something display friendly', function (assert) {
            var transform = this.owner.lookup('transform:fixstring');
            assert.expect(_specialChars.default.length);
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = _specialChars.default[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var _ref3 = _step2.value;

                    var _ref4 = _slicedToArray(_ref3, 2);

                    var input = _ref4[0];
                    var output = _ref4[1];

                    var res = transform.deserialize(input);
                    assert.strictEqual(res, output, 'Incorrect string deserialization');
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }
        });
    });
});

define('ember-osf-web/tests/unit/transforms/links-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Transform | links', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        // Replace this with your real tests.
        (0, _qunit.test)('it exists', function (assert) {
            var transform = this.owner.lookup('transform:links');
            assert.ok(transform);
        });
    });
});

define('ember-osf-web/tests/unit/transforms/object-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Transform | object', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        // Replace this with your real tests.
        (0, _qunit.test)('it exists', function (assert) {
            var transform = this.owner.lookup('transform:object');
            assert.ok(transform);
        });
    });
});

define('ember-osf-web/tests/unit/utils/default-to-test', ['ember-osf-web/utils/default-to', 'qunit'], function (_defaultTo, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Utility | default-to', function () {
        (0, _qunit.test)('it returns value when defined', function (assert) {
            var value = 'foo';
            var defaultValue = 'bar';
            var result = (0, _defaultTo.default)(value, defaultValue);
            assert.equal(result, value);
        });
        (0, _qunit.test)('it returns defaultValue when undefined', function (assert) {
            var getUndef = function getUndef() {
                return undefined;
            };
            var value = getUndef();
            var defaultValue = 'bar';
            var result = (0, _defaultTo.default)(value, defaultValue);
            assert.equal(result, defaultValue);
        });
        (0, _qunit.test)('it returns value when null', function (assert) {
            var getNull = function getNull() {
                return null;
            };
            var value = getNull();
            var defaultValue = 'bar';
            var result = (0, _defaultTo.default)(value, defaultValue);
            assert.equal(result, value);
        });
    });
});

define('ember-osf-web/tests/unit/utils/fix-special-char-test', ['ember-osf-web/utils/fix-special-char', 'qunit', 'ember-osf-web/tests/fixtures/specialChars'], function (_fixSpecialChar, _qunit, _specialChars) {
    'use strict';

    var _slicedToArray = function () {
        function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;

            try {
                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                }
            } catch (err) {
                _d = true;
                _e = err;
            } finally {
                try {
                    if (!_n && _i["return"]) _i["return"]();
                } finally {
                    if (_d) throw _e;
                }
            }

            return _arr;
        }

        return function (arr, i) {
            if (Array.isArray(arr)) {
                return arr;
            } else if (Symbol.iterator in Object(arr)) {
                return sliceIterator(arr, i);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();

    (0, _qunit.module)('Unit | Utility | fix special char', function () {
        (0, _qunit.test)('#fixSpecialChar converts values sent from the server into something display friendly', function (assert) {
            assert.expect(_specialChars.default.length);
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = _specialChars.default[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var _ref = _step.value;

                    var _ref2 = _slicedToArray(_ref, 2);

                    var input = _ref2[0];
                    var output = _ref2[1];

                    var res = (0, _fixSpecialChar.default)(input);
                    assert.strictEqual(res, output);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        });
    });
});

define('ember-osf-web/tests/unit/utils/human-file-size', ['ember-osf-web/utils/human-file-size', 'qunit'], function (_humanFileSize, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Utility | human-file-size', function () {
        (0, _qunit.test)('it shows bytes', function (assert) {
            var result = (0, _humanFileSize.default)(5);
            assert.equal(result, '5 B');
        });
        (0, _qunit.test)('it shows si', function (assert) {
            var result = (0, _humanFileSize.default)(5 * 1e6);
            assert.equal(result, '5 MB');
        });
        (0, _qunit.test)('it shows not si', function (assert) {
            var result = (0, _humanFileSize.default)(5 * Math.pow(1024, 2), false);
            assert.equal(result, '5 MiB');
        });
    });
});

define('ember-osf-web/tests/unit/utils/load-relationship-test', ['qunit'], function (_qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Utility | load-relationship', function () {
        // Replace this with your real tests.
        (0, _qunit.test)('it works', function (assert) {
            assert.ok(true);
        });
    }); // import loadAll from 'ember-osf-web/utils/load-relationship';
});

define('ember-osf-web/tests/unit/utils/param-test', ['ember-osf-web/utils/param', 'qunit'], function (_param, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Utility | param', function () {
        (0, _qunit.test)('it creates a query string from params', function (assert) {
            assert.equal((0, _param.default)({
                foo: 'boo',
                bar: 'car'
            }), 'foo=boo&bar=car');
        });
        (0, _qunit.test)('it creates an empty query string from empty params', function (assert) {
            assert.equal((0, _param.default)({}), '');
        });
        (0, _qunit.test)('it url encodes keys and values', function (assert) {
            assert.equal((0, _param.default)({
                'foo/bar': 'boo,hoo'
            }), 'foo%2Fbar=boo%2Choo');
        });
    });
});

define('ember-osf-web/tests/unit/utils/path-join-test', ['ember-osf-web/utils/path-join', 'qunit'], function (_pathJoin, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Utility | path-join', function () {
        (0, _qunit.test)('it works', function (assert) {
            var result = (0, _pathJoin.default)('/this/', 'has', 'all/', '/combos', '/of-slashes');
            assert.equal(result, '/this/has/all/combos/of-slashes');
        });
    });
});

define('ember-osf-web/tests/unit/utils/random-scientist-test', ['ember-osf-web/utils/random-scientist', 'qunit'], function (_randomScientist, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Utility | random-scientist', function () {
        (0, _qunit.test)('it works', function (assert) {
            var result = (0, _randomScientist.default)();
            assert.ok(result);
        });
    });
});

define('ember-osf-web/tests/unit/utils/to-array-test', ['ember-osf-web/utils/to-array', 'qunit'], function (_toArray, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Utility | to-array', function () {
        (0, _qunit.test)('arrays remain arrays', function (assert) {
            var someArray = ['foo'];
            assert.strictEqual((0, _toArray.default)(someArray), someArray);
        });
        (0, _qunit.test)('scalars become arrays', function (assert) {
            var someScalar = 'foo';
            assert.deepEqual((0, _toArray.default)(someScalar), [someScalar]);
        });
    });
});

define('ember-osf-web/tests/unit/validators/mismatch-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    (0, _qunit.module)('Unit | Validator | mismatch', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        (0, _qunit.test)('it works', function (assert) {
            var validator = this.owner.lookup('validator:mismatch');
            assert.ok(validator);
        });
    });
});

define('ember-osf-web/tests/unit/validators/password-strength-test', ['ember-qunit', 'qunit'], function (_emberQunit, _qunit) {
    'use strict';

    function _asyncToGenerator(fn) {
        return function () {
            var gen = fn.apply(this, arguments);
            return new Promise(function (resolve, reject) {
                function step(key, arg) {
                    try {
                        var info = gen[key](arg);
                        var value = info.value;
                    } catch (error) {
                        reject(error);
                        return;
                    }

                    if (info.done) {
                        resolve(value);
                    } else {
                        return Promise.resolve(value).then(function (value) {
                            step("next", value);
                        }, function (err) {
                            step("throw", err);
                        });
                    }
                }

                return step("next");
            });
        };
    }

    (0, _qunit.module)('Unit | Validator | password-strength', function (hooks) {
        (0, _emberQunit.setupTest)(hooks);
        var minima = ['test', 'i89M', 'Fc95Rjd', 'v2O9u#k9!F', '*T99ny@t^72M'];

        var _loop = function _loop(i) {
            (0, _qunit.test)('Complexity ' + i, function () {
                var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {
                    var validator, options, builtOptions, message;
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                                case 0:
                                    validator = this.owner.lookup('validator:password-strength');
                                    options = { min: i };
                                    builtOptions = validator.buildOptions(options);
                                    _context.next = 5;
                                    return validator.validate(minima[i], builtOptions.copy());

                                case 5:
                                    message = _context.sent;

                                    assert.equal(message, true);

                                case 7:
                                case 'end':
                                    return _context.stop();
                            }
                        }
                    }, _callee, this);
                }));

                return function (_x) {
                    return _ref.apply(this, arguments);
                };
            }());
        };

        for (var i = 0; i < minima.length; i++) {
            _loop(i);
        }
    });
});

define('ember-osf-web/config/environment', [], function() {
  var prefix = 'ember-osf-web';
try {
  var metaName = prefix + '/config/environment';
  var rawConfig = document.querySelector('meta[name="' + metaName + '"]').getAttribute('content');
  var config = JSON.parse(unescape(rawConfig));

  var exports = { 'default': config };

  Object.defineProperty(exports, '__esModule', { value: true });

  return exports;
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

});

require('ember-osf-web/tests/test-helper');
EmberENV.TESTS_FILE_LOADED = true;
//# sourceMappingURL=/ember-osf-web/assets/tests-e6f3f2fd62fa314660ee2eedcd25079d.map
